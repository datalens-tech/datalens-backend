version: '3'

tasks:
  help:
    desc: Show help
    silent: true
    cmds:
      - echo 'Taskfile namespace used for development.'
      - echo 'General:'
      - echo '`task dev:init` to initialize the environment'
      - echo '`task dev:clean` to clean the environment'
      - echo ''
      - echo 'Linting:'
      - echo '`task dev:lint` to lint the code in current directory'
      - echo '`task dev:lint-fix` to fix linting issues the code in current directory'
      - echo ''
      - echo 'Testing:'
      - echo '`task dev:test` to run tests in current directory'
      - echo ''
      - echo '`task dev:compose_start` to start docker-compose'
      - echo '`task dev:compose_stop` to stop docker-compose'
      - echo '`task dev:compose_stop_all` to stop all running docker containers'
      - echo 'All `dev:compose_*` tasks could be used with DOCKER_HOST, f.e. `DOCKER_HOST=ssh://dl-vm task dev:compose_start`'
      - echo ''
      - echo 'If compose is started remotely via SSH, use `task dev:ssh_forward_start` to forward ports to localhost'
      - echo 'Use `task dev:ssh_forward_stop` to stop all SSH port forwarding'
      - echo ''
      - echo 'Development workflow example:'
      - echo '0. source environment variables'
      - echo '1. `cd %PACKAGE_DIR%`'
      - echo '2. `task dev:init`'
      - echo '3. `DOCKER_HOST=ssh://dl-vm task dev:compose_start`'
      - echo '4. `HOST=dl-vm task dev:ssh_forward_start`'
      - echo '5. Write some code'
      - echo '6. `task dev:lint-fix`'
      - echo '7. `task dev:test`'
      - echo '8. Repeat 5-7'
      - echo '9. `HOST=dl-vm task dev:ssh_forward_stop`'
      - echo '10. `DOCKER_HOST=ssh://dl-vm task dev:compose_stop`'

  init:
    desc: Initialize environment
    cmds:
      - poetry env use $(cat {{.ROOT_DIR}}/.python-version) --directory={{.PYPROJECT_TOML_PATH}}
      - poetry env info
      - echo "Cleaning unused envs in {{.VENV_PATH}}"
      - for env in "$UNUSED_ENVS"; do
          echo "Removing $env";
          poetry env remove $env --directory={{.PYPROJECT_TOML_PATH}};
        done;
      - echo "Initializing python virtual environment in {{.VENV_PATH}}"
      - poetry install --directory={{.PYPROJECT_TOML_PATH}} --sync --no-root
    requires:
      vars:
        - PYPROJECT_TOML_PATH
    vars:
      UNUSED_ENVS:
        sh: poetry env list --no-ansi --directory={{.PYPROJECT_TOML_PATH}} 
          | sed 's/ (Activated)//g'
          | grep -v \".venv\" || true

  poetry_lock:
    desc: Lock dependencies in metapkg
    cmds:
      - poetry lock --no-update --directory={{.PYPROJECT_TOML_PATH}}
    requires:
      vars:
        - PYPROJECT_TOML_PATH
  
  venv_bin:
    desc: Run venv bin
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - 'PATH="{{.VENV_PATH}}/bin:$PATH" {{.VENV_PATH}}/bin/{{.CLI_ARGS}}'
    requires:
      vars:
        - VENV_PATH

  venv_run:
    desc: Run poetry command
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - task: venv_bin
        vars:
          COMMAND: "python -m {{.COMMAND}} {{.CLI_ARGS}}"

  clean:
    desc: Clean environment
    cmds:
      - echo "Cleaning python virtual environment"
      - rm -rf {{.VENV_PATH}}
    requires:
      vars:
        - VENV_PATH

  lint:
    desc: Lint code
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - echo "Running black checks..."
      - task: venv_run
        vars:
          COMMAND: "black --config {{.LINTERS_PYPROJECT_TOML_PATH}} --check {{.LINT_PATH}}"
      
      - echo "Running isort checks..."
      - task: venv_run
        vars:
          COMMAND: "isort --settings-path {{.LINTERS_PYPROJECT_TOML_PATH}} --check-only {{.LINT_PATH}}"
      
      - echo "Running ruff checks..."
      - task: venv_run
        vars:
          COMMAND: "ruff check {{.LINT_PATH}}"
    vars:
      LINT_PATH: '{{.CLI_ARGS | default "."}}'
      TOML_FILES:
        sh: find {{.CLI_ARGS | default "."}} -name '*.toml' | tr '\n' ' '
  
  lint-fix:
    desc: Lint fix code
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - echo "Running black fixes..."
      - task: venv_run
        vars:
          COMMAND: "black --safe --config {{.LINTERS_PYPROJECT_TOML_PATH}} {{.LINT_PATH}}"
      
      - echo "Running isort fixes..."
      - task: venv_run
        vars:
          COMMAND: "isort --settings-path {{.LINTERS_PYPROJECT_TOML_PATH}} {{.LINT_PATH}}"

      - echo "Running ruff fixes..."
      - task: venv_run
        vars:
          COMMAND: "ruff check --fix {{.LINT_PATH}}"
    vars:
      LINT_PATH: '{{.CLI_ARGS | default "."}}'
      TOML_FILES:
        sh: find {{.CLI_ARGS | default "."}} -name '*.toml' | tr '\n' ' '

  test:
    desc: Run tests
    cmds:
      - task: venv_run
        vars:
          COMMAND: pytest
          CLI_ARGS: "{{.CLI_ARGS}}"
    vars:
      CLI_ARGS: '{{.CLI_ARGS | default "."}}'

  compose_start:
    desc: Start docker-compose
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE_FILE}} up {{if .DETACH}}-d{{end}}
    vars:
      DETACH: '{{.DETACH | default true }}'
      DOCKER_COMPOSE_FILE: '{{.DOCKER_COMPOSE_FILE | default "docker-compose.yml"}}'

  compose_stop:
    desc: Stop docker-compose
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE_FILE}} down
    vars:
      DOCKER_COMPOSE_FILE: '{{.DOCKER_COMPOSE_FILE | default "docker-compose.yml"}}'

  compose_stop_all:
    desc: Stop all docker containers
    cmds:
      - docker stop $(docker ps -a -q)

  ssh_forward_start:
    desc: Forward docker ports to localhost
    requires:
      vars:
        - HOST
    cmds:
      - for port in $PORTS; do
          echo "Forwarding port $port";
          ssh -f -N -L $port:localhost:$port {{.HOST}};
        done;
        wait
    var:
    env:
      PORTS:
        sh: DOCKER_HOST=ssh://{{.HOST}} docker ps --format "{{`{{.Ports}}`}}" 
          | grep -o ':[0-9]*->' 
          | sed 's/->//g'
          | sed 's/://g' 
          | uniq
  
  ssh_forward_stop:
    desc: Stop SSH port forwarding for Docker containers
    cmds:
      - echo "Next processes will be killed:"
      - ps -ef | grep "ssh -f -N -L" | grep --invert-match "grep"
      - pkill -f "ssh -f -N -L"
