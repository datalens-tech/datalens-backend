version: 3

vars:
  DATALENS_UI_FOLDER: '{{.DATALENS_UI_FOLDER | default "../../../../datalens-ui"}}'

  CONTROL_API_TARGET: "dl_control_api"
  CONTROL_API_TAG: '{{.CONTROL_API_TAG | default "control-api:test"}}'

  DATA_API_TARGET: "dl_data_api"
  DATA_API_TAG: '{{.DATA_API_TAG | default "data-api:test"}}'

  UI_TAG: '{{.UI_TAG | default "datalens-ui:test"}}'

tasks:
  _docker:
    internal: true
    requires:
      vars:
        - COMMAND
    cmds:
      - docker compose
        -f {{.DATALENS_UI_FOLDER}}/tests/docker-compose.e2e.yml
        -f docker-compose.e2e-dev-backend.yaml
        {{.COMMAND}}
    env:
      CONTROL_API_TAG: "{{.CONTROL_API_TAG}}"
      DATA_API_TAG: "{{.DATA_API_TAG}}"
      DATALENS_UI_TAG: "{{.UI_TAG}}"

  datalens-ui-repo-clone:
    desc: Clone datalens-ui (repository) to a specified location
    cmds:
      - if [ ! -d {{.DATALENS_UI_FOLDER}} ]; then git clone git@github.com:datalens-tech/datalens-ui.git {{.DATALENS_UI_FOLDER}}; fi

  datalens-ui-repo-update:
    dir: "{{.DATALENS_UI_FOLDER}}"
    desc: Checkout latest datalens-ui
    cmds:
      - git fetch --all
      - git checkout main
      - git pull

  datalens-ui-init:
    dir: "{{.DATALENS_UI_FOLDER}}"
    desc: Install dependencies
    cmds:
      - npm ci

  docker-build-backend:
    desc: Build backend containers
    dir: ../../docker_build
    cmds:
      - ./run-project-bake
        {{.CONTROL_API_TARGET}} 
        {{.DATA_API_TARGET}}
        --set "{{.CONTROL_API_TARGET}}.tags={{.CONTROL_API_TAG}}"
        --set "{{.DATA_API_TARGET}}.tags={{.DATA_API_TAG}}"

  docker-build-frontend:
    desc: Build frontend container
    dir: "{{.DATALENS_UI_FOLDER}}"
    cmds:
      - task: datalens-ui-repo-update
      - docker build 
        --tag {{.UI_TAG}} 
        --network=host 
        .

  docker-build:
    desc: Prepare fresh backend and frontend dev containers
    cmds:
      - task: docker-build-backend
      - task: docker-build-frontend

  docker-start:
    desc: |
      Start services, options: 
      - DETACH to run in foreground mode, e.g. `task docker-start DETACH=false`, default is true
    cmds:
      - task: _docker
        vars: { COMMAND: 'up {{if eq .DETACH "true"}} --detach {{end}}  {{.CLI_ARGS}}' }
    vars:
      DETACH: '{{.DETACH | default "true"}}'

  docker-stop:
    desc: Stop services
    cmds:
      - task: _docker
        vars: { COMMAND: "down {{.CLI_ARGS}}" }

  docker-logs:
    desc: Show logs from all services
    cmds:
      - task: _docker
        vars: { COMMAND: "logs --follow" }

  docker-logs-data-api:
    desc: Show logs from data-api service
    cmds:
      - task: _docker
        vars: { COMMAND: "logs --follow data-api" }

  docker-logs-control-api:
    desc: Show logs from control-api service
    cmds:
      - task: _docker
        vars: { COMMAND: "logs --follow control-api" }

  test:
    dir: "{{.DATALENS_UI_FOLDER}}"
    desc: |
      Run tests, options:
      - E2E_TEST_NAME_PATTERN to run specific tests, e.g. `task test PATTERN="Add dataset"`, default is all tests
      - E2E_HEADFUL to run tests in headful mode (inside real browser), e.g. `task test HEADFUL=1`, default is headless
      - E2E_RETRY_TIMES to configure the number on retries for each test, e.g. `task test RETRY_TIMES=2`, default is 0
    env:
      E2E_DOMAIN: "http://localhost:8080"
      NO_AUTH: "true"
      E2E_TEST_NAME_PATTERN: '{{.PATTERN | default ""}}'
      E2E_HEADFUL: '{{.HEADFUL | default ""}}'
      E2E_RETRY_TIMES: '{{.RETRY_TIMES | default ""}}'
    cmds:
      - npm run test:install:chromium
      - npm run test:e2e:opensource

  test-headful:
    dir: "{{.DATALENS_UI_FOLDER}}"
    desc: test command shortcut with headful mode on
    cmds:
      - task: test
        vars: { HEADFUL: "1" }

  init-and-run:
    desc: Bootstrap command; install everything and run all tests; requires node installed
    vars:
      SHOW_LOGS_WHEN_DONE: '{{.SHOW_LOGS_WHEN_DONE | default "0"}}'
    cmds:
      - task: datalens-ui-repo-clone
      - task: datalens-ui-repo-update
      - task: datalens-ui-init
      - task: docker-build
      - defer: { task: docker-stop }
      - defer: |
          if [[ "{{.SHOW_LOGS_WHEN_DONE}}" == "1" ]]; then
            docker ps -a
            for i in $(docker ps -aq); do
              echo $'\n\n'"Showing logs for container $i"
              docker logs $i
            done
          fi
      - task: docker-start
      - task: test
        vars:
          RETRY_TIMES: 1
