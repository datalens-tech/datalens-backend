[tool.poetry]
authors = ["DataLens Team <datalens-opensource@yandex-team.ru>"]
description = "Aux pyproject.toml for the common project properties"
license = "Apache 2.0"
name = "datalens_backend_root_package"
readme = "README.md"
version = "0.1.0"

[tool.poetry.dependencies]
python = ">=3.10"

[tool.black]
force-exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  lib/redis-cache-lock/
  | lib/clickhouse-sqlalchemy/
  | lib/dl_formula/dl_formula/parser/antlr/gen/
  | lib/dl_task_processor/dl_task_processor/upstream_worker.py
)
'''
line-length = 120
target-version = ['py310']

[tool.isort]
force_grid_wrap = 2
force_sort_within_sections = true
include_trailing_comma = true
known_connectors = [
  "bi_connector_*",
  "dl_connector_*",
]
known_first_party = [
  "bi_*",
  "dc_*",
  "dl_*",
]
line_length = 120
lines_after_imports = 2
multi_line_output = 3
profile = "black"
sections = [
  "FUTURE",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "CONNECTORS",
  "LOCALFOLDER",
]
skip_glob = [
  "lib/clickhouse-sqlalchemy/*",
  "lib/dl_formula/dl_formula/parser/antlr/gen/*",
  "lib/dl_task_processor/dl_task_processor/upstream_worker.py",
  "lib/redis-cache-lock/*",
]

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "lib/clickhouse-sqlalchemy/**",
  "lib/dl_formula/dl_formula/parser/antlr/gen/**",
  "lib/redis-cache-lock/**",
  "node_modules",
  "tools_venv",
  "venv",
]
force-exclude = true
line-length = 120
target-version = "py310"

[tool.ruff.lint]
ignore = [
  "B024", # is an abstract base class, but it has no abstract methods
  "B904", # force `raise ... from err` or `raise ... from None`
  "B905", # `zip()` without an explicit `strict=` parameter
  "E501", # line length, should be checked and fixed by black
  "UP004", # [*] Class ... inherits from `object`
  "UP007", # Use `X | Y` for type annotations
  "UP008", # Use `super()` instead of `super(__class__, self)`
  "UP009", # [*] UTF-8 encoding declaration is unnecessary
  "UP010", # [*] Unnecessary `__future__` import ...
  "UP012", # [*] Unnecessary UTF-8 `encoding` argument to `encode`
  "UP014", # Convert `RequestData` from `NamedTuple` functional to class syntax
  "UP015", # [*] Unnecessary open mode parameters
  "UP018", # [*] Unnecessary `int` call (rewrite as a literal)
  "UP024", # [*] Replace aliased errors with `OSError`
  "UP026", # [*] `mock` is deprecated, use `unittest.mock`
  "UP027", # [*] Replace unpacked list comprehension with a generator expression
  "UP028", # Replace `yield` over `for` loop with `yield from`
  "UP030", # Use implicit references for positional format fields
  "UP031", # Use format specifiers instead of percent format
  "UP032", # [*] Use f-string instead of `format` call
  "UP034", # [*] Avoid extraneous parentheses
  "UP035", # Import from `collections.abc`
  "UP037", # [*] Remove quotes from type annotation
  "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
]
select = [
  # Bugbear
  "B",
  # Pyflakes
  "F",
  # pyupgrade
  "UP",
]

[tool.tomlsort]
all = true
ignore_case = true
in_place = true
sort_first = [
  "tool.poetry",
  "tool.poetry.dependencies",
  "tool",
]
trailing_comma_inline_array = true
overrides."tool.isort.sections".inline_arrays = false
overrides."tool.tomlsort.sort_first".inline_arrays = false

[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core",
]
