version: '3.7'

x-constants:
  US_MASTER_TOKEN: &c-us-master-token "AC1ofiek8coB"
  FERNET_KEY: &c-fernet-key "jl9vte_6ZkzGbMkV35hhROp3MP1TBfjVSddOub84LHc="
  PG_PASSWORD: &c-pg-password "qwerty"
  S3_ACCESS_KEY_ID: &c-s3-access-key-id "accessKey1"
  S3_SECRET_ACCESS_KEY: &c-s3-secret-access-key "verySecretKey1"
  REDIS_PASSWORD: &c-redis-password "AwockEuvavDyinmeakmiRiopanbesBepsensUrdIz5"
  EXT_QUERY_EXECUTER_SECRET_KEY: &c-qe-secret-key '_some_test_secret_key_'


services:
  redis:
    # image: "bitnami/redis:5.0.8"
    # also used for mutation cache
    image: "registry.yandex.net/statinfra/redis@sha256:3127620da977815556439a9dc347fff89432a79b6bb6e93a16f20ac4a34ce337"
    environment:
      REDIS_PASSWORD: *c-redis-password
      # REDIS_REPLICATION_MODE: master  # ??
    ports:
      - 50504:6379

  zookeeper-1:
    # image: "zookeeper:3.4"
    image: "registry.yandex.net/statinfra/zookeeper@sha256:ad460bd234a3166cb37e14a1526d677052f7c42e1d1dccd040ca3e24ed1bec1f"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888

  db-clickhouse:
    depends_on:
      - zookeeper-1
    build:
      context: docker-compose
      dockerfile: Dockerfile.db-clickhouse
    ports:
      - 50510:8123
      - 50511:9000

  db-mysql:
    build:
      context: docker-compose
      dockerfile: Dockerfile.db-mysql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
      - MYSQL_DATABASE=partner
      - MYSQL_USER=datalens
      - MYSQL_PASSWORD=qwerty
    ports:
    - 50512:3306

  db-postgres:
    build:
      context: docker-compose
      dockerfile: Dockerfile.db-postgres
    environment:
      POSTGRES_DB: datalens
      POSTGRES_USER: datalens
      POSTGRES_PASSWORD: *c-pg-password
    ports:
    - 50513:5432

  db-postgres-fresh:
    # Also serves as bimat-pg-mat-status
    build:
      context: docker-compose
      dockerfile: Dockerfile.bimat-pg-mat-status
    environment:
      POSTGRES_DB: datalens
      POSTGRES_USER: datalens
      POSTGRES_PASSWORD: *c-pg-password
    ports:
      - 50503:5432

  db-mssql:
    labels:
      datalens.ci.service: db-mssql
    # image: "microsoft/mssql-server-linux:2017-CU12"
    image: "registry.yandex.net/statinfra/mssql-server-linux@sha256:6522290393006d93b88f63a295c5137010e4e0fea548d3fce9892c07262f7a1a"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=qweRTY123
    ports:
    - 50514:1433

  db-oracle:
    ports:
      - 50515:1521
    # image: "ghcr.io/gvenzl/oracle-xe:21.3.0-slim-faststart"
    image: "ghcr.io/gvenzl/oracle-xe:18-slim-faststart"
    environment:
      ORACLE_RANDOM_PASSWORD: "yes"
      APP_USER: "datalens"
      APP_USER_PASSWORD: "qwerty"

  db-prometheus:
    depends_on:
      - prometheus-node-exporter
    build:
      context: docker-compose
      dockerfile: Dockerfile.prometheus
    ports:
      - 50518:9090

  prometheus-node-exporter:
    build:
      context: docker-compose
      dockerfile: Dockerfile.node-exporter
    command:
      - '--collector.textfile.directory=/data'

  db-ydb:
    # image: "registry.yandex.net/yandex-docker-local-ydb:latest"
    image: "registry.yandex.net/yandex-docker-local-ydb@sha256:882755b316b72490702e372e82c84df770b046fd3ecdd77163fc088a82c043a1"
    environment:
      YDB_LOCAL_SURVIVE_RESTART: "true"
      GRPC_PORT: "50481"

    hostname: "${GITHUB_CI_DB_YDB_HOSTNAME:-localhost}"
    ports:
      - "50481:50481"

  init-db:
    depends_on:
      - db-oracle
      - db-mssql
      - db-ydb
    build:
      context: github/docker-compose
      dockerfile: Dockerfile.init-db
    ports:
      - 50508:8000

  s3-storage:
    build:
      context: ../../lib/testenv-common/images
      dockerfile: Dockerfile.s3-storage
    command: bash /data/entrypoint.sh
    environment:
      S3BACKEND: "mem"
      REMOTE_MANAGEMENT_DISABLE: 1
    ports:
      - 50520:8000

  pg-us:
    build:
      context: ../../lib/testenv-common/images
      dockerfile: Dockerfile.pg-us
    environment:
      POSTGRES_DB: us-db-ci_purgeable
      POSTGRES_USER: us
      POSTGRES_PASSWORD: us
    ports:
      - 50509:5432

  # TODO: Multitenancy & DLS integration
  us:
    build:
      context: ../../lib/testenv-common/images
      dockerfile: Dockerfile.us-single-tenant
    ports:
      - 50500:80
    depends_on:
      - pg-us
    #      - dls
    environment:
      POSTGRES_DSN_LIST: "postgres://us:us@pg-us:5432/us-db-ci_purgeable"
      AUTH_POLICY: "required"
      DLS_ENABLED: "false"
      DISABLE_DLS: "true"
      #      DLS_ENDPOINT: "http://dls"
      #      DLS_API_KEY: *c-dls-api-key
      MASTER_TOKEN: *c-us-master-token
