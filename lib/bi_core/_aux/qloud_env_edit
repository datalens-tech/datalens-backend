#!/usr/bin/env python3
"""
Scripted editing of a qloud environment.

Uses `releaser`'s tooling.

Currently does logging-related modifications.
"""

import copy

import click

import releaser.cli.utils as releaser_utils
from releaser.lib import qloud
from releaser.cli import options as releaser_options


# dummy resource, to enable the client and provide the checks in the docker image
RESOURCE_ID = 746395381
COMMENT = 'logging-related edits'


@click.command()
@releaser_options.qloud_instance_option
@releaser_options.project_option
@releaser_options.application_option
@releaser_options.environment_option
@releaser_options.components_option
@click.option(
    '--apply', 'do_apply', default=False,
)
def main(
        qloudinst, project, application, environment, components, do_apply,
        resource_id=RESOURCE_ID, comment=COMMENT):

    print(locals())
    token = releaser_utils.get_oauth_token_or_panic()
    cli = qloud.QloudClient(qloudinst, token)
    env_loc = qloud.QloudObject(
        project=project,
        application=application,
        environment=environment,
        component=None,
    )
    env_cfg = cli.get_environment_dump(env_loc)
    env_cfg_orig = copy.deepcopy(env_cfg)

    for c_cfg in env_cfg['components']:
        if c_cfg['componentName'] not in components:
            continue
        if int(c_cfg['properties']['diskSize']) < 50:
            c_cfg['properties']['diskSize'] = '50'
        resources = [
            item
            for item in c_cfg['jugglerBundleResources']
            if item['id'] != resource_id
        ] + [
            dict(
                id=resource_id,
                localName='juggler-bundle-{}'.format(resource_id),
                symlink='/juggler/build-{}'.format(resource_id),
                dynamic=False, extract=True),
        ]
        c_cfg['jugglerBundleResources'] = resources

    try:
        from pyaux.madness import p_datadiff
        p_datadiff(env_cfg_orig, env_cfg)
    except Exception:
        pass

    if env_cfg_orig == env_cfg:
        print("No changes.")
        return

    if do_apply:
        cli.upload_environment(env_cfg, comment=comment)


if __name__ == '__main__':
    main()
