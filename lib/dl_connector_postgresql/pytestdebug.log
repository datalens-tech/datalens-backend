versions pytest-7.2.2, python-3.10.14.final.0
cwd=/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql
args=('./dl_connector_postgresql_tests/db/core', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x101aae9e0>
    pytest_plugin_registered [hook]
        plugin: <Session dl_connector_postgresql exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x101aae9e0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x11f96cdc0>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x11f96c700>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: dl_connector_mssql [assertion]
    early skip of rewriting module: dl_connector_mssql.formula [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.connector [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mssql [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mssql.base [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mssql.information_schema [assertion]
    early skip of rewriting module: sqlalchemy.ext.compiler [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mssql.json [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mssql.mxodbc [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mssql.pyodbc [assertion]
    early skip of rewriting module: sqlalchemy.connectors [assertion]
    early skip of rewriting module: sqlalchemy.connectors.pyodbc [assertion]
    early skip of rewriting module: sqlalchemy.connectors.mxodbc [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mssql.pymssql [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.constants [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.context_processor [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.literal [assertion]
    early skip of rewriting module: dl_connector_mssql.formula.type_constructor [assertion]
    early skip of rewriting module: dl_connector_metrica [assertion]
    early skip of rewriting module: dl_connector_metrica.formula [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.connector [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.base [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.appmetrica_dbapi [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.metrika_dbapi [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_client [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.exceptions [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.metrika [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.metrika.advertising [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.metrika.hits [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.metrika.user_param [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.metrika.visits [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.appmetrica [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.appmetrica.audience [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.appmetrica.audience_socdem [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.appmetrica.client_events [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.appmetrica.crash_events [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.appmetrica.installs [assertion]
    early skip of rewriting module: dl_sqlalchemy_metrica_api.api_info.appmetrica.push_events [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.constants [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_metrica.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.connector [assertion]
    early skip of rewriting module: dl_sqlalchemy_bitrix [assertion]
    early skip of rewriting module: dl_sqlalchemy_bitrix.base [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.constants [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_bitrix_gds.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_trino [assertion]
    early skip of rewriting module: dl_connector_trino.formula [assertion]
    early skip of rewriting module: dl_connector_trino.formula.connector [assertion]
    early skip of rewriting module: trino [assertion]
    early skip of rewriting module: trino.auth [assertion]
    early skip of rewriting module: webbrowser [assertion]
    early skip of rewriting module: trino.logging [assertion]
    early skip of rewriting module: trino.client [assertion]
    early skip of rewriting module: tzlocal [assertion]
    early skip of rewriting module: tzlocal.unix [assertion]
    early skip of rewriting module: tzlocal.utils [assertion]
    early skip of rewriting module: tzlocal.windows_tz [assertion]
    early skip of rewriting module: trino.constants [assertion]
    early skip of rewriting module: trino.exceptions [assertion]
    early skip of rewriting module: trino._version [assertion]
    early skip of rewriting module: trino.mapper [assertion]
    early skip of rewriting module: trino.types [assertion]
    early skip of rewriting module: trino.dbapi [assertion]
    early skip of rewriting module: trino.transaction [assertion]
    early skip of rewriting module: trino.sqlalchemy [assertion]
    early skip of rewriting module: trino.sqlalchemy.util [assertion]
    early skip of rewriting module: trino.sqlalchemy.dialect [assertion]
    early skip of rewriting module: trino.sqlalchemy.compiler [assertion]
    early skip of rewriting module: trino.sqlalchemy.datatype [assertion]
    early skip of rewriting module: trino.sqlalchemy.error [assertion]
    early skip of rewriting module: dl_connector_trino.formula.constants [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_array [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.custom_constructors [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_special [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.functions_window [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_trino.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_trino.formula.literal [assertion]
    early skip of rewriting module: dl_connector_trino.formula.type_constructor [assertion]
    early skip of rewriting module: dl_connector_snowflake [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.connector [assertion]
    early skip of rewriting module: snowflake [assertion]
    early skip of rewriting module: snowflake.sqlalchemy [assertion]
    early skip of rewriting module: snowflake.sqlalchemy.base [assertion]
    early skip of rewriting module: snowflake.sqlalchemy.custom_commands [assertion]
    early skip of rewriting module: snowflake.sqlalchemy.util [assertion]
    early skip of rewriting module: snowflake.connector [assertion]
    early skip of rewriting module: snowflake.connector.connection [assertion]
    early skip of rewriting module: cryptography.hazmat.backends [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.serialization [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives._serialization [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.serialization.base [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.serialization.ssh [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dsa [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.utils [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ec [assertion]
    early skip of rewriting module: cryptography.hazmat._oid [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed25519 [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.padding [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives._asymmetric [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.rsa [assertion]
    early skip of rewriting module: bcrypt [assertion]
    early skip of rewriting module: bcrypt._bcrypt [assertion]
    early skip of rewriting module: snowflake.connector.errors [assertion]
    early skip of rewriting module: snowflake.connector.secret_detector [assertion]
    early skip of rewriting module: snowflake.connector.telemetry [assertion]
    early skip of rewriting module: snowflake.connector.description [assertion]
    early skip of rewriting module: snowflake.connector.version [assertion]
    early skip of rewriting module: plistlib [assertion]
    early skip of rewriting module: xml.parsers [assertion]
    early skip of rewriting module: xml.parsers.expat [assertion]
    find_module called for: snowflake.connector.test_util [assertion]
    matched test file '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/snowflake/connector/test_util.py' [assertion]
    found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/snowflake/connector/test_util.py [assertion]
    early skip of rewriting module: snowflake.connector.compat [assertion]
    early skip of rewriting module: snowflake.connector.constants [assertion]
    early skip of rewriting module: snowflake.connector.options [assertion]
    early skip of rewriting module: packaging.requirements [assertion]
    early skip of rewriting module: packaging._parser [assertion]
    early skip of rewriting module: packaging._tokenizer [assertion]
    early skip of rewriting module: packaging.specifiers [assertion]
    early skip of rewriting module: packaging.utils [assertion]
    early skip of rewriting module: packaging.tags [assertion]
    early skip of rewriting module: packaging._manylinux [assertion]
    early skip of rewriting module: packaging._elffile [assertion]
    early skip of rewriting module: packaging._musllinux [assertion]
    early skip of rewriting module: packaging.markers [assertion]
    early skip of rewriting module: keyring [assertion]
    early skip of rewriting module: keyring.core [assertion]
    early skip of rewriting module: keyring.backend [assertion]
    early skip of rewriting module: keyring.py312compat [assertion]
    early skip of rewriting module: importlib_metadata [assertion]
    early skip of rewriting module: zipp [assertion]
    early skip of rewriting module: zipp.compat [assertion]
    early skip of rewriting module: zipp.compat.py310 [assertion]
    early skip of rewriting module: zipp.glob [assertion]
    early skip of rewriting module: zipp._functools [assertion]
    early skip of rewriting module: importlib_metadata._adapters [assertion]
    early skip of rewriting module: importlib_metadata._text [assertion]
    early skip of rewriting module: importlib_metadata._functools [assertion]
    early skip of rewriting module: importlib_metadata._compat [assertion]
    early skip of rewriting module: importlib_metadata._meta [assertion]
    early skip of rewriting module: importlib_metadata._py39compat [assertion]
    early skip of rewriting module: importlib_metadata._collections [assertion]
    early skip of rewriting module: importlib_metadata._itertools [assertion]
    early skip of rewriting module: keyring.credentials [assertion]
    early skip of rewriting module: keyring.errors [assertion]
    early skip of rewriting module: keyring.util [assertion]
    early skip of rewriting module: keyring._compat [assertion]
    early skip of rewriting module: jaraco [assertion]
    early skip of rewriting module: jaraco.classes [assertion]
    early skip of rewriting module: jaraco.classes.properties [assertion]
    early skip of rewriting module: keyring.util.platform_ [assertion]
    early skip of rewriting module: keyring.backends [assertion]
    early skip of rewriting module: keyring.backends.fail [assertion]
    early skip of rewriting module: snowflake.connector.sf_dirs [assertion]
    early skip of rewriting module: platformdirs [assertion]
    early skip of rewriting module: platformdirs.api [assertion]
    early skip of rewriting module: platformdirs.version [assertion]
    early skip of rewriting module: platformdirs.macos [assertion]
    early skip of rewriting module: snowflake.connector.time_util [assertion]
    early skip of rewriting module: snowflake.connector.proxy [assertion]
    early skip of rewriting module: snowflake.connector._query_context_cache [assertion]
    early skip of rewriting module: sortedcontainers [assertion]
    early skip of rewriting module: sortedcontainers.sortedlist [assertion]
    early skip of rewriting module: sortedcontainers.sortedset [assertion]
    early skip of rewriting module: sortedcontainers.sorteddict [assertion]
    early skip of rewriting module: snowflake.connector.auth [assertion]
    early skip of rewriting module: snowflake.connector.auth._auth [assertion]
    early skip of rewriting module: snowflake.connector.errorcode [assertion]
    early skip of rewriting module: snowflake.connector.file_util [assertion]
    early skip of rewriting module: snowflake.connector.network [assertion]
    early skip of rewriting module: OpenSSL [assertion]
    early skip of rewriting module: OpenSSL.SSL [assertion]
    early skip of rewriting module: OpenSSL._util [assertion]
    early skip of rewriting module: cryptography.hazmat.bindings.openssl [assertion]
    early skip of rewriting module: cryptography.hazmat.bindings.openssl.binding [assertion]
    early skip of rewriting module: cryptography.hazmat.bindings.openssl._conditional [assertion]
    early skip of rewriting module: OpenSSL.crypto [assertion]
    early skip of rewriting module: cryptography.x509 [assertion]
    early skip of rewriting module: cryptography.x509.certificate_transparency [assertion]
    early skip of rewriting module: cryptography.x509.verification [assertion]
    early skip of rewriting module: cryptography.x509.general_name [assertion]
    early skip of rewriting module: cryptography.x509.name [assertion]
    early skip of rewriting module: cryptography.x509.oid [assertion]
    early skip of rewriting module: cryptography.x509.base [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed448 [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.x448 [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.x25519 [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.types [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dh [assertion]
    early skip of rewriting module: cryptography.x509.extensions [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.constant_time [assertion]
    early skip of rewriting module: OpenSSL.version [assertion]
    early skip of rewriting module: snowflake.connector.vendored [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3 [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.exceptions [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.packages [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.packages.six [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.packages.six.moves [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.packages.six.moves.http_client [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3._version [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.connectionpool [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3._collections [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.connection [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.connection [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.contrib [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.contrib._appengine_environ [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.wait [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.request [assertion]
    early skip of rewriting module: brotlicffi [assertion]
    early skip of rewriting module: brotli [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.response [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.retry [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.ssl_ [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.url [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.ssltransport [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.timeout [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.proxy [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.ssl_match_hostname [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.request [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.filepost [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.fields [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.packages.six.moves.urllib [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.packages.six.moves.urllib.parse [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.response [assertion]
    early skip of rewriting module: brotlicffi [assertion]
    early skip of rewriting module: brotli [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.util.queue [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.poolmanager [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.exceptions [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.compat [assertion]
    early skip of rewriting module: chardet [assertion]
    early skip of rewriting module: simplejson [assertion]
    early skip of rewriting module: chardet [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.contrib.pyopenssl [assertion]
    early skip of rewriting module: cryptography.hazmat.backends.openssl [assertion]
    early skip of rewriting module: cryptography.hazmat.backends.openssl.backend [assertion]
    early skip of rewriting module: cryptography.x509.UnsupportedExtension [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.packages.backports [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.packages.backports.makefile [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.utils [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.certs [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.__version__ [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests._internal_utils [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.cookies [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.structures [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.api [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.sessions [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.adapters [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.auth [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.models [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.hooks [assertion]
    early skip of rewriting module: snowflake.connector.vendored.requests.status_codes [assertion]
    early skip of rewriting module: snowflake.connector.vendored.urllib3.contrib.socks [assertion]
    early skip of rewriting module: socks [assertion]
    early skip of rewriting module: snowflake.connector.ssl_wrap_socket [assertion]
    early skip of rewriting module: snowflake.connector.sqlstate [assertion]
    early skip of rewriting module: snowflake.connector.tool [assertion]
    early skip of rewriting module: snowflake.connector.tool.probe_connection [assertion]
    early skip of rewriting module: asn1crypto [assertion]
    early skip of rewriting module: asn1crypto.version [assertion]
    early skip of rewriting module: asn1crypto.ocsp [assertion]
    early skip of rewriting module: asn1crypto._errors [assertion]
    early skip of rewriting module: asn1crypto.algos [assertion]
    early skip of rewriting module: asn1crypto._int [assertion]
    early skip of rewriting module: asn1crypto.util [assertion]
    early skip of rewriting module: asn1crypto._iri [assertion]
    early skip of rewriting module: asn1crypto._types [assertion]
    early skip of rewriting module: asn1crypto._ordereddict [assertion]
    early skip of rewriting module: asn1crypto.core [assertion]
    early skip of rewriting module: asn1crypto._teletex_codec [assertion]
    early skip of rewriting module: asn1crypto.parser [assertion]
    early skip of rewriting module: asn1crypto.crl [assertion]
    early skip of rewriting module: asn1crypto.x509 [assertion]
    early skip of rewriting module: asn1crypto.keys [assertion]
    early skip of rewriting module: snowflake.connector.auth.by_plugin [assertion]
    early skip of rewriting module: snowflake.connector.auth.default [assertion]
    early skip of rewriting module: snowflake.connector.auth.idtoken [assertion]
    early skip of rewriting module: snowflake.connector.auth.webbrowser [assertion]
    early skip of rewriting module: snowflake.connector.url_util [assertion]
    early skip of rewriting module: snowflake.connector.auth.keypair [assertion]
    early skip of rewriting module: jwt [assertion]
    early skip of rewriting module: jwt.api_jwk [assertion]
    early skip of rewriting module: jwt.algorithms [assertion]
    early skip of rewriting module: jwt.exceptions [assertion]
    early skip of rewriting module: jwt.utils [assertion]
    early skip of rewriting module: jwt.api_jws [assertion]
    early skip of rewriting module: jwt.api_jwt [assertion]
    early skip of rewriting module: jwt.jwks_client [assertion]
    early skip of rewriting module: snowflake.connector.auth.oauth [assertion]
    early skip of rewriting module: snowflake.connector.auth.okta [assertion]
    early skip of rewriting module: snowflake.connector.auth.pat [assertion]
    early skip of rewriting module: snowflake.connector.auth.usrpwdmfa [assertion]
    early skip of rewriting module: snowflake.connector.backoff_policies [assertion]
    early skip of rewriting module: snowflake.connector.bind_upload_agent [assertion]
    early skip of rewriting module: snowflake.connector._utils [assertion]
    early skip of rewriting module: snowflake.connector.config_manager [assertion]
    early skip of rewriting module: tomlkit [assertion]
    early skip of rewriting module: tomlkit.api [assertion]
    early skip of rewriting module: tomlkit._utils [assertion]
    early skip of rewriting module: tomlkit._compat [assertion]
    early skip of rewriting module: tomlkit.container [assertion]
    early skip of rewriting module: tomlkit._types [assertion]
    early skip of rewriting module: tomlkit.exceptions [assertion]
    early skip of rewriting module: tomlkit.items [assertion]
    early skip of rewriting module: tomlkit.parser [assertion]
    early skip of rewriting module: tomlkit.source [assertion]
    early skip of rewriting module: tomlkit.toml_char [assertion]
    early skip of rewriting module: tomlkit.toml_document [assertion]
    early skip of rewriting module: snowflake.connector.connection_diagnostic [assertion]
    early skip of rewriting module: snowflake.connector.cursor [assertion]
    early skip of rewriting module: snowflake.connector.result_batch [assertion]
    early skip of rewriting module: snowflake.connector.arrow_context [assertion]
    early skip of rewriting module: snowflake.connector.converter [assertion]
    early skip of rewriting module: snowflake.connector.sfbinaryformat [assertion]
    early skip of rewriting module: snowflake.connector.sfdatetime [assertion]
    early skip of rewriting module: snowflake.connector.result_set [assertion]
    early skip of rewriting module: snowflake.connector._sql_util [assertion]
    early skip of rewriting module: snowflake.connector.nanoarrow_arrow_iterator [assertion]
    early skip of rewriting module: snowflake.connector.snow_logging [assertion]
    early skip of rewriting module: snowflake.connector.log_configuration [assertion]
    early skip of rewriting module: snowflake.connector.util_text [assertion]
    early skip of rewriting module: snowflake.connector.dbapi [assertion]
    early skip of rewriting module: snowflake.sqlalchemy._constants [assertion]
    early skip of rewriting module: snowflake.sqlalchemy.version [assertion]
    early skip of rewriting module: snowflake.sqlalchemy.snowdialect [assertion]
    early skip of rewriting module: snowflake.sqlalchemy.custom_types [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.constants [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_snowflake.formula.literal [assertion]
    early skip of rewriting module: dl_connector_ydb [assertion]
    early skip of rewriting module: ydb_proto_stubs_import [assertion]
    early skip of rewriting module: dl_connector_ydb.formula [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.connector [assertion]
    early skip of rewriting module: ydb [assertion]
    early skip of rewriting module: ydb.credentials [assertion]
    early skip of rewriting module: ydb.tracing [assertion]
    early skip of rewriting module: ydb.issues [assertion]
    early skip of rewriting module: google.protobuf [assertion]
    early skip of rewriting module: google.protobuf.text_format [assertion]
    early skip of rewriting module: encodings.raw_unicode_escape [assertion]
    early skip of rewriting module: encodings.unicode_escape [assertion]
    early skip of rewriting module: google.protobuf.internal [assertion]
    early skip of rewriting module: google.protobuf.internal.decoder [assertion]
    early skip of rewriting module: google.protobuf.internal.containers [assertion]
    early skip of rewriting module: google.protobuf.internal.encoder [assertion]
    early skip of rewriting module: google.protobuf.internal.wire_format [assertion]
    early skip of rewriting module: google.protobuf.descriptor [assertion]
    early skip of rewriting module: google.protobuf.internal.api_implementation [assertion]
    early skip of rewriting module: google.protobuf.internal._api_implementation [assertion]
    early skip of rewriting module: google._upb [assertion]
    early skip of rewriting module: google._upb._message [assertion]
    early skip of rewriting module: google.protobuf.message [assertion]
    early skip of rewriting module: google.protobuf.internal.enum_type_wrapper [assertion]
    early skip of rewriting module: google.protobuf.enable_deterministic_proto_serialization [assertion]
    early skip of rewriting module: google.protobuf.internal.type_checkers [assertion]
    early skip of rewriting module: google.protobuf.text_encoding [assertion]
    early skip of rewriting module: google.protobuf.unknown_fields [assertion]
    early skip of rewriting module: ydb._apis [assertion]
    early skip of rewriting module: ydb._grpc [assertion]
    early skip of rewriting module: ydb._grpc.common [assertion]
    early skip of rewriting module: ydb._utilities [assertion]
    early skip of rewriting module: ydb.ydb_version [assertion]
    early skip of rewriting module: ydb.interceptor [assertion]
    early skip of rewriting module: grpc [assertion]
    early skip of rewriting module: grpc._compression [assertion]
    early skip of rewriting module: grpc._cython [assertion]
    early skip of rewriting module: grpc._cython.cygrpc [assertion]
    early skip of rewriting module: backports_abc [assertion]
    early skip of rewriting module: grpc._cython.logging [assertion]
    early skip of rewriting module: grpc._cython.os [assertion]
    early skip of rewriting module: grpc._cython.sys [assertion]
    early skip of rewriting module: grpc._cython.threading [assertion]
    early skip of rewriting module: grpc._cython.time [assertion]
    early skip of rewriting module: grpc._cython.grpc [assertion]
    early skip of rewriting module: grpc._cython.asyncio [assertion]
    early skip of rewriting module: grpc._cython.grpc [assertion]
    early skip of rewriting module: grpc._observability [assertion]
    early skip of rewriting module: grpc._cython.collections [assertion]
    early skip of rewriting module: grpc._cython.pkgutil [assertion]
    early skip of rewriting module: grpc._cython.codecs [assertion]
    early skip of rewriting module: grpc._cython.typing [assertion]
    early skip of rewriting module: grpc._cython.grpc [assertion]
    early skip of rewriting module: grpc._cython.atexit [assertion]
    early skip of rewriting module: grpc._cython.errno [assertion]
    early skip of rewriting module: grpc._cython.sys [assertion]
    early skip of rewriting module: grpc._cython.contextvars [assertion]
    early skip of rewriting module: grpc._cython.contextvars [assertion]
    early skip of rewriting module: grpc._cython.os [assertion]
    early skip of rewriting module: grpc._cython.socket [assertion]
    early skip of rewriting module: grpc._cython.enum [assertion]
    early skip of rewriting module: grpc._cython.inspect [assertion]
    early skip of rewriting module: grpc._cython.traceback [assertion]
    early skip of rewriting module: grpc._cython.functools [assertion]
    early skip of rewriting module: grpc._typing [assertion]
    early skip of rewriting module: grpc._runtime_protos [assertion]
    early skip of rewriting module: grpc._grpcio_metadata [assertion]
    early skip of rewriting module: grpc_tools [assertion]
    early skip of rewriting module: grpc_health [assertion]
    early skip of rewriting module: grpc_reflection [assertion]
    early skip of rewriting module: grpc.aio [assertion]
    early skip of rewriting module: grpc.aio._base_call [assertion]
    early skip of rewriting module: grpc.aio._metadata [assertion]
    early skip of rewriting module: grpc.aio._typing [assertion]
    early skip of rewriting module: grpc.aio._base_channel [assertion]
    early skip of rewriting module: grpc.aio._base_server [assertion]
    early skip of rewriting module: grpc.aio._call [assertion]
    early skip of rewriting module: grpc._common [assertion]
    early skip of rewriting module: grpc.aio._channel [assertion]
    early skip of rewriting module: grpc.aio._interceptor [assertion]
    early skip of rewriting module: grpc.aio._utils [assertion]
    early skip of rewriting module: grpc.aio._server [assertion]
    early skip of rewriting module: grpc._channel [assertion]
    early skip of rewriting module: grpc.experimental [assertion]
    early skip of rewriting module: grpc._simple_stubs [assertion]
    early skip of rewriting module: ydb.public [assertion]
    early skip of rewriting module: ydb._grpc.v4 [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_cms_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_cms_pb2 [assertion]
    early skip of rewriting module: google.protobuf.internal.builder [assertion]
    early skip of rewriting module: google.protobuf.internal.python_message [assertion]
    early skip of rewriting module: google.protobuf.internal.extension_dict [assertion]
    early skip of rewriting module: google.protobuf.internal.message_listener [assertion]
    early skip of rewriting module: google.protobuf.internal.well_known_types [assertion]
    early skip of rewriting module: google.protobuf.internal.field_mask [assertion]
    early skip of rewriting module: google.protobuf.reflection [assertion]
    early skip of rewriting module: google.protobuf.message_factory [assertion]
    early skip of rewriting module: google.protobuf.descriptor_pool [assertion]
    early skip of rewriting module: google.protobuf.descriptor_database [assertion]
    early skip of rewriting module: google.protobuf.pyext [assertion]
    early skip of rewriting module: google.protobuf.pyext.cpp_message [assertion]
    early skip of rewriting module: google.protobuf.symbol_database [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_operation_pb2 [assertion]
    early skip of rewriting module: google.protobuf.any_pb2 [assertion]
    early skip of rewriting module: google.protobuf.duration_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.annotations [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.annotations.validation_pb2 [assertion]
    early skip of rewriting module: google.protobuf.descriptor_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_common_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_issue_message_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_status_codes_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_discovery_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_discovery_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_scheme_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_scheme_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_table_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_table_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_query_stats_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_value_pb2 [assertion]
    early skip of rewriting module: google.protobuf.struct_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_formats_pb2 [assertion]
    early skip of rewriting module: google.protobuf.empty_pb2 [assertion]
    early skip of rewriting module: google.protobuf.timestamp_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_operation_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_topic_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_topic_pb2 [assertion]
    early skip of rewriting module: ydb.connection [assertion]
    early skip of rewriting module: ydb.default_pem [assertion]
    early skip of rewriting module: ydb.settings [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_auth_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_auth_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb.driver [assertion]
    early skip of rewriting module: ydb.table [assertion]
    early skip of rewriting module: ydb.convert [assertion]
    early skip of rewriting module: ydb.types [assertion]
    early skip of rewriting module: ydb.scheme [assertion]
    early skip of rewriting module: ydb.operation [assertion]
    early skip of rewriting module: ydb._sp_impl [assertion]
    early skip of rewriting module: ydb._session_impl [assertion]
    early skip of rewriting module: ydb._tx_ctx_impl [assertion]
    early skip of rewriting module: ydb._errors [assertion]
    early skip of rewriting module: ydb.pool [assertion]
    early skip of rewriting module: ydb.resolver [assertion]
    early skip of rewriting module: ydb.iam [assertion]
    early skip of rewriting module: ydb.iam.auth [assertion]
    early skip of rewriting module: yandex [assertion]
    early skip of rewriting module: ydb.global_settings [assertion]
    early skip of rewriting module: ydb.export [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_export_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_export_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb.auth_helpers [assertion]
    early skip of rewriting module: ydb.scripting [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_scripting_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_scripting_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb.import_client [assertion]
    early skip of rewriting module: ydb._grpc.v4.protos.ydb_import_pb2 [assertion]
    early skip of rewriting module: ydb._grpc.v4.ydb_import_v1_pb2_grpc [assertion]
    early skip of rewriting module: ydb.topic [assertion]
    early skip of rewriting module: ydb.aio [assertion]
    early skip of rewriting module: ydb.aio.driver [assertion]
    early skip of rewriting module: ydb.aio.pool [assertion]
    early skip of rewriting module: ydb.aio.connection [assertion]
    early skip of rewriting module: ydb.aio.resolver [assertion]
    early skip of rewriting module: ydb.aio.scheme [assertion]
    early skip of rewriting module: ydb.aio.table [assertion]
    early skip of rewriting module: ydb.aio._utilities [assertion]
    early skip of rewriting module: ydb._topic_reader [assertion]
    early skip of rewriting module: ydb._topic_reader.datatypes [assertion]
    early skip of rewriting module: ydb._grpc.grpcwrapper [assertion]
    early skip of rewriting module: ydb._grpc.grpcwrapper.ydb_topic [assertion]
    early skip of rewriting module: ydb._grpc.grpcwrapper.ydb_topic_public_types [assertion]
    early skip of rewriting module: ydb._grpc.grpcwrapper.common_utils [assertion]
    early skip of rewriting module: ydb._topic_reader.topic_reader_asyncio [assertion]
    early skip of rewriting module: ydb._topic_reader.topic_reader [assertion]
    early skip of rewriting module: ydb._topic_reader.topic_reader_sync [assertion]
    early skip of rewriting module: ydb._topic_common [assertion]
    early skip of rewriting module: ydb._topic_common.common [assertion]
    early skip of rewriting module: ydb._topic_writer [assertion]
    early skip of rewriting module: ydb._topic_writer.topic_writer [assertion]
    early skip of rewriting module: ydb._topic_writer.topic_writer_asyncio [assertion]
    early skip of rewriting module: ydb._topic_writer.topic_writer_sync [assertion]
    early skip of rewriting module: ydb.sqlalchemy [assertion]
    early skip of rewriting module: ydb.dbapi [assertion]
    early skip of rewriting module: ydb.dbapi.connection [assertion]
    early skip of rewriting module: ydb.dbapi.cursor [assertion]
    early skip of rewriting module: ydb.dbapi.errors [assertion]
    early skip of rewriting module: ydb.sqlalchemy.types [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.constants [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_ydb.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_bigquery [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.connector [assertion]
    early skip of rewriting module: sqlalchemy_bigquery [assertion]
    early skip of rewriting module: sqlalchemy_bigquery.version [assertion]
    early skip of rewriting module: sqlalchemy_bigquery.base [assertion]
    early skip of rewriting module: google.auth [assertion]
    early skip of rewriting module: google.auth.version [assertion]
    early skip of rewriting module: google.auth._default [assertion]
    early skip of rewriting module: google.auth.environment_vars [assertion]
    early skip of rewriting module: google.auth.exceptions [assertion]
    early skip of rewriting module: google.auth.transport [assertion]
    early skip of rewriting module: google.auth.transport._http_client [assertion]
    early skip of rewriting module: six.moves.urllib [assertion]
    early skip of rewriting module: google.api_core [assertion]
    early skip of rewriting module: google.api_core.version [assertion]
    early skip of rewriting module: google.api_core.exceptions [assertion]
    early skip of rewriting module: google.rpc [assertion]
    early skip of rewriting module: pkg_resources [assertion]
    early skip of rewriting module: google.rpc.error_details_pb2 [assertion]
    early skip of rewriting module: grpc_status [assertion]
    early skip of rewriting module: grpc_status.rpc_status [assertion]
    early skip of rewriting module: google.rpc.status_pb2 [assertion]
    early skip of rewriting module: grpc_status._common [assertion]
    early skip of rewriting module: grpc_status._async [assertion]
    early skip of rewriting module: grpc.experimental.aio [assertion]
    early skip of rewriting module: google.cloud [assertion]
    early skip of rewriting module: google.cloud.bigquery [assertion]
    early skip of rewriting module: google.cloud.bigquery.version [assertion]
    early skip of rewriting module: google.cloud.bigquery.client [assertion]
    early skip of rewriting module: google.resumable_media [assertion]
    early skip of rewriting module: google.resumable_media.common [assertion]
    early skip of rewriting module: google.resumable_media.requests [assertion]
    early skip of rewriting module: google.resumable_media.requests.download [assertion]
    early skip of rewriting module: google.resumable_media._download [assertion]
    early skip of rewriting module: google.resumable_media._helpers [assertion]
    early skip of rewriting module: google.resumable_media.requests._request_helpers [assertion]
    early skip of rewriting module: google.resumable_media.requests.upload [assertion]
    early skip of rewriting module: google.resumable_media._upload [assertion]
    early skip of rewriting module: google.api_core.client_options [assertion]
    early skip of rewriting module: google.api_core.iam [assertion]
    early skip of rewriting module: google.api_core.page_iterator [assertion]
    early skip of rewriting module: google.api_core.retry [assertion]
    early skip of rewriting module: google.api_core.datetime_helpers [assertion]
    early skip of rewriting module: google.cloud._helpers [assertion]
    early skip of rewriting module: google.auth.transport.requests [assertion]
    early skip of rewriting module: google.auth.transport._mtls_helper [assertion]
    early skip of rewriting module: google.oauth2 [assertion]
    early skip of rewriting module: google.oauth2.service_account [assertion]
    early skip of rewriting module: google.auth._helpers [assertion]
    early skip of rewriting module: google.auth._service_account_info [assertion]
    early skip of rewriting module: google.auth.crypt [assertion]
    early skip of rewriting module: google.auth.crypt.base [assertion]
    early skip of rewriting module: google.auth.crypt.rsa [assertion]
    early skip of rewriting module: google.auth.crypt._cryptography_rsa [assertion]
    early skip of rewriting module: google.auth.crypt.es256 [assertion]
    early skip of rewriting module: google.auth.credentials [assertion]
    early skip of rewriting module: google.auth.metrics [assertion]
    early skip of rewriting module: google.auth.jwt [assertion]
    early skip of rewriting module: cachetools [assertion]
    early skip of rewriting module: cachetools.keys [assertion]
    early skip of rewriting module: google.oauth2._client [assertion]
    early skip of rewriting module: google.auth._exponential_backoff [assertion]
    early skip of rewriting module: google.auth.transport.grpc [assertion]
    early skip of rewriting module: google.cloud.exceptions [assertion]
    early skip of rewriting module: google.cloud.client [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1 [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.gapic_version [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.client [assertion]
    early skip of rewriting module: google.api_core.gapic_v1 [assertion]
    early skip of rewriting module: google.api_core.gapic_v1.client_info [assertion]
    early skip of rewriting module: google.api_core.client_info [assertion]
    early skip of rewriting module: google.api_core.gapic_v1.config [assertion]
    early skip of rewriting module: google.api_core.timeout [assertion]
    early skip of rewriting module: google.api_core.gapic_v1.config_async [assertion]
    early skip of rewriting module: google.api_core.retry_async [assertion]
    early skip of rewriting module: google.api_core.gapic_v1.method [assertion]
    early skip of rewriting module: google.api_core.grpc_helpers [assertion]
    early skip of rewriting module: google.api_core.gapic_v1.method_async [assertion]
    early skip of rewriting module: google.api_core.grpc_helpers_async [assertion]
    early skip of rewriting module: google.api_core.gapic_v1.routing_header [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.reader [assertion]
    early skip of rewriting module: fastavro [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_read [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_read.client [assertion]
    early skip of rewriting module: google.auth.transport.mtls [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.types [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.types.arrow [assertion]
    early skip of rewriting module: proto [assertion]
    early skip of rewriting module: proto.enums [assertion]
    early skip of rewriting module: proto._file_info [assertion]
    early skip of rewriting module: proto.marshal [assertion]
    early skip of rewriting module: proto.marshal.marshal [assertion]
    early skip of rewriting module: google.protobuf.field_mask_pb2 [assertion]
    early skip of rewriting module: google.protobuf.wrappers_pb2 [assertion]
    early skip of rewriting module: proto.marshal.compat [assertion]
    early skip of rewriting module: proto.marshal.collections [assertion]
    early skip of rewriting module: proto.marshal.collections.maps [assertion]
    early skip of rewriting module: proto.utils [assertion]
    early skip of rewriting module: proto.marshal.collections.repeated [assertion]
    early skip of rewriting module: proto.marshal.rules [assertion]
    early skip of rewriting module: proto.marshal.rules.bytes [assertion]
    early skip of rewriting module: proto.marshal.rules.stringy_numbers [assertion]
    early skip of rewriting module: proto.primitives [assertion]
    early skip of rewriting module: proto.marshal.rules.dates [assertion]
    early skip of rewriting module: proto.datetime_helpers [assertion]
    early skip of rewriting module: proto.marshal.rules.struct [assertion]
    early skip of rewriting module: proto.marshal.rules.wrappers [assertion]
    early skip of rewriting module: proto.marshal.rules.field_mask [assertion]
    early skip of rewriting module: proto.marshal.rules.message [assertion]
    early skip of rewriting module: proto._package_info [assertion]
    early skip of rewriting module: proto.marshal.rules.enums [assertion]
    early skip of rewriting module: proto.fields [assertion]
    early skip of rewriting module: proto.message [assertion]
    early skip of rewriting module: google.protobuf.json_format [assertion]
    early skip of rewriting module: proto.modules [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.types.avro [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.types.protobuf [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.types.storage [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.types.stream [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.types.table [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_read.transports [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_read.transports.base [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_read.transports.grpc [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_read.transports.grpc_asyncio [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_read.async_client [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_write [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_write.client [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_write.transports [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_write.transports.base [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_write.transports.grpc [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_write.transports.grpc_asyncio [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.services.big_query_write.async_client [assertion]
    early skip of rewriting module: google.cloud.bigquery._http [assertion]
    early skip of rewriting module: google.cloud._http [assertion]
    early skip of rewriting module: google.cloud.version [assertion]
    early skip of rewriting module: google.cloud.bigquery._job_helpers [assertion]
    early skip of rewriting module: google.cloud.bigquery.job [assertion]
    early skip of rewriting module: google.cloud.bigquery.job.base [assertion]
    early skip of rewriting module: google.api_core.future [assertion]
    early skip of rewriting module: google.api_core.future.base [assertion]
    early skip of rewriting module: google.api_core.future.polling [assertion]
    early skip of rewriting module: google.api_core.future._helpers [assertion]
    early skip of rewriting module: google.cloud.bigquery._helpers [assertion]
    early skip of rewriting module: google.cloud.bigquery.retry [assertion]
    early skip of rewriting module: google.cloud.bigquery.job.copy_ [assertion]
    early skip of rewriting module: google.cloud.bigquery.encryption_configuration [assertion]
    early skip of rewriting module: google.cloud.bigquery.table [assertion]
    early skip of rewriting module: db_dtypes [assertion]
    early skip of rewriting module: geopandas [assertion]
    early skip of rewriting module: shapely [assertion]
    early skip of rewriting module: google.cloud.bigquery._pandas_helpers [assertion]
    early skip of rewriting module: google.cloud.bigquery._pyarrow_helpers [assertion]
    early skip of rewriting module: google.cloud.bigquery._versions_helpers [assertion]
    early skip of rewriting module: google.cloud.bigquery.exceptions [assertion]
    early skip of rewriting module: google.cloud.bigquery.schema [assertion]
    early skip of rewriting module: google.cloud.bigquery.standard_sql [assertion]
    early skip of rewriting module: google.cloud.bigquery.enums [assertion]
    early skip of rewriting module: db_dtypes [assertion]
    early skip of rewriting module: shapely [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage.gapic_version [assertion]
    early skip of rewriting module: google.cloud.bigquery_storage_v1.gapic_types [assertion]
    early skip of rewriting module: google.cloud.bigquery._tqdm_helpers [assertion]
    early skip of rewriting module: tqdm [assertion]
    early skip of rewriting module: google.cloud.bigquery.external_config [assertion]
    early skip of rewriting module: google.cloud.bigquery.format_options [assertion]
    early skip of rewriting module: google.cloud.bigquery.job.extract [assertion]
    early skip of rewriting module: google.cloud.bigquery.model [assertion]
    early skip of rewriting module: google.cloud.bigquery.job.load [assertion]
    early skip of rewriting module: google.cloud.bigquery.query [assertion]
    early skip of rewriting module: google.cloud.bigquery.job.query [assertion]
    early skip of rewriting module: google.cloud.bigquery.dataset [assertion]
    early skip of rewriting module: google.cloud.bigquery.routine [assertion]
    early skip of rewriting module: google.cloud.bigquery.routine.routine [assertion]
    early skip of rewriting module: db_dtypes [assertion]
    early skip of rewriting module: google.cloud.bigquery.opentelemetry_tracing [assertion]
    early skip of rewriting module: opentelemetry [assertion]
    early skip of rewriting module: google.cloud.bigquery.dbapi [assertion]
    early skip of rewriting module: google.cloud.bigquery.dbapi.connection [assertion]
    early skip of rewriting module: google.cloud.bigquery.dbapi.cursor [assertion]
    early skip of rewriting module: google.cloud.bigquery.dbapi._helpers [assertion]
    early skip of rewriting module: google.cloud.bigquery.dbapi.exceptions [assertion]
    early skip of rewriting module: google.cloud.bigquery.dbapi.types [assertion]
    early skip of rewriting module: sqlalchemy_bigquery.parse_url [assertion]
    early skip of rewriting module: sqlalchemy_bigquery._helpers [assertion]
    early skip of rewriting module: sqlalchemy_bigquery._struct [assertion]
    early skip of rewriting module: sqlalchemy_bigquery._types [assertion]
    early skip of rewriting module: sqlalchemy_bigquery.geography [assertion]
    early skip of rewriting module: geoalchemy2 [assertion]
    early skip of rewriting module: alembic [assertion]
    early skip of rewriting module: sqlalchemy_bigquery.geography [assertion]
    early skip of rewriting module: geoalchemy2 [assertion]
    early skip of rewriting module: pybigquery [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.constants [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_bigquery.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_clickhouse [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.connector [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.ext [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.ext.declarative [assertion]
    early skip of rewriting module: sqlalchemy.ext.declarative [assertion]
    early skip of rewriting module: sqlalchemy.ext.declarative.extensions [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.sql [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.sql.schema [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.sql.selectable [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.ext.clauses [assertion]
    early skip of rewriting module: dill [assertion]
    early skip of rewriting module: dill.__info__ [assertion]
    early skip of rewriting module: dill._dill [assertion]
    early skip of rewriting module: dill.logger [assertion]
    early skip of rewriting module: _pyio [assertion]
    early skip of rewriting module: dill._shims [assertion]
    early skip of rewriting module: dill.settings [assertion]
    early skip of rewriting module: winreg [assertion]
    early skip of rewriting module: dill.session [assertion]
    early skip of rewriting module: dill.detect [assertion]
    early skip of rewriting module: dill.pointers [assertion]
    early skip of rewriting module: dill.source [assertion]
    early skip of rewriting module: dill.temp [assertion]
    early skip of rewriting module: dill.objtypes [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.sql.ddl [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.orm [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.orm.session [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.orm.query [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.drivers [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.drivers.base [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.types [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.dt_utils [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.util [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.util.compat [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.quoting [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.drivers.http [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.drivers.http.base [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.drivers.http.connector [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.parsers [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.parsers.base [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.drivers.http.escaper [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.drivers.http.transport [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.exceptions [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.drivers.http.exceptions [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.constants [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_array [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_special [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.functions_window [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.literal [assertion]
    early skip of rewriting module: dl_connector_clickhouse.formula.type_constructor [assertion]
    early skip of rewriting module: dl_connector_mysql [assertion]
    early skip of rewriting module: dl_connector_mysql.formula [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.connector [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.base [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.reflection [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.enumerated [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.types [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.json [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.reserved_words [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.cymysql [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.mysqldb [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.mariadbconnector [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.mysqlconnector [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.oursql [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.pymysql [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.pyodbc [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.dml [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.expression [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.aiomysql [assertion]
    early skip of rewriting module: sqlalchemy.dialects.mysql.asyncmy [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.constants [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.functions_window [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.literal [assertion]
    early skip of rewriting module: dl_connector_mysql.formula.type_constructor [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3 [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.connector [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.constants [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.utils [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_array [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_special [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.functions_window [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.file.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.connector [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.constants [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.utils [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_array [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_special [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.functions_window [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_gsheets.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.connector [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.constants [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.utils [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_array [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_special [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.functions_window [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_bundle_chs3.chs3_yadocs.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.connector [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_array [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.common [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_special [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.functions_window [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.literal [assertion]
    early skip of rewriting module: dl_connector_postgresql.formula.type_constructor [assertion]
    early skip of rewriting module: dl_connector_oracle [assertion]
    early skip of rewriting module: oracledb [assertion]
    early skip of rewriting module: oracledb.version [assertion]
    early skip of rewriting module: oracledb.constants [assertion]
    early skip of rewriting module: oracledb.exceptions [assertion]
    early skip of rewriting module: oracledb.errors [assertion]
    early skip of rewriting module: oracledb.driver_mode [assertion]
    early skip of rewriting module: oracledb.defaults [assertion]
    early skip of rewriting module: oracledb.connection [assertion]
    early skip of rewriting module: oracledb.base_impl [assertion]
    early skip of rewriting module: oracledb.utils [assertion]
    early skip of rewriting module: oracledb.thick_impl [assertion]
    early skip of rewriting module: oracledb.subscr [assertion]
    early skip of rewriting module: oracledb.thin_impl [assertion]
    early skip of rewriting module: backports_abc [assertion]
    early skip of rewriting module: getpass [assertion]
    early skip of rewriting module: termios [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.kdf [assertion]
    early skip of rewriting module: cryptography.hazmat.primitives.kdf.pbkdf2 [assertion]
    early skip of rewriting module: oracledb.pool [assertion]
    early skip of rewriting module: oracledb.pool_params [assertion]
    early skip of rewriting module: oracledb.connect_params [assertion]
    early skip of rewriting module: oracledb.cursor [assertion]
    early skip of rewriting module: oracledb.fetch_info [assertion]
    early skip of rewriting module: oracledb.dbobject [assertion]
    early skip of rewriting module: oracledb.var [assertion]
    early skip of rewriting module: oracledb.lob [assertion]
    early skip of rewriting module: oracledb.aq [assertion]
    early skip of rewriting module: oracledb.soda [assertion]
    early skip of rewriting module: oracledb.dsn [assertion]
    early skip of rewriting module: oracledb.constructors [assertion]
    early skip of rewriting module: oracledb.future [assertion]
    early skip of rewriting module: dl_connector_oracle.formula [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.connector [assertion]
    early skip of rewriting module: sqlalchemy.dialects.oracle [assertion]
    early skip of rewriting module: sqlalchemy.dialects.oracle.base [assertion]
    early skip of rewriting module: sqlalchemy.dialects.oracle.cx_oracle [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.constants [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.context_processor [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.all [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.conditional_blocks [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.functions_aggregation [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.functions_datetime [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.functions_logical [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.functions_markup [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.functions_math [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.functions_string [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.functions_type [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.operators_binary [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.operators_ternary [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.definitions.operators_unary [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.literal [assertion]
    early skip of rewriting module: dl_connector_oracle.formula.type_constructor [assertion]
    early skip of rewriting module: dl_connector_postgresql.core [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql.connector [assertion]
    early skip of rewriting module: dl_core.connectors.sql_base [assertion]
    early skip of rewriting module: dl_core.connectors.sql_base.connector [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql.constants [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql.data_source [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql.data_source_migration [assertion]
    early skip of rewriting module: dl_core.connectors.sql_base.data_source_migration [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql.settings [assertion]
    early skip of rewriting module: dl_core.connectors.settings.mixins [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql.storage_schemas [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql.storage_schemas.connection [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql.us_connection [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql.dto [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.dto [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.constants [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.us_connection [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.storage_schemas [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.storage_schemas.connection [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.adapters_postgres [assertion]
    early skip of rewriting module: dl_core.connection_executors.adapters.adapters_base_sa_classic [assertion]
    early skip of rewriting module: dl_core.connection_executors.adapters.adapters_base_sa [assertion]
    early skip of rewriting module: dl_core.connection_executors.adapters.mixins [assertion]
    early skip of rewriting module: dl_core.connection_executors.adapters.sa_utils [assertion]
    early skip of rewriting module: dl_core.connectors.base.error_handling [assertion]
    early skip of rewriting module: dl_core.connectors.base.error_transformer [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.adapters_base_postgres [assertion]
    early skip of rewriting module: dl_core.connectors.ssl_common [assertion]
    early skip of rewriting module: dl_core.connectors.ssl_common.adapter [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.target_dto [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.error_transformer [assertion]
    early skip of rewriting module: asyncpg [assertion]
    early skip of rewriting module: asyncpg.connection [assertion]
    early skip of rewriting module: asyncpg.compat [assertion]
    early skip of rewriting module: asyncpg._asyncio_compat [assertion]
    early skip of rewriting module: asyncpg.connect_utils [assertion]
    early skip of rewriting module: asyncpg.exceptions [assertion]
    early skip of rewriting module: asyncpg.exceptions._base [assertion]
    early skip of rewriting module: asyncpg.protocol [assertion]
    early skip of rewriting module: asyncpg.protocol.protocol [assertion]
    early skip of rewriting module: asyncpg.pgproto [assertion]
    early skip of rewriting module: asyncpg.pgproto.pgproto [assertion]
    early skip of rewriting module: asyncpg.pgproto.types [assertion]
    early skip of rewriting module: backports_abc [assertion]
    early skip of rewriting module: asyncpg.types [assertion]
    early skip of rewriting module: asyncpg.cursor [assertion]
    early skip of rewriting module: asyncpg.connresource [assertion]
    early skip of rewriting module: asyncpg.introspection [assertion]
    early skip of rewriting module: asyncpg.prepared_stmt [assertion]
    early skip of rewriting module: asyncpg.serverversion [assertion]
    early skip of rewriting module: asyncpg.transaction [assertion]
    early skip of rewriting module: asyncpg.utils [assertion]
    early skip of rewriting module: asyncpg.pool [assertion]
    early skip of rewriting module: asyncpg._version [assertion]
    early skip of rewriting module: psycopg2 [assertion]
    early skip of rewriting module: psycopg2._psycopg [assertion]
    early skip of rewriting module: psycopg2.errors [assertion]
    early skip of rewriting module: psycopg2.extensions [assertion]
    early skip of rewriting module: psycopg2._json [assertion]
    early skip of rewriting module: psycopg2._range [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.exc [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.async_adapters_postgres [assertion]
    early skip of rewriting module: dl_core.connection_executors.adapters.adapter_actions.db_version [assertion]
    early skip of rewriting module: dl_sqlalchemy_postgres [assertion]
    early skip of rewriting module: dl_sqlalchemy_postgres.asyncpg [assertion]
    early skip of rewriting module: dl_sqlalchemy_postgres.base [assertion]
    early skip of rewriting module: dl_sqlalchemy_common [assertion]
    early skip of rewriting module: dl_sqlalchemy_common.base [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.utils [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.connection_executors [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.query_compiler [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.sa_types [assertion]
    early skip of rewriting module: dl_type_transformer.sa_types_base [assertion]
    early skip of rewriting module: dl_connector_postgresql.core.postgresql_base.type_transformer [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_aiopg [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_aiopg.plugin [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_aiopg.data_processor_service_aiopg [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_aiopg.pool_aiopg [assertion]
    early skip of rewriting module: aiopg [assertion]
    early skip of rewriting module: aiopg.connection [assertion]
    early skip of rewriting module: psycopg2.extras [assertion]
    early skip of rewriting module: psycopg2._ipaddress [assertion]
    early skip of rewriting module: aiopg.log [assertion]
    early skip of rewriting module: aiopg.utils [assertion]
    early skip of rewriting module: aiopg.pool [assertion]
    early skip of rewriting module: aiopg.sa [assertion]
    early skip of rewriting module: aiopg.sa.connection [assertion]
    early skip of rewriting module: aiopg.sa.exc [assertion]
    early skip of rewriting module: aiopg.sa.result [assertion]
    early skip of rewriting module: aiopg.sa.utils [assertion]
    early skip of rewriting module: aiopg.sa.transaction [assertion]
    early skip of rewriting module: aiopg.sa.engine [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_aiopg.processor_aiopg [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_aiopg.exec_adapter_aiopg [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_pg_base.exec_adapter_base [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_pg_base.processor_base [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_asyncpg [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_asyncpg.plugin [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_asyncpg.data_processor_service_asyncpg [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_asyncpg.pool_asyncpg [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_asyncpg.processor_asyncpg [assertion]
    early skip of rewriting module: dl_compeng_pg.compeng_asyncpg.exec_adapter_asyncpg [assertion]
    early skip of rewriting module: dl_connector_postgresql.api [assertion]
    early skip of rewriting module: dl_connector_postgresql.api.connector [assertion]
    early skip of rewriting module: dl_connector_postgresql.api.api_schema [assertion]
    early skip of rewriting module: dl_connector_postgresql.api.api_schema.connection [assertion]
    early skip of rewriting module: dl_api_connector.api_schema.connection_mixins [assertion]
    early skip of rewriting module: dl_api_connector.api_schema.connection_sql [assertion]
    early skip of rewriting module: dl_api_connector.api_schema.connection_base_fields [assertion]
    early skip of rewriting module: dl_connector_postgresql.api.connection_form [assertion]
    early skip of rewriting module: dl_connector_postgresql.api.connection_form.form_config [assertion]
    early skip of rewriting module: dl_api_connector.form_config.models.shortcuts [assertion]
    early skip of rewriting module: dl_api_connector.form_config.models.shortcuts.rows [assertion]
    early skip of rewriting module: dl_connector_postgresql.api.connection_info [assertion]
    early skip of rewriting module: dl_connector_postgresql.api.i18n [assertion]
    early skip of rewriting module: dl_connector_postgresql.api.i18n.localizer [assertion]
    early skip of rewriting module: dl_connector_postgresql.assets [assertion]
    early skip of rewriting module: dl_connector_postgresql.assets.icons [assertion]
    early skip of rewriting module: dl_connector_postgresql.assets.icons.nav [assertion]
    early skip of rewriting module: dl_connector_postgresql.assets.icons.standard [assertion]
    early skip of rewriting module: dl_pivot_pandas.pandas.plugin [assertion]
    early skip of rewriting module: dl_pivot_pandas.pandas.transformer_factory [assertion]
    early skip of rewriting module: dl_pivot_pandas.pandas.transformer [assertion]
    early skip of rewriting module: dl_pivot.empty [assertion]
    early skip of rewriting module: dl_pivot.empty.facade [assertion]
    early skip of rewriting module: dl_pivot.base.facade [assertion]
    early skip of rewriting module: dl_pivot.empty.data_frame [assertion]
    early skip of rewriting module: dl_pivot.base.data_frame [assertion]
    early skip of rewriting module: dl_pivot.empty.paginator [assertion]
    early skip of rewriting module: dl_pivot.base.paginator [assertion]
    early skip of rewriting module: dl_pivot.empty.sorter [assertion]
    early skip of rewriting module: dl_pivot.base.sorter [assertion]
    early skip of rewriting module: dl_pivot.sort_strategy [assertion]
    early skip of rewriting module: dl_pivot.sort_helpers [assertion]
    early skip of rewriting module: dl_pivot.stream_modifiers [assertion]
    early skip of rewriting module: dl_pivot_pandas.pandas.facade [assertion]
    early skip of rewriting module: dl_pivot_pandas.pandas.data_frame [assertion]
    early skip of rewriting module: dl_pivot_pandas.pandas.paginator [assertion]
    early skip of rewriting module: dl_pivot_pandas.pandas.sorter [assertion]
    early skip of rewriting module: dl_pivot.native [assertion]
    early skip of rewriting module: dl_pivot.native.plugin [assertion]
    early skip of rewriting module: dl_pivot.native.constants [assertion]
    early skip of rewriting module: dl_pivot.native.transformer_factory [assertion]
    early skip of rewriting module: dl_pivot.native.transformer [assertion]
    early skip of rewriting module: dl_pivot.native.data_frame [assertion]
    early skip of rewriting module: dl_pivot.native.facade [assertion]
    early skip of rewriting module: dl_pivot.native.paginator [assertion]
    early skip of rewriting module: dl_pivot.native.sorter [assertion]
    early skip of rewriting module: docker [assertion]
    early skip of rewriting module: docker.api [assertion]
    early skip of rewriting module: docker.api.client [assertion]
    early skip of rewriting module: docker.auth [assertion]
    early skip of rewriting module: docker.credentials [assertion]
    early skip of rewriting module: docker.credentials.constants [assertion]
    early skip of rewriting module: docker.credentials.errors [assertion]
    early skip of rewriting module: docker.credentials.store [assertion]
    early skip of rewriting module: docker.credentials.utils [assertion]
    early skip of rewriting module: docker.errors [assertion]
    early skip of rewriting module: docker.utils [assertion]
    early skip of rewriting module: docker.utils.build [assertion]
    early skip of rewriting module: docker.constants [assertion]
    early skip of rewriting module: docker.version [assertion]
    early skip of rewriting module: docker._version [assertion]
    early skip of rewriting module: docker.utils.fnmatch [assertion]
    early skip of rewriting module: docker.utils.decorators [assertion]
    early skip of rewriting module: docker.utils.utils [assertion]
    early skip of rewriting module: docker.tls [assertion]
    early skip of rewriting module: docker.utils.config [assertion]
    early skip of rewriting module: docker.transport [assertion]
    early skip of rewriting module: docker.transport.unixconn [assertion]
    early skip of rewriting module: docker.transport.basehttpadapter [assertion]
    early skip of rewriting module: docker.transport.npipeconn [assertion]
    early skip of rewriting module: docker.transport.npipesocket [assertion]
    early skip of rewriting module: pywintypes [assertion]
    early skip of rewriting module: docker.transport.sshconn [assertion]
    early skip of rewriting module: paramiko [assertion]
    early skip of rewriting module: paramiko._version [assertion]
    early skip of rewriting module: paramiko.transport [assertion]
    early skip of rewriting module: paramiko.util [assertion]
    early skip of rewriting module: paramiko.common [assertion]
    early skip of rewriting module: paramiko.config [assertion]
    early skip of rewriting module: invoke [assertion]
    early skip of rewriting module: paramiko.ssh_exception [assertion]
    early skip of rewriting module: paramiko.auth_handler [assertion]
    early skip of rewriting module: paramiko.message [assertion]
    early skip of rewriting module: paramiko.server [assertion]
    early skip of rewriting module: paramiko.ssh_gss [assertion]
    early skip of rewriting module: gssapi [assertion]
    early skip of rewriting module: pywintypes [assertion]
    early skip of rewriting module: paramiko.channel [assertion]
    early skip of rewriting module: paramiko.file [assertion]
    early skip of rewriting module: paramiko.buffered_pipe [assertion]
    early skip of rewriting module: paramiko.pipe [assertion]
    early skip of rewriting module: paramiko.compress [assertion]
    early skip of rewriting module: paramiko.dsskey [assertion]
    early skip of rewriting module: paramiko.ber [assertion]
    early skip of rewriting module: paramiko.sftp [assertion]
    early skip of rewriting module: paramiko.pkey [assertion]
    early skip of rewriting module: paramiko.ed25519key [assertion]
    early skip of rewriting module: nacl [assertion]
    early skip of rewriting module: nacl.signing [assertion]
    early skip of rewriting module: nacl.bindings [assertion]
    early skip of rewriting module: nacl.bindings.crypto_aead [assertion]
    early skip of rewriting module: nacl.exceptions [assertion]
    early skip of rewriting module: nacl._sodium [assertion]
    early skip of rewriting module: nacl.bindings.crypto_box [assertion]
    early skip of rewriting module: nacl.bindings.crypto_core [assertion]
    early skip of rewriting module: nacl.bindings.crypto_generichash [assertion]
    early skip of rewriting module: nacl.bindings.crypto_hash [assertion]
    early skip of rewriting module: nacl.bindings.crypto_kx [assertion]
    early skip of rewriting module: nacl.bindings.crypto_pwhash [assertion]
    early skip of rewriting module: nacl.bindings.crypto_scalarmult [assertion]
    early skip of rewriting module: nacl.bindings.crypto_secretbox [assertion]
    early skip of rewriting module: nacl.bindings.crypto_secretstream [assertion]
    early skip of rewriting module: nacl.bindings.crypto_shorthash [assertion]
    early skip of rewriting module: nacl.bindings.crypto_sign [assertion]
    early skip of rewriting module: nacl.bindings.randombytes [assertion]
    early skip of rewriting module: nacl.bindings.sodium_core [assertion]
    early skip of rewriting module: nacl.bindings.utils [assertion]
    early skip of rewriting module: nacl.encoding [assertion]
    early skip of rewriting module: nacl.public [assertion]
    early skip of rewriting module: nacl.utils [assertion]
    early skip of rewriting module: paramiko.kex_curve25519 [assertion]
    early skip of rewriting module: paramiko.kex_gex [assertion]
    early skip of rewriting module: paramiko.kex_group1 [assertion]
    early skip of rewriting module: paramiko.kex_group14 [assertion]
    early skip of rewriting module: paramiko.kex_group16 [assertion]
    early skip of rewriting module: paramiko.kex_ecdh_nist [assertion]
    early skip of rewriting module: paramiko.kex_gss [assertion]
    early skip of rewriting module: paramiko.packet [assertion]
    early skip of rewriting module: paramiko.primes [assertion]
    early skip of rewriting module: paramiko.rsakey [assertion]
    early skip of rewriting module: paramiko.ecdsakey [assertion]
    early skip of rewriting module: paramiko.sftp_client [assertion]
    early skip of rewriting module: paramiko.sftp_attr [assertion]
    early skip of rewriting module: paramiko.sftp_file [assertion]
    early skip of rewriting module: paramiko.client [assertion]
    early skip of rewriting module: paramiko.agent [assertion]
    early skip of rewriting module: paramiko.hostkeys [assertion]
    early skip of rewriting module: paramiko.sftp_server [assertion]
    early skip of rewriting module: paramiko.sftp_si [assertion]
    early skip of rewriting module: paramiko.sftp_handle [assertion]
    early skip of rewriting module: paramiko.proxy [assertion]
    early skip of rewriting module: docker.utils.json_stream [assertion]
    early skip of rewriting module: docker.utils.proxy [assertion]
    early skip of rewriting module: docker.utils.socket [assertion]
    early skip of rewriting module: docker.transport.NpipeSocket [assertion]
    early skip of rewriting module: docker.api.build [assertion]
    early skip of rewriting module: docker.api.config [assertion]
    early skip of rewriting module: docker.api.container [assertion]
    early skip of rewriting module: docker.types [assertion]
    early skip of rewriting module: docker.types.containers [assertion]
    early skip of rewriting module: docker.types.base [assertion]
    early skip of rewriting module: docker.types.healthcheck [assertion]
    early skip of rewriting module: docker.types.daemon [assertion]
    early skip of rewriting module: docker.types.networks [assertion]
    early skip of rewriting module: docker.types.services [assertion]
    early skip of rewriting module: docker.types.swarm [assertion]
    early skip of rewriting module: docker.api.daemon [assertion]
    early skip of rewriting module: docker.api.exec_api [assertion]
    early skip of rewriting module: docker.api.image [assertion]
    early skip of rewriting module: docker.api.network [assertion]
    early skip of rewriting module: docker.api.plugin [assertion]
    early skip of rewriting module: docker.api.secret [assertion]
    early skip of rewriting module: docker.api.service [assertion]
    early skip of rewriting module: docker.api.swarm [assertion]
    early skip of rewriting module: docker.api.volume [assertion]
    early skip of rewriting module: docker.transport.NpipeHTTPAdapter [assertion]
    early skip of rewriting module: docker.client [assertion]
    early skip of rewriting module: docker.models [assertion]
    early skip of rewriting module: docker.models.configs [assertion]
    early skip of rewriting module: docker.models.resource [assertion]
    early skip of rewriting module: docker.models.containers [assertion]
    early skip of rewriting module: docker.models.images [assertion]
    early skip of rewriting module: docker.models.networks [assertion]
    early skip of rewriting module: docker.models.nodes [assertion]
    early skip of rewriting module: docker.models.plugins [assertion]
    early skip of rewriting module: docker.models.secrets [assertion]
    early skip of rewriting module: docker.models.services [assertion]
    early skip of rewriting module: docker.models.swarm [assertion]
    early skip of rewriting module: docker.models.volumes [assertion]
    early skip of rewriting module: docker.context [assertion]
    early skip of rewriting module: docker.context.api [assertion]
    early skip of rewriting module: docker.context.config [assertion]
    early skip of rewriting module: docker.context.context [assertion]
    early skip of rewriting module: tracemalloc [assertion]
    early skip of rewriting module: _tracemalloc [assertion]
    early skip of rewriting module: dl_connector_mssql.db_testing [assertion]
    early skip of rewriting module: dl_connector_mssql.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_mssql.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: dl_connector_trino.db_testing [assertion]
    early skip of rewriting module: dl_connector_trino.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_trino.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: dl_connector_snowflake.db_testing [assertion]
    early skip of rewriting module: dl_connector_snowflake.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_snowflake.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: dl_connector_ydb.db_testing [assertion]
    early skip of rewriting module: dl_connector_ydb.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_ydb.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: dl_connector_bigquery.db_testing [assertion]
    early skip of rewriting module: dl_connector_bigquery.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_bigquery.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: dl_connector_clickhouse.db_testing [assertion]
    early skip of rewriting module: dl_connector_clickhouse.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_clickhouse.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: clickhouse_sqlalchemy.engines [assertion]
    early skip of rewriting module: dl_connector_chyt [assertion]
    early skip of rewriting module: dl_connector_chyt.db_testing [assertion]
    early skip of rewriting module: dl_connector_chyt.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_chyt.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: dl_sqlalchemy_chyt [assertion]
    early skip of rewriting module: dl_sqlalchemy_chyt.base [assertion]
    early skip of rewriting module: dl_sqlalchemy_chyt.types [assertion]
    early skip of rewriting module: dl_sqlalchemy_clickhouse [assertion]
    early skip of rewriting module: dl_sqlalchemy_clickhouse.base [assertion]
    early skip of rewriting module: dl_sqlalchemy_chyt.table_engine [assertion]
    early skip of rewriting module: dl_connector_mysql.db_testing [assertion]
    early skip of rewriting module: dl_connector_mysql.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_mysql.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: dl_connector_postgresql.db_testing [assertion]
    early skip of rewriting module: dl_connector_postgresql.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_postgresql.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: dl_connector_oracle.db_testing [assertion]
    early skip of rewriting module: dl_connector_oracle.db_testing.connector [assertion]
    early skip of rewriting module: dl_connector_oracle.db_testing.engine_wrapper [assertion]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x100bb1900>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x101aae9e0>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'respx.plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/respx/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'flaky.flaky_pytest_plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/flaky/flaky_pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_mock/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/anyio/pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_aiohttp.plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_aiohttp/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'typeguard._pytest_plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/typeguard/_pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_lazyfixture' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_lazyfixture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'dl_connector_postgresql_tests.db.conftest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x11f96cdc0>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x11f96c700>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'sort_output': True}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/marshmallow/fields.py', lineno : 755, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'bi_extra': FieldExtra(partial_in=(), exclude_in=(), editable=True, export_fake=False)}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_api_connector/dl_api_connector/api_schema/top_level.py', lineno : 265, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'bi_extra': FieldExtra(partial_in=(), exclude_in=[<CreateMode.test: 2>], editable=(), export_fake=False)}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_api_connector/dl_api_connector/api_schema/top_level.py', lineno : 281, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'bi_extra': FieldExtra(partial_in=(), exclude_in=[<CreateMode.test: 2>], editable=(), export_fake=False)}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_api_connector/dl_api_connector/api_schema/top_level.py', lineno : 288, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'bi_extra': FieldExtra(partial_in=(), exclude_in=[<CreateMode.test: 2>], editable=(), export_fake=False)}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_api_connector/dl_api_connector/api_schema/top_level.py', lineno : 295, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'readonly': True}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/marshmallow/fields.py', lineno : 1890, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning('jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/flask_restx/api.py', lineno : 23, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning('jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/flask_restx/api.py', lineno : 23, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning('The \'__version__\' attribute is deprecated and will be removed in Werkzeug 3.1. Use feature detection or \'importlib.metadata.version("werkzeug")\' instead.'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/flask_restx/api.py', lineno : 35, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning('The \'__version__\' attribute is deprecated and will be removed in Werkzeug 3.1. Use feature detection or \'importlib.metadata.version("werkzeug")\' instead.'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/flask_restx/api.py', lineno : 35, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning('The \'__version__\' attribute is deprecated and will be removed in Werkzeug 3.1. Use feature detection or \'importlib.metadata.version("werkzeug")\' instead.'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/flask_restx/resource.py', lineno : 3, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning('The \'__version__\' attribute is deprecated and will be removed in Werkzeug 3.1. Use feature detection or \'importlib.metadata.version("werkzeug")\' instead.'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/flask_restx/resource.py', lineno : 3, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'sort_output': True}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/marshmallow/fields.py', lineno : 755, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'readonly': True}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/marshmallow/fields.py', lineno : 1890, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'readonly': True}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/marshmallow/fields.py', lineno : 1181, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'readonly': True}"), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/marshmallow/fields.py', lineno : 1181, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : RemovedInMarshmallow4Warning("The 'default' argument to fields is deprecated. Use 'dump_default' instead."), category : 'RemovedInMarshmallow4Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_api_lib/dl_api_lib/schemas/connection.py', lineno : 80, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x12e6feb90>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x12e6fe6e0>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x100bb1900>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x101aae9e0>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'respx.plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/respx/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'flaky.flaky_pytest_plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/flaky/flaky_pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_mock/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/anyio/pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_aiohttp.plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_aiohttp/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'typeguard._pytest_plugin' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/typeguard/_pytest_plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_lazyfixture' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_lazyfixture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'dl_connector_postgresql_tests.db.conftest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x11f96cdc0>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x11f96c700>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x12e6feb90>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x12e6fe6e0>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x12e718220>
          manager: <_pytest.config.PytestPluginManager object at 0x100bb1900>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x101aae9e0>
          start_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql
          startdir: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql
      finish pytest_report_header --> [['asyncio: mode=strict'], ['rootdir: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql, configfile: pyproject.toml', 'plugins: respx-0.22.0, asyncio-0.21.0, flaky-3.8.1, mock-3.12.0, anyio-4.4.0, aiohttp-1.0.5, typeguard-4.1.5, lazy-fixture-0.6.3'], ['using: pytest-7.2.2', 'setuptools registered plugins:', '  respx-0.22.0 at /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/respx/plugin.py', '  pytest-asyncio-0.21.0 at /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', '  flaky-3.8.1 at /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/flaky/flaky_pytest_plugin.py', '  pytest-mock-3.12.0 at /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_mock/__init__.py', '  anyio-4.4.0 at /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/anyio/pytest_plugin.py', '  pytest-aiohttp-1.0.5 at /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_aiohttp/plugin.py', '  typeguard-4.1.5 at /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/typeguard/_pytest_plugin.py', '  pytest-lazy-fixture-0.6.3 at /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_lazyfixture.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['./dl_connector_postgresql_tests/db/core'] [collection]
        pytest_collectstart [hook]
            collector: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (PosixPath('/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core'), []) [collection]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
                path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
                path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
                  path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
              finish pytest_pycollect_makemodule --> <Package core> [hook]
            finish pytest_collect_file --> [<Package core>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/__init__.py
                path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/__init__.py
                path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/__init__.py
                  path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/__init__.py
              finish pytest_pycollect_makemodule --> <Package db> [hook]
            finish pytest_collect_file --> [<Package db>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/__init__.py
                path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/__init__.py
                path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/__init__.py
                  path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/__init__.py
              finish pytest_pycollect_makemodule --> <Package dl_connector_postgresql_tests> [hook]
            finish pytest_collect_file --> [<Package dl_connector_postgresql_tests>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
                path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
                path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
                  path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/__init__.py
              finish pytest_pycollect_makemodule --> <Package core> [hook]
            finish pytest_collect_file --> [<Package core>] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package core> [collection]
      pytest_collectstart [hook]
          collector: <Package core>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package core>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x101aae9e0>
            collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/base.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/base.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/base.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/base.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x101aae9e0>
            collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_adapter.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_adapter.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_adapter.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_adapter.py
          pytest_pycollect_makemodule [hook]
              parent: <Package core>
              module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_adapter.py
              path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_adapter.py
          finish pytest_pycollect_makemodule --> <Module test_adapter.py> [hook]
        finish pytest_collect_file --> [<Module test_adapter.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x101aae9e0>
            collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection.py
          pytest_pycollect_makemodule [hook]
              parent: <Package core>
              module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection.py
              path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection.py
          finish pytest_pycollect_makemodule --> <Module test_connection.py> [hook]
        finish pytest_collect_file --> [<Module test_connection.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x101aae9e0>
            collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection_executor.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection_executor.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection_executor.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection_executor.py
          pytest_pycollect_makemodule [hook]
              parent: <Package core>
              module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection_executor.py
              path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection_executor.py
          finish pytest_pycollect_makemodule --> <Module test_connection_executor.py> [hook]
        finish pytest_collect_file --> [<Module test_connection_executor.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x101aae9e0>
            collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_data_source.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_data_source.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_data_source.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_data_source.py
          pytest_pycollect_makemodule [hook]
              parent: <Package core>
              module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_data_source.py
              path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_data_source.py
          finish pytest_pycollect_makemodule --> <Module test_data_source.py> [hook]
        finish pytest_collect_file --> [<Module test_data_source.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x101aae9e0>
            collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_dataset.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_dataset.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_dataset.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_dataset.py
          pytest_pycollect_makemodule [hook]
              parent: <Package core>
              module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_dataset.py
              path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_dataset.py
          finish pytest_pycollect_makemodule --> <Module test_dataset.py> [hook]
        finish pytest_collect_file --> [<Module test_dataset.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x101aae9e0>
            collection_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_remote_query_executor.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_remote_query_executor.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package core>
            file_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_remote_query_executor.py
            path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_remote_query_executor.py
          pytest_pycollect_makemodule [hook]
              parent: <Package core>
              module_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_remote_query_executor.py
              path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_remote_query_executor.py
          finish pytest_pycollect_makemodule --> <Module test_remote_query_executor.py> [hook]
        finish pytest_collect_file --> [<Module test_remote_query_executor.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/__init__.py' lenresult=6 outcome='passed'> [hook]
    genitems <Module test_adapter.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_adapter.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_adapter.py>
      find_module called for: dl_connector_postgresql_tests.db.core [assertion]
      find_module called for: dl_connector_postgresql_tests.db.core.test_adapter [assertion]
      matched test file '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_adapter.py' [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_adapter.py [assertion]
      matched marked file 'dl_core_testing.testcases.adapter' (from 'dl_core_testing.testcases') [assertion]
      find_module called for: dl_core_testing.testcases.adapter [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/testcases/adapter.py [assertion]
      matched marked file 'dl_core_testing.testcases.connection_executor' (from 'dl_core_testing.testcases') [assertion]
      find_module called for: dl_core_testing.testcases.connection_executor [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/testcases/connection_executor.py [assertion]
      matched marked file 'dl_core_testing.testcases.connection' (from 'dl_core_testing.testcases') [assertion]
      find_module called for: dl_core_testing.testcases.connection [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/testcases/connection.py [assertion]
      matched marked file 'dl_core_testing.connection' (from 'dl_core_testing.connection') [assertion]
      find_module called for: dl_core_testing.connection [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/connection.py [assertion]
      find_module called for: dl_testing.regulated_test [assertion]
      matched test file '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_testing/dl_testing/regulated_test.py' [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_testing/dl_testing/regulated_test.py [assertion]
      early skip of rewriting module: dl_connector_postgresql_tests.db.core.base [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: pytest
            obj: <module 'pytest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: RequestContextInfo
            obj: <class 'dl_api_commons.base_models.RequestContextInfo'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: SchemaIdent
            obj: <class 'dl_core.connection_models.common_models.SchemaIdent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: BaseAsyncAdapterTestClass
            obj: <class 'dl_core_testing.testcases.adapter.BaseAsyncAdapterTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: RegulatedTestParams
            obj: <class 'dl_testing.regulated_test.RegulatedTestParams'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: AsyncPostgresAdapter
            obj: <class 'dl_connector_postgresql.core.postgresql_base.async_adapters_postgres.AsyncPostgresAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: PostgresConnTargetDTO
            obj: <class 'dl_connector_postgresql.core.postgresql_base.target_dto.PostgresConnTargetDTO'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: BasePostgreSQLTestClass
            obj: <class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_adapter.py>
            name: TestAsyncPostgreSQLAdapter
            obj: <class 'dl_connector_postgresql_tests.db.core.test_adapter.TestAsyncPostgreSQLAdapter'>
        finish pytest_pycollect_makeitem --> <Class TestAsyncPostgreSQLAdapter> [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_adapter.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestAsyncPostgreSQLAdapter> [collection]
      pytest_collectstart [hook]
          collector: <Class TestAsyncPostgreSQLAdapter>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestAsyncPostgreSQLAdapter>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: test_params
            obj: RegulatedTestParams(mark_tests_skipped={<function BaseAsyncAdapterTestClass.test_default_pass_db_query_to_user at 0x12e7c8940>: 'Not relevant'}, mark_tests_failed=None, mark_features_skipped=None)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: ASYNC_ADAPTER_CLS
            obj: <class 'dl_connector_postgresql.core.postgresql_base.async_adapters_postgres.AsyncPostgresAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: test_tables_list
            obj: <function TestAsyncPostgreSQLAdapter.test_tables_list at 0x12e75ea70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d0eb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_tables_list>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: test_tables_list_schema
            obj: <function TestAsyncPostgreSQLAdapter.test_tables_list_schema at 0x12e7c92d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d0ee0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: test_data
                argname: schema
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: ['sample']
                argname: expected_tables
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: test_data_partitions
                argname: schema
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: ['sample_partition']
                argname: expected_tables
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_tables_list_schema[test_data-expected_tables0]>, <Function test_tables_list_schema[test_data_partitions-expected_tables1]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>, dl_core_testing.testcases.adapter.BaseAsyncAdapterTestClass[dl_connector_postgresql.core.postgresql_base.target_dto.PostgresConnTargetDTO])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: __annotations__
            obj: {}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: test_default_pass_db_query_to_user
            obj: <function BaseAsyncAdapterTestClass.test_default_pass_db_query_to_user at 0x12e7c9360>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d0e80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_default_pass_db_query_to_user>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e7cd8c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: db_url
            obj: <function BasePostgreSQLTestClass.db_url at 0x12e7c8c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: connection_creation_params
            obj: <function BasePostgreSQLTestClass.connection_creation_params at 0x12e7c8d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: target_conn_dto
            obj: <function BaseAsyncAdapterTestClass.target_conn_dto at 0x12e7c8700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: _make_dba
            obj: <function BaseAsyncAdapterTestClass._make_dba at 0x12e7c8790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: _test_pass_db_query_to_user
            obj: <function BaseAsyncAdapterTestClass._test_pass_db_query_to_user at 0x12e7c8820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: test_pass_db_query_to_user
            obj: <function BaseAsyncAdapterTestClass.test_pass_db_query_to_user at 0x12e7c88b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d0e80>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: False
                argname: pass_db_query_to_user
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: None
                argname: expected_query
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: True
                argname: pass_db_query_to_user
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: select 1 from <hidden>
                argname: expected_query
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_pass_db_query_to_user[False-None]>, <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: test_timeout
            obj: <function BaseAsyncAdapterTestClass.test_timeout at 0x12e7c89d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d0eb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_timeout>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: sync_connection_executor
            obj: <function BaseConnectionExecutorTestClass.sync_connection_executor at 0x12e7ba8c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: async_connection_executor
            obj: <function BaseConnectionExecutorTestClass.async_connection_executor at 0x12e7baa70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: conn_exec_factory_async_env
            obj: <function ServiceFixtureTextClass.conn_exec_factory_async_env at 0x11f77caf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestAsyncPostgreSQLAdapter>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter' lenresult=7 outcome='passed'> [hook]
    genitems <Function test_pass_db_query_to_user[False-None]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pass_db_query_to_user[False-None]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pass_db_query_to_user[True-select 1 from <hidden>]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_timeout> [collection]
      pytest_itemcollected [hook]
          item: <Function test_timeout>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_tables_list> [collection]
      pytest_itemcollected [hook]
          item: <Function test_tables_list>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_tables_list_schema[test_data-expected_tables0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_tables_list_schema[test_data-expected_tables0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_tables_list_schema[test_data_partitions-expected_tables1]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_default_pass_db_query_to_user> [collection]
      pytest_itemcollected [hook]
          item: <Function test_default_pass_db_query_to_user>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_adapter.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_connection.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_connection.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_connection.py>
      find_module called for: dl_connector_postgresql_tests.db.core.test_connection [assertion]
      matched test file '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection.py' [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: annotations
            obj: _Feature((3, 7, 0, 'beta', 1), (3, 11, 0, 'alpha', 0), 16777216)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: os
            obj: <module 'os' from '/opt/homebrew/Cellar/python@3.10/3.10.14_1/Frameworks/Python.framework/Versions/3.10/lib/python3.10/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: TypeVar
            obj: <class 'typing.TypeVar'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: pytest
            obj: <module 'pytest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: ConnectionSQL
            obj: <class 'dl_core.us_connection_base.ConnectionSQL'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: DataSourceTemplate
            obj: <class 'dl_core.us_connection_base.DataSourceTemplate'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: DefaultConnectionTestClass
            obj: <class 'dl_core_testing.testcases.connection.DefaultConnectionTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: ConnectionPostgreSQL
            obj: <class 'dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: BasePostgreSQLTestClass
            obj: <class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: BaseSslPostgreSQLTestClass
            obj: <class 'dl_connector_postgresql_tests.db.core.base.BaseSslPostgreSQLTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: _CONN_TV
            obj: ~_CONN_TV
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: TestPostgreSQLConnection
            obj: <class 'dl_connector_postgresql_tests.db.core.test_connection.TestPostgreSQLConnection'>
        finish pytest_pycollect_makeitem --> <Class TestPostgreSQLConnection> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection.py>
            name: TestSslPostgreSQLConnection
            obj: <class 'dl_connector_postgresql_tests.db.core.test_connection.TestSslPostgreSQLConnection'>
        finish pytest_pycollect_makeitem --> <Class TestSslPostgreSQLConnection> [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection.py' lenresult=2 outcome='passed'> [hook]
    genitems <Class TestPostgreSQLConnection> [collection]
      pytest_collectstart [hook]
          collector: <Class TestPostgreSQLConnection>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestPostgreSQLConnection>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: do_check_data_export_flag
            obj: True
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: check_saved_connection
            obj: <function TestPostgreSQLConnection.check_saved_connection at 0x12e7c9b40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: check_data_source_templates
            obj: <function TestPostgreSQLConnection.check_data_source_templates at 0x12e7c9bd0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_get_data_source_templates_pg_partitioned
            obj: <function TestPostgreSQLConnection.test_get_data_source_templates_pg_partitioned at 0x12e7c9c60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d37c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_data_source_templates_pg_partitioned>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>, dl_core_testing.testcases.connection.DefaultConnectionTestClass[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: __annotations__
            obj: {}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e773540>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: db_url
            obj: <function BasePostgreSQLTestClass.db_url at 0x12e7c8c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: connection_creation_params
            obj: <function BasePostgreSQLTestClass.connection_creation_params at 0x12e7c8d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_make_connection
            obj: <function DefaultConnectionTestClass.test_make_connection at 0x12e7ba3b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d37c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_make_connection>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_connection_test
            obj: <function DefaultConnectionTestClass.test_connection_test at 0x12e7ba440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d3760>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_connection_test>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_connection_get_data_source_templates
            obj: <function DefaultConnectionTestClass.test_connection_get_data_source_templates at 0x12e7ba560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d3790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_connection_get_data_source_templates>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_connection_data_export_flag
            obj: <function DefaultConnectionTestClass.test_connection_data_export_flag at 0x12e7ba5f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d37c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_connection_data_export_flag>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_get_source_templates_paginated_fail_when_db_name_is_required
            obj: <function DefaultConnectionTestClass.test_get_source_templates_paginated_fail_when_db_name_is_required at 0x12e7ba680>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d3760>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_source_templates_paginated_fail_when_db_name_is_required>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_get_source_templates_paginated_fail_when_search_is_not_supported
            obj: <function DefaultConnectionTestClass.test_get_source_templates_paginated_fail_when_search_is_not_supported at 0x12e7ba710>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d3790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_source_templates_paginated_fail_when_search_is_not_supported>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_get_source_templates_paginated_fail_with_unsupported_offset
            obj: <function DefaultConnectionTestClass.test_get_source_templates_paginated_fail_with_unsupported_offset at 0x12e7ba7a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d37c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_source_templates_paginated_fail_with_unsupported_offset>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_get_source_templates_paginated_fail_with_unsupported_db_names
            obj: <function DefaultConnectionTestClass.test_get_source_templates_paginated_fail_with_unsupported_db_names at 0x12e7ba830>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7d3760>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_source_templates_paginated_fail_with_unsupported_db_names>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: test_params
            obj: RegulatedTestParams(mark_tests_skipped=None, mark_tests_failed=None, mark_features_skipped=None)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: conn_exec_factory_async_env
            obj: <function ServiceFixtureTextClass.conn_exec_factory_async_env at 0x11f77caf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLConnection>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection' lenresult=9 outcome='passed'> [hook]
    genitems <Function test_make_connection> [collection]
      pytest_itemcollected [hook]
          item: <Function test_make_connection>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_connection_test> [collection]
      pytest_itemcollected [hook]
          item: <Function test_connection_test>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_connection_get_data_source_templates> [collection]
      pytest_itemcollected [hook]
          item: <Function test_connection_get_data_source_templates>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_connection_data_export_flag> [collection]
      pytest_itemcollected [hook]
          item: <Function test_connection_data_export_flag>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_source_templates_paginated_fail_when_db_name_is_required> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_source_templates_paginated_fail_when_search_is_not_supported> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_source_templates_paginated_fail_with_unsupported_offset> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_source_templates_paginated_fail_with_unsupported_db_names> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_data_source_templates_pg_partitioned> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_data_source_templates_pg_partitioned>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class TestSslPostgreSQLConnection> [collection]
      pytest_collectstart [hook]
          collector: <Class TestSslPostgreSQLConnection>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestSslPostgreSQLConnection>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: check_saved_connection
            obj: <function TestSslPostgreSQLConnection.check_saved_connection at 0x12e7c9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: check_data_source_templates
            obj: <function TestSslPostgreSQLConnection.check_data_source_templates at 0x12e7c9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.base.BaseSslPostgreSQLTestClass'>, dl_core_testing.testcases.connection.DefaultConnectionTestClass[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: __annotations__
            obj: {}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e7cfe00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: pytestmark
            obj: [Mark(name='skipif', args=(None,), kwargs={'reason': "can't use localhost"})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: clear_ssl_folder
            obj: <function BaseSslPostgreSQLTestClass.clear_ssl_folder at 0x12e7c8f70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: check_ssl_directory_is_empty
            obj: <function BaseSslPostgreSQLTestClass.check_ssl_directory_is_empty at 0x12e7c9000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: db_url
            obj: <function BaseSslPostgreSQLTestClass.db_url at 0x12e7c9120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: connection_creation_params
            obj: <function BaseSslPostgreSQLTestClass.connection_creation_params at 0x12e7c9240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: do_check_data_export_flag
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: test_make_connection
            obj: <function DefaultConnectionTestClass.test_make_connection at 0x12e7ba3b0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7fa8c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_make_connection>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: test_connection_test
            obj: <function DefaultConnectionTestClass.test_connection_test at 0x12e7ba440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7fa8f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_connection_test>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: test_connection_get_data_source_templates
            obj: <function DefaultConnectionTestClass.test_connection_get_data_source_templates at 0x12e7ba560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7fa890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_connection_get_data_source_templates>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: test_connection_data_export_flag
            obj: <function DefaultConnectionTestClass.test_connection_data_export_flag at 0x12e7ba5f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7fa8c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_connection_data_export_flag>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: test_get_source_templates_paginated_fail_when_db_name_is_required
            obj: <function DefaultConnectionTestClass.test_get_source_templates_paginated_fail_when_db_name_is_required at 0x12e7ba680>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7fa8f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_source_templates_paginated_fail_when_db_name_is_required>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: test_get_source_templates_paginated_fail_when_search_is_not_supported
            obj: <function DefaultConnectionTestClass.test_get_source_templates_paginated_fail_when_search_is_not_supported at 0x12e7ba710>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7fa890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_source_templates_paginated_fail_when_search_is_not_supported>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: test_get_source_templates_paginated_fail_with_unsupported_offset
            obj: <function DefaultConnectionTestClass.test_get_source_templates_paginated_fail_with_unsupported_offset at 0x12e7ba7a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7fa8c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_source_templates_paginated_fail_with_unsupported_offset>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: test_get_source_templates_paginated_fail_with_unsupported_db_names
            obj: <function DefaultConnectionTestClass.test_get_source_templates_paginated_fail_with_unsupported_db_names at 0x12e7ba830>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e7fa8f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_source_templates_paginated_fail_with_unsupported_db_names>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: test_params
            obj: RegulatedTestParams(mark_tests_skipped=None, mark_tests_failed=None, mark_features_skipped=None)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: conn_exec_factory_async_env
            obj: <function ServiceFixtureTextClass.conn_exec_factory_async_env at 0x11f77caf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLConnection>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection' lenresult=8 outcome='passed'> [hook]
    genitems <Function test_make_connection> [collection]
      pytest_itemcollected [hook]
          item: <Function test_make_connection>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_connection_test> [collection]
      pytest_itemcollected [hook]
          item: <Function test_connection_test>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_connection_get_data_source_templates> [collection]
      pytest_itemcollected [hook]
          item: <Function test_connection_get_data_source_templates>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_connection_data_export_flag> [collection]
      pytest_itemcollected [hook]
          item: <Function test_connection_data_export_flag>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_source_templates_paginated_fail_when_db_name_is_required> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_source_templates_paginated_fail_when_search_is_not_supported> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_source_templates_paginated_fail_with_unsupported_offset> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_source_templates_paginated_fail_with_unsupported_db_names> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_connection_executor.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_connection_executor.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_connection_executor.py>
      find_module called for: dl_connector_postgresql_tests.db.core.test_connection_executor [assertion]
      matched test file '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection_executor.py' [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_connection_executor.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: asyncio
            obj: <module 'asyncio' from '/opt/homebrew/Cellar/python@3.10/3.10.14_1/Frameworks/Python.framework/Versions/3.10/lib/python3.10/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: os
            obj: <module 'os' from '/opt/homebrew/Cellar/python@3.10/3.10.14_1/Frameworks/Python.framework/Versions/3.10/lib/python3.10/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: Sequence
            obj: typing.Sequence
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: uuid
            obj: <module 'uuid' from '/opt/homebrew/Cellar/python@3.10/3.10.14_1/Frameworks/Python.framework/Versions/3.10/lib/python3.10/uuid.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: pytest
            obj: <module 'pytest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: pg_types
            obj: <module 'sqlalchemy.dialects.postgresql' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/sqlalchemy/dialects/postgresql/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: UserDataType
            obj: <enum 'UserDataType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: AsyncConnExecutorBase
            obj: <class 'dl_core.connection_executors.async_base.AsyncConnExecutorBase'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: SyncConnExecutorBase
            obj: <class 'dl_core.connection_executors.sync_base.SyncConnExecutorBase'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: DBIdent
            obj: <class 'dl_core.connection_models.common_models.DBIdent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: Db
            obj: <class 'dl_core_testing.database.Db'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: DefaultAsyncConnectionExecutorTestSuite
            obj: <class 'dl_core_testing.testcases.connection_executor.DefaultAsyncConnectionExecutorTestSuite'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: DefaultSyncAsyncConnectionExecutorCheckBase
            obj: <class 'dl_core_testing.testcases.connection_executor.DefaultSyncAsyncConnectionExecutorCheckBase'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: DefaultSyncConnectionExecutorTestSuite
            obj: <class 'dl_core_testing.testcases.connection_executor.DefaultSyncConnectionExecutorTestSuite'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: CITEXT
            obj: <class 'dl_sqlalchemy_postgres.base.CITEXT'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: RegulatedTestParams
            obj: <class 'dl_testing.regulated_test.RegulatedTestParams'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: ConnectionPostgreSQL
            obj: <class 'dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: CoreConnectionSettings
            obj: <class 'dl_connector_postgresql_tests.db.config.CoreConnectionSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: BasePostgreSQLTestClass
            obj: <class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: BaseSslPostgreSQLTestClass
            obj: <class 'dl_connector_postgresql_tests.db.core.base.BaseSslPostgreSQLTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: PostgreSQLSyncAsyncConnectionExecutorCheckBase
            obj: <class 'dl_connector_postgresql_tests.db.core.test_connection_executor.PostgreSQLSyncAsyncConnectionExecutorCheckBase'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: TestPostgreSQLSyncConnectionExecutor
            obj: <class 'dl_connector_postgresql_tests.db.core.test_connection_executor.TestPostgreSQLSyncConnectionExecutor'>
        finish pytest_pycollect_makeitem --> <Class TestPostgreSQLSyncConnectionExecutor> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: TestPostgreSQLAsyncConnectionExecutor
            obj: <class 'dl_connector_postgresql_tests.db.core.test_connection_executor.TestPostgreSQLAsyncConnectionExecutor'>
        finish pytest_pycollect_makeitem --> <Class TestPostgreSQLAsyncConnectionExecutor> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: TestSslPostgreSQLSyncConnectionExecutor
            obj: <class 'dl_connector_postgresql_tests.db.core.test_connection_executor.TestSslPostgreSQLSyncConnectionExecutor'>
        finish pytest_pycollect_makeitem --> <Class TestSslPostgreSQLSyncConnectionExecutor> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_connection_executor.py>
            name: TestSslPostgreSQLAsyncConnectionExecutor
            obj: <class 'dl_connector_postgresql_tests.db.core.test_connection_executor.TestSslPostgreSQLAsyncConnectionExecutor'>
        finish pytest_pycollect_makeitem --> <Class TestSslPostgreSQLAsyncConnectionExecutor> [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py' lenresult=4 outcome='passed'> [hook]
    genitems <Class TestPostgreSQLSyncConnectionExecutor> [collection]
      pytest_collectstart [hook]
          collector: <Class TestPostgreSQLSyncConnectionExecutor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestPostgreSQLSyncConnectionExecutor>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_params
            obj: RegulatedTestParams(mark_tests_skipped={<function DefaultAsyncConnectionExecutorTestSuite.test_table_exists at 0x12e7c81f0>: ''}, mark_tests_failed=None, mark_features_skipped=None)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: get_schemas_for_type_recognition
            obj: <function TestPostgreSQLSyncConnectionExecutor.get_schemas_for_type_recognition at 0x12e7ca3b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.test_connection_executor.PostgreSQLSyncAsyncConnectionExecutorCheckBase'>, dl_core_testing.testcases.connection_executor.DefaultSyncConnectionExecutorTestSuite[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: __annotations__
            obj: {}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_table_exists
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_table_exists at 0x12e7ca440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806860>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_table_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e809800>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: pytestmark
            obj: [Mark(name='usefixtures', args=('enabled_citext_extension',), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: db_ident
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.db_ident at 0x12e7c9900>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: check_db_version
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.check_db_version at 0x12e7ca200>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: enabled_citext_extension
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.enabled_citext_extension at 0x12e7ca320>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_closing_sql_sessions
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_closing_sql_sessions at 0x12e7c8550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_closing_sql_sessions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: db_url
            obj: <function BasePostgreSQLTestClass.db_url at 0x12e7c8c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: connection_creation_params
            obj: <function BasePostgreSQLTestClass.connection_creation_params at 0x12e7c8d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: conn_exec_factory_async_env
            obj: <function DefaultSyncConnectionExecutorTestSuite.conn_exec_factory_async_env at 0x12e7bb130>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_get_db_version
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_get_db_version at 0x12e7bb1c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806860>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_db_version>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_test
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_test at 0x12e7bb250>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_test>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_get_table_names
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_get_table_names at 0x12e7bb2e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806830>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_names>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_table_not_exists
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_table_not_exists at 0x12e7bb400>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806860>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_table_not_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: CD
            obj: <class 'dl_core_testing.testcases.connection_executor.DefaultSyncConnectionExecutorTestSuite.CD'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_type_recognition
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_type_recognition at 0x12e7bb760>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806830>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_type_recognition>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_simple_select
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_simple_select at 0x12e7bbbe0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806860>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_simple_select>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_error_on_select_from_nonexistent_source
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_error_on_select_from_nonexistent_source at 0x12e7bbc70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_error_on_select_from_nonexistent_source>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: subselect_query_for_schema_test
            obj: (SELECT 1 AS num) AS source
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_get_table_schema_info
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_get_table_schema_info at 0x12e7bbd90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806860>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: table
                argname: case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: subselect
                argname: case
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_schema_info[table]>, <Function test_get_table_schema_info[subselect]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: test_get_table_schema_info_for_nonexistent_table
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_get_table_schema_info_for_nonexistent_table at 0x12e7bbe20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e806890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_schema_info_for_nonexistent_table>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: existing_table_ident
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.existing_table_ident at 0x12e7bac20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: nonexistent_table_ident
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.nonexistent_table_ident at 0x12e7bad40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: query_for_session_check
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.query_for_session_check at 0x12e7baef0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: check_closing_sql_sessions
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.check_closing_sql_sessions at 0x12e7bb010>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: sync_connection_executor
            obj: <function BaseConnectionExecutorTestClass.sync_connection_executor at 0x12e7ba8c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: async_connection_executor
            obj: <function BaseConnectionExecutorTestClass.async_connection_executor at 0x12e7baa70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSyncConnectionExecutor>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py::TestPostgreSQLSyncConnectionExecutor' lenresult=12 outcome='passed'> [hook]
    genitems <Function test_get_db_version> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_db_version>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_test> [collection]
      pytest_itemcollected [hook]
          item: <Function test_test>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_names> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_names>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_table_not_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_table_not_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_type_recognition> [collection]
      pytest_itemcollected [hook]
          item: <Function test_type_recognition>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_simple_select> [collection]
      pytest_itemcollected [hook]
          item: <Function test_simple_select>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_error_on_select_from_nonexistent_source> [collection]
      pytest_itemcollected [hook]
          item: <Function test_error_on_select_from_nonexistent_source>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info[table]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info[table]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info[subselect]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info[subselect]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info_for_nonexistent_table> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info_for_nonexistent_table>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_closing_sql_sessions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_closing_sql_sessions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_table_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_table_exists>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py::TestPostgreSQLSyncConnectionExecutor' lenresult=12 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class TestPostgreSQLAsyncConnectionExecutor> [collection]
      pytest_collectstart [hook]
          collector: <Class TestPostgreSQLAsyncConnectionExecutor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestPostgreSQLAsyncConnectionExecutor>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_params
            obj: RegulatedTestParams(mark_tests_skipped={<function DefaultAsyncConnectionExecutorTestSuite.test_table_exists at 0x12e7c81f0>: 'Not implemented', <function DefaultAsyncConnectionExecutorTestSuite.test_table_not_exists at 0x12e7c8280>: 'Not implemented', <function DefaultAsyncConnectionExecutorTestSuite.test_get_table_schema_info at 0x12e7c85e0>: 'Not implemented', <function DefaultAsyncConnectionExecutorTestSuite.test_get_table_schema_info_for_nonexistent_table at 0x12e7c8670>: 'Not implemented'}, mark_tests_failed=None, mark_features_skipped=None)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.test_connection_executor.PostgreSQLSyncAsyncConnectionExecutorCheckBase'>, dl_core_testing.testcases.connection_executor.DefaultAsyncConnectionExecutorTestSuite[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: __annotations__
            obj: {}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_table_exists
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_table_exists at 0x12e7ca5f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8172b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_table_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_table_not_exists
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_table_not_exists at 0x12e7ca680>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8172e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_table_not_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_get_table_schema_info
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_get_table_schema_info at 0x12e7ca710>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e817310>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_schema_info>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_get_table_schema_info_for_nonexistent_table
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_get_table_schema_info_for_nonexistent_table at 0x12e7ca7a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8172b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_schema_info_for_nonexistent_table>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e7ff740>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: db_ident
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.db_ident at 0x12e7c9900>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: check_db_version
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.check_db_version at 0x12e7ca200>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: enabled_citext_extension
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.enabled_citext_extension at 0x12e7ca320>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_closing_sql_sessions
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_closing_sql_sessions at 0x12e7c8550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8172b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_closing_sql_sessions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: db_url
            obj: <function BasePostgreSQLTestClass.db_url at 0x12e7c8c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: connection_creation_params
            obj: <function BasePostgreSQLTestClass.connection_creation_params at 0x12e7c8d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: conn_exec_factory_async_env
            obj: <function DefaultAsyncConnectionExecutorTestSuite.conn_exec_factory_async_env at 0x12e7bbf40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_get_db_version
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_get_db_version at 0x12e7c8040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e817310>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_db_version>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_test
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_test at 0x12e7c80d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8172b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_test>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_multiple_connection_test
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_multiple_connection_test at 0x12e7c8160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8172e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_multiple_connection_test>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_simple_select
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_simple_select at 0x12e7c8310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e817310>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_simple_select>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_select_data
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_select_data at 0x12e7c83a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8172b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_select_data>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_cast_row_to_output
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_cast_row_to_output at 0x12e7c8430>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e817430>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_cast_row_to_output>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: test_error_on_select_from_nonexistent_source
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_error_on_select_from_nonexistent_source at 0x12e7c84c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e817310>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_error_on_select_from_nonexistent_source>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: existing_table_ident
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.existing_table_ident at 0x12e7bac20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: nonexistent_table_ident
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.nonexistent_table_ident at 0x12e7bad40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: query_for_session_check
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.query_for_session_check at 0x12e7baef0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: check_closing_sql_sessions
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.check_closing_sql_sessions at 0x12e7bb010>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: sync_connection_executor
            obj: <function BaseConnectionExecutorTestClass.sync_connection_executor at 0x12e7ba8c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: async_connection_executor
            obj: <function BaseConnectionExecutorTestClass.async_connection_executor at 0x12e7baa70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLAsyncConnectionExecutor>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py::TestPostgreSQLAsyncConnectionExecutor' lenresult=12 outcome='passed'> [hook]
    genitems <Function test_get_db_version> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_db_version>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_test> [collection]
      pytest_itemcollected [hook]
          item: <Function test_test>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_multiple_connection_test> [collection]
      pytest_itemcollected [hook]
          item: <Function test_multiple_connection_test>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_simple_select> [collection]
      pytest_itemcollected [hook]
          item: <Function test_simple_select>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_select_data> [collection]
      pytest_itemcollected [hook]
          item: <Function test_select_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_cast_row_to_output> [collection]
      pytest_itemcollected [hook]
          item: <Function test_cast_row_to_output>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_error_on_select_from_nonexistent_source> [collection]
      pytest_itemcollected [hook]
          item: <Function test_error_on_select_from_nonexistent_source>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_closing_sql_sessions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_closing_sql_sessions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_table_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_table_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_table_not_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_table_not_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info_for_nonexistent_table> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info_for_nonexistent_table>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py::TestPostgreSQLAsyncConnectionExecutor' lenresult=12 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class TestSslPostgreSQLSyncConnectionExecutor> [collection]
      pytest_collectstart [hook]
          collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_test
            obj: <function TestSslPostgreSQLSyncConnectionExecutor.test_test at 0x12e7ca830>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827ee0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_test>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: __annotations__
            obj: {}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_table_exists
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_table_exists at 0x12e7ca8c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827ee0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_table_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e7dd100>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: pytestmark
            obj: [Mark(name='skipif', args=(None,), kwargs={'reason': "can't use localhost"})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: clear_ssl_folder
            obj: <function BaseSslPostgreSQLTestClass.clear_ssl_folder at 0x12e7c8f70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: check_ssl_directory_is_empty
            obj: <function BaseSslPostgreSQLTestClass.check_ssl_directory_is_empty at 0x12e7c9000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: db_url
            obj: <function BaseSslPostgreSQLTestClass.db_url at 0x12e7c9120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: connection_creation_params
            obj: <function BaseSslPostgreSQLTestClass.connection_creation_params at 0x12e7c9240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_params
            obj: RegulatedTestParams(mark_tests_skipped={<function DefaultAsyncConnectionExecutorTestSuite.test_table_exists at 0x12e7c81f0>: ''}, mark_tests_failed=None, mark_features_skipped=None)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: get_schemas_for_type_recognition
            obj: <function TestPostgreSQLSyncConnectionExecutor.get_schemas_for_type_recognition at 0x12e7ca3b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.test_connection_executor.PostgreSQLSyncAsyncConnectionExecutorCheckBase'>, dl_core_testing.testcases.connection_executor.DefaultSyncConnectionExecutorTestSuite[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: db_ident
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.db_ident at 0x12e7c9900>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: check_db_version
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.check_db_version at 0x12e7ca200>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: enabled_citext_extension
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.enabled_citext_extension at 0x12e7ca320>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_closing_sql_sessions
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_closing_sql_sessions at 0x12e7c8550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827eb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_closing_sql_sessions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: conn_exec_factory_async_env
            obj: <function DefaultSyncConnectionExecutorTestSuite.conn_exec_factory_async_env at 0x12e7bb130>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_get_db_version
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_get_db_version at 0x12e7bb1c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827eb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_db_version>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_get_table_names
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_get_table_names at 0x12e7bb2e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827ee0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_names>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_table_not_exists
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_table_not_exists at 0x12e7bb400>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827e80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_table_not_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: CD
            obj: <class 'dl_core_testing.testcases.connection_executor.DefaultSyncConnectionExecutorTestSuite.CD'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_type_recognition
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_type_recognition at 0x12e7bb760>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827ee0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_type_recognition>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_simple_select
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_simple_select at 0x12e7bbbe0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827e80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_simple_select>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_error_on_select_from_nonexistent_source
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_error_on_select_from_nonexistent_source at 0x12e7bbc70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827eb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_error_on_select_from_nonexistent_source>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: subselect_query_for_schema_test
            obj: (SELECT 1 AS num) AS source
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_get_table_schema_info
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_get_table_schema_info at 0x12e7bbd90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827e80>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: table
                argname: case
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: subselect
                argname: case
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_schema_info[table]>, <Function test_get_table_schema_info[subselect]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: test_get_table_schema_info_for_nonexistent_table
            obj: <function DefaultSyncConnectionExecutorTestSuite.test_get_table_schema_info_for_nonexistent_table at 0x12e7bbe20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e827eb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_schema_info_for_nonexistent_table>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: existing_table_ident
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.existing_table_ident at 0x12e7bac20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: nonexistent_table_ident
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.nonexistent_table_ident at 0x12e7bad40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: query_for_session_check
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.query_for_session_check at 0x12e7baef0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: check_closing_sql_sessions
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.check_closing_sql_sessions at 0x12e7bb010>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: sync_connection_executor
            obj: <function BaseConnectionExecutorTestClass.sync_connection_executor at 0x12e7ba8c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: async_connection_executor
            obj: <function BaseConnectionExecutorTestClass.async_connection_executor at 0x12e7baa70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLSyncConnectionExecutor>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py::TestSslPostgreSQLSyncConnectionExecutor' lenresult=12 outcome='passed'> [hook]
    genitems <Function test_get_db_version> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_db_version>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_names> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_names>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_table_not_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_table_not_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_type_recognition> [collection]
      pytest_itemcollected [hook]
          item: <Function test_type_recognition>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_simple_select> [collection]
      pytest_itemcollected [hook]
          item: <Function test_simple_select>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_error_on_select_from_nonexistent_source> [collection]
      pytest_itemcollected [hook]
          item: <Function test_error_on_select_from_nonexistent_source>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info[table]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info[table]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info[subselect]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info[subselect]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info_for_nonexistent_table> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info_for_nonexistent_table>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_closing_sql_sessions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_closing_sql_sessions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_test> [collection]
      pytest_itemcollected [hook]
          item: <Function test_test>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_table_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_table_exists>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py::TestSslPostgreSQLSyncConnectionExecutor' lenresult=12 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class TestSslPostgreSQLAsyncConnectionExecutor> [collection]
      pytest_collectstart [hook]
          collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_test
            obj: <function TestSslPostgreSQLAsyncConnectionExecutor.test_test at 0x12e7ca950>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e844850>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_test>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_multiple_connection_test
            obj: <function TestSslPostgreSQLAsyncConnectionExecutor.test_multiple_connection_test at 0x12e7ca9e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8447f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_multiple_connection_test>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: __annotations__
            obj: {}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_table_exists
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_table_exists at 0x12e7caa70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8447f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_table_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_table_not_exists
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_table_not_exists at 0x12e7cab00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e844820>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_table_not_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_get_table_schema_info
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_get_table_schema_info at 0x12e7cab90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e844850>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_schema_info>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_get_table_schema_info_for_nonexistent_table
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_get_table_schema_info_for_nonexistent_table at 0x12e7cac20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8447f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_table_schema_info_for_nonexistent_table>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e809c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: pytestmark
            obj: [Mark(name='skipif', args=(None,), kwargs={'reason': "can't use localhost"})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: clear_ssl_folder
            obj: <function BaseSslPostgreSQLTestClass.clear_ssl_folder at 0x12e7c8f70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: check_ssl_directory_is_empty
            obj: <function BaseSslPostgreSQLTestClass.check_ssl_directory_is_empty at 0x12e7c9000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: db_url
            obj: <function BaseSslPostgreSQLTestClass.db_url at 0x12e7c9120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: connection_creation_params
            obj: <function BaseSslPostgreSQLTestClass.connection_creation_params at 0x12e7c9240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_params
            obj: RegulatedTestParams(mark_tests_skipped={<function DefaultAsyncConnectionExecutorTestSuite.test_table_exists at 0x12e7c81f0>: 'Not implemented', <function DefaultAsyncConnectionExecutorTestSuite.test_table_not_exists at 0x12e7c8280>: 'Not implemented', <function DefaultAsyncConnectionExecutorTestSuite.test_get_table_schema_info at 0x12e7c85e0>: 'Not implemented', <function DefaultAsyncConnectionExecutorTestSuite.test_get_table_schema_info_for_nonexistent_table at 0x12e7c8670>: 'Not implemented'}, mark_tests_failed=None, mark_features_skipped=None)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.test_connection_executor.PostgreSQLSyncAsyncConnectionExecutorCheckBase'>, dl_core_testing.testcases.connection_executor.DefaultAsyncConnectionExecutorTestSuite[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: db_ident
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.db_ident at 0x12e7c9900>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: check_db_version
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.check_db_version at 0x12e7ca200>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: enabled_citext_extension
            obj: <function PostgreSQLSyncAsyncConnectionExecutorCheckBase.enabled_citext_extension at 0x12e7ca320>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_closing_sql_sessions
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_closing_sql_sessions at 0x12e7c8550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e844820>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_closing_sql_sessions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: conn_exec_factory_async_env
            obj: <function DefaultAsyncConnectionExecutorTestSuite.conn_exec_factory_async_env at 0x12e7bbf40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_get_db_version
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_get_db_version at 0x12e7c8040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e844820>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_db_version>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_simple_select
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_simple_select at 0x12e7c8310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e844850>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_simple_select>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_select_data
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_select_data at 0x12e7c83a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8447f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_select_data>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_cast_row_to_output
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_cast_row_to_output at 0x12e7c8430>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e844820>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_cast_row_to_output>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: test_error_on_select_from_nonexistent_source
            obj: <function DefaultAsyncConnectionExecutorTestSuite.test_error_on_select_from_nonexistent_source at 0x12e7c84c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e844850>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_error_on_select_from_nonexistent_source>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: existing_table_ident
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.existing_table_ident at 0x12e7bac20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: nonexistent_table_ident
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.nonexistent_table_ident at 0x12e7bad40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: query_for_session_check
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.query_for_session_check at 0x12e7baef0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: check_closing_sql_sessions
            obj: <function DefaultSyncAsyncConnectionExecutorCheckBase.check_closing_sql_sessions at 0x12e7bb010>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: sync_connection_executor
            obj: <function BaseConnectionExecutorTestClass.sync_connection_executor at 0x12e7ba8c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: async_connection_executor
            obj: <function BaseConnectionExecutorTestClass.async_connection_executor at 0x12e7baa70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestSslPostgreSQLAsyncConnectionExecutor>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py::TestSslPostgreSQLAsyncConnectionExecutor' lenresult=12 outcome='passed'> [hook]
    genitems <Function test_get_db_version> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_db_version>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_simple_select> [collection]
      pytest_itemcollected [hook]
          item: <Function test_simple_select>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_select_data> [collection]
      pytest_itemcollected [hook]
          item: <Function test_select_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_cast_row_to_output> [collection]
      pytest_itemcollected [hook]
          item: <Function test_cast_row_to_output>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_error_on_select_from_nonexistent_source> [collection]
      pytest_itemcollected [hook]
          item: <Function test_error_on_select_from_nonexistent_source>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_closing_sql_sessions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_closing_sql_sessions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_test> [collection]
      pytest_itemcollected [hook]
          item: <Function test_test>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_multiple_connection_test> [collection]
      pytest_itemcollected [hook]
          item: <Function test_multiple_connection_test>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_table_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_table_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_table_not_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_table_not_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_table_schema_info_for_nonexistent_table> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_table_schema_info_for_nonexistent_table>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py::TestSslPostgreSQLAsyncConnectionExecutor' lenresult=12 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_connection_executor.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_data_source.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_data_source.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_data_source.py>
      find_module called for: dl_connector_postgresql_tests.db.core.test_data_source [assertion]
      matched test file '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_data_source.py' [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_data_source.py [assertion]
      matched marked file 'dl_core_testing.testcases.data_source' (from 'dl_core_testing.testcases') [assertion]
      find_module called for: dl_core_testing.testcases.data_source [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/testcases/data_source.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: pytest
            obj: <module 'pytest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: RawSQLLevel
            obj: <enum 'RawSQLLevel'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: UserDataType
            obj: <enum 'UserDataType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: StandardSchemaSQLDataSourceSpec
            obj: <class 'dl_core.data_source_spec.sql.StandardSchemaSQLDataSourceSpec'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: SubselectDataSourceSpec
            obj: <class 'dl_core.data_source_spec.sql.SubselectDataSourceSpec'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: TABLE_SPEC_SAMPLE_SUPERSTORE
            obj: FixtureTableSpec(csv_name='sample_superstore.csv', table_schema=(('category', <UserDataType.string: 1>), ('city', <UserDataType.string: 1>), ('country', <UserDataType.string: 1>), ('customer_id', <UserDataType.string: 1>), ('customer_name', <UserDataType.string: 1>), ('discount', <UserDataType.float: 3>), ('order_date', <UserDataType.date: 4>), ('order_id', <UserDataType.string: 1>), ('postal_code', <UserDataType.integer: 2>), ('product_id', <UserDataType.string: 1>), ('product_name', <UserDataType.string: 1>), ('profit', <UserDataType.float: 3>), ('quantity', <UserDataType.integer: 2>), ('region', <UserDataType.string: 1>), ('row_id', <UserDataType.integer: 2>), ('sales', <UserDataType.float: 3>), ('segment', <UserDataType.string: 1>), ('ship_date', <UserDataType.date: 4>), ('ship_mode', <UserDataType.string: 1>), ('state', <UserDataType.string: 1>), ('sub_category', <UserDataType.string: 1>)), nullable=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: DataSourceTestByViewClass
            obj: <class 'dl_core_testing.testcases.data_source.DataSourceTestByViewClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: DefaultDataSourceTestClass
            obj: <class 'dl_core_testing.testcases.data_source.DefaultDataSourceTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: SOURCE_TYPE_PG_SUBSELECT
            obj: DataSourceType('PG_SUBSELECT')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: SOURCE_TYPE_PG_TABLE
            obj: DataSourceType('PG_TABLE')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: PostgreSQLDataSource
            obj: <class 'dl_connector_postgresql.core.postgresql.data_source.PostgreSQLDataSource'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: PostgreSQLSubselectDataSource
            obj: <class 'dl_connector_postgresql.core.postgresql.data_source.PostgreSQLSubselectDataSource'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: ConnectionPostgreSQL
            obj: <class 'dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: SUBSELECT_QUERY_FULL
            obj: 
with base as (
    select generate_series(0, 6) as number
)
select
    number,
    'test' || number::text as str,
    number::bool as num_bool,
    number::text::bytea as num_bytea,
    number::char as num_char,
    -- number::name as num_name,
    number::int8 as num_int8,
    number::int2 as num_int2,
    number::int4 as num_int4,
    number::text as num_text,
    number::oid as num_oid,
    number::text::json as num_json,
    -- number::text::jsonb as num_jsonb, -- tests-pg too old
    number::float4 as num_float4,
    number::float8 as num_float8,
    number::numeric as num_numeric,
    (number || ' second')::interval as num_interval,
    number::varchar(12) as num_varchar,
    ('2020-01-0' || (number + 1))::date as num_date,
    ('00:01:0' || number)::time as num_time,
    ('2020-01-01T00:00:0' || number)::timestamp as num_timestamp,
    ('2020-01-01T00:00:0' || number)::timestamptz as num_timestamptz,
    ARRAY[number, 2, 3] as num_array,
    gen_random_uuid() as some_uuid,
    'nan'::double precision + number as some_nan
from base
limit 10

        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: BasePostgreSQLTestClass
            obj: <class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: TestPostgreSQLTableDataSource
            obj: <class 'dl_connector_postgresql_tests.db.core.test_data_source.TestPostgreSQLTableDataSource'>
        finish pytest_pycollect_makeitem --> <Class TestPostgreSQLTableDataSource> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: TestPostgreSQLSubselectDataSource
            obj: <class 'dl_connector_postgresql_tests.db.core.test_data_source.TestPostgreSQLSubselectDataSource'>
        finish pytest_pycollect_makeitem --> <Class TestPostgreSQLSubselectDataSource> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_data_source.py>
            name: TestPostgreSQLSubselectByView
            obj: <class 'dl_connector_postgresql_tests.db.core.test_data_source.TestPostgreSQLSubselectByView'>
        finish pytest_pycollect_makeitem --> <Class TestPostgreSQLSubselectByView> [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_data_source.py' lenresult=3 outcome='passed'> [hook]
    genitems <Class TestPostgreSQLTableDataSource> [collection]
      pytest_collectstart [hook]
          collector: <Class TestPostgreSQLTableDataSource>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestPostgreSQLTableDataSource>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: DSRC_CLS
            obj: <class 'dl_connector_postgresql.core.postgresql.data_source.PostgreSQLDataSource'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: initial_data_source_spec
            obj: <function TestPostgreSQLTableDataSource.initial_data_source_spec at 0x12e7cb760>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: get_expected_simplified_schema
            obj: <function TestPostgreSQLTableDataSource.get_expected_simplified_schema at 0x12e854280>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>, dl_core_testing.testcases.data_source.DefaultDataSourceTestClass[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL, dl_core.data_source_spec.sql.StandardSchemaSQLDataSourceSpec, dl_connector_postgresql.core.postgresql.data_source.PostgreSQLDataSource])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e770bc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: db_url
            obj: <function BasePostgreSQLTestClass.db_url at 0x12e7c8c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: connection_creation_params
            obj: <function BasePostgreSQLTestClass.connection_creation_params at 0x12e7c8d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: test_data_source_exists
            obj: <function DefaultDataSourceTestClass.test_data_source_exists at 0x12e7cba30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e84e2c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_data_source_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: test_get_raw_schema
            obj: <function DefaultDataSourceTestClass.test_get_raw_schema at 0x12e7cbb50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e84e2f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_raw_schema>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: _check_migration_dtos
            obj: <function DefaultDataSourceTestClass._check_migration_dtos at 0x12e7cbbe0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: _check_migration_dtos_table
            obj: <function DefaultDataSourceTestClass._check_migration_dtos_table at 0x12e7cbc70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: _check_migration_dtos_subselect
            obj: <function DefaultDataSourceTestClass._check_migration_dtos_subselect at 0x12e7cbd00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: test_export_dsrc_migration_dtos
            obj: <function DefaultDataSourceTestClass.test_export_dsrc_migration_dtos at 0x12e7cbd90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e84e320>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_export_dsrc_migration_dtos>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: test_get_cache_key_part
            obj: <function DefaultDataSourceTestClass.test_get_cache_key_part at 0x12e7cbe20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e84e2c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_cache_key_part>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: __annotations__
            obj: {'DSRC_CLS': 'ClassVar[type[_DSRC_TV]]'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: data_source
            obj: <function BaseDataSourceTestClass.data_source at 0x12e7cb9a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: conn_exec_factory_async_env
            obj: <function ServiceFixtureTextClass.conn_exec_factory_async_env at 0x11f77caf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLTableDataSource>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_data_source.py::TestPostgreSQLTableDataSource' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_data_source_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_data_source_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_raw_schema> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_raw_schema>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_export_dsrc_migration_dtos> [collection]
      pytest_itemcollected [hook]
          item: <Function test_export_dsrc_migration_dtos>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_cache_key_part> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_cache_key_part>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_data_source.py::TestPostgreSQLTableDataSource' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class TestPostgreSQLSubselectDataSource> [collection]
      pytest_collectstart [hook]
          collector: <Class TestPostgreSQLSubselectDataSource>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestPostgreSQLSubselectDataSource>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: DSRC_CLS
            obj: <class 'dl_connector_postgresql.core.postgresql.data_source.PostgreSQLSubselectDataSource'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: raw_sql_level
            obj: RawSQLLevel.subselect
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: initial_data_source_spec
            obj: <function TestPostgreSQLSubselectDataSource.initial_data_source_spec at 0x12e8543a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: get_expected_simplified_schema
            obj: <function TestPostgreSQLSubselectDataSource.get_expected_simplified_schema at 0x12e854430>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>, dl_core_testing.testcases.data_source.DefaultDataSourceTestClass[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL, dl_core.data_source_spec.sql.SubselectDataSourceSpec, dl_connector_postgresql.core.postgresql.data_source.PostgreSQLSubselectDataSource])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e84a200>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: db_url
            obj: <function BasePostgreSQLTestClass.db_url at 0x12e7c8c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: connection_creation_params
            obj: <function BasePostgreSQLTestClass.connection_creation_params at 0x12e7c8d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: test_data_source_exists
            obj: <function DefaultDataSourceTestClass.test_data_source_exists at 0x12e7cba30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8681c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_data_source_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: test_get_raw_schema
            obj: <function DefaultDataSourceTestClass.test_get_raw_schema at 0x12e7cbb50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8681f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_raw_schema>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: _check_migration_dtos
            obj: <function DefaultDataSourceTestClass._check_migration_dtos at 0x12e7cbbe0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: _check_migration_dtos_table
            obj: <function DefaultDataSourceTestClass._check_migration_dtos_table at 0x12e7cbc70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: _check_migration_dtos_subselect
            obj: <function DefaultDataSourceTestClass._check_migration_dtos_subselect at 0x12e7cbd00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: test_export_dsrc_migration_dtos
            obj: <function DefaultDataSourceTestClass.test_export_dsrc_migration_dtos at 0x12e7cbd90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e868190>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_export_dsrc_migration_dtos>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: test_get_cache_key_part
            obj: <function DefaultDataSourceTestClass.test_get_cache_key_part at 0x12e7cbe20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8681c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_cache_key_part>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: __annotations__
            obj: {'DSRC_CLS': 'ClassVar[type[_DSRC_TV]]'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: data_source
            obj: <function BaseDataSourceTestClass.data_source at 0x12e7cb9a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: conn_exec_factory_async_env
            obj: <function ServiceFixtureTextClass.conn_exec_factory_async_env at 0x11f77caf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectDataSource>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_data_source.py::TestPostgreSQLSubselectDataSource' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_data_source_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_data_source_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_raw_schema> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_raw_schema>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_export_dsrc_migration_dtos> [collection]
      pytest_itemcollected [hook]
          item: <Function test_export_dsrc_migration_dtos>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_cache_key_part> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_cache_key_part>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_data_source.py::TestPostgreSQLSubselectDataSource' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class TestPostgreSQLSubselectByView> [collection]
      pytest_collectstart [hook]
          collector: <Class TestPostgreSQLSubselectByView>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestPostgreSQLSubselectByView>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: DSRC_CLS
            obj: <class 'dl_connector_postgresql.core.postgresql.data_source.PostgreSQLSubselectDataSource'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: raw_sql_level
            obj: RawSQLLevel.subselect
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: initial_data_source_spec
            obj: <function TestPostgreSQLSubselectByView.initial_data_source_spec at 0x12e854550>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>, dl_core_testing.testcases.data_source.DataSourceTestByViewClass[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL, dl_core.data_source_spec.sql.SubselectDataSourceSpec, dl_connector_postgresql.core.postgresql.data_source.PostgreSQLSubselectDataSource])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e84a2c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: db_url
            obj: <function BasePostgreSQLTestClass.db_url at 0x12e7c8c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: connection_creation_params
            obj: <function BasePostgreSQLTestClass.connection_creation_params at 0x12e7c8d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: postprocess_view_schema_column
            obj: <function DataSourceTestByViewClass.postprocess_view_schema_column at 0x12e7cbeb0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: postprocess_view_schema
            obj: <function DataSourceTestByViewClass.postprocess_view_schema at 0x12e7cbf40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: subselect_view
            obj: <function DataSourceTestByViewClass.subselect_view at 0x12e8540d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: test_view_from_subselect
            obj: <function DataSourceTestByViewClass.test_view_from_subselect at 0x12e854160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e86a260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_view_from_subselect>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: __annotations__
            obj: {'DSRC_CLS': 'ClassVar[type[_DSRC_TV]]'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: data_source
            obj: <function BaseDataSourceTestClass.data_source at 0x12e7cb9a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: conn_exec_factory_async_env
            obj: <function ServiceFixtureTextClass.conn_exec_factory_async_env at 0x11f77caf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLSubselectByView>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_data_source.py::TestPostgreSQLSubselectByView' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_view_from_subselect> [collection]
      pytest_itemcollected [hook]
          item: <Function test_view_from_subselect>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_data_source.py::TestPostgreSQLSubselectByView' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_data_source.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_dataset.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_dataset.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_dataset.py>
      find_module called for: dl_connector_postgresql_tests.db.core.test_dataset [assertion]
      matched test file '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_dataset.py' [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_dataset.py [assertion]
      matched marked file 'dl_core_testing.testcases.dataset' (from 'dl_core_testing.testcases') [assertion]
      find_module called for: dl_core_testing.testcases.dataset [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/testcases/dataset.py [assertion]
      matched marked file 'dl_core_testing.data' (from 'dl_core_testing.data') [assertion]
      find_module called for: dl_core_testing.data [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/data.py [assertion]
      matched marked file 'dl_core_testing.dataset' (from 'dl_core_testing.dataset') [assertion]
      find_module called for: dl_core_testing.dataset [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/dataset.py [assertion]
      matched marked file 'dl_core_testing.dataset_wrappers' (from 'dl_core_testing.dataset_wrappers') [assertion]
      find_module called for: dl_core_testing.dataset_wrappers [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/dataset_wrappers.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dataset.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dataset.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dataset.py>
            name: DefaultDatasetTestSuite
            obj: <class 'dl_core_testing.testcases.dataset.DefaultDatasetTestSuite'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dataset.py>
            name: RegulatedTestParams
            obj: <class 'dl_testing.regulated_test.RegulatedTestParams'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dataset.py>
            name: SOURCE_TYPE_PG_TABLE
            obj: DataSourceType('PG_TABLE')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dataset.py>
            name: ConnectionPostgreSQL
            obj: <class 'dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dataset.py>
            name: BasePostgreSQLTestClass
            obj: <class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_dataset.py>
            name: TestPostgreSQLDataset
            obj: <class 'dl_connector_postgresql_tests.db.core.test_dataset.TestPostgreSQLDataset'>
        finish pytest_pycollect_makeitem --> <Class TestPostgreSQLDataset> [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_dataset.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestPostgreSQLDataset> [collection]
      pytest_collectstart [hook]
          collector: <Class TestPostgreSQLDataset>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestPostgreSQLDataset>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: source_type
            obj: DataSourceType('PG_TABLE')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: test_params
            obj: RegulatedTestParams(mark_tests_skipped=None, mark_tests_failed={<function DefaultDatasetTestSuite.test_get_param_hash at 0x12e890d30>: 'db_name in dsrc'}, mark_features_skipped=None)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: __orig_bases__
            obj: (<class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>, dl_core_testing.testcases.dataset.DefaultDatasetTestSuite[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL])
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: __annotations__
            obj: {}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: test_get_param_hash
            obj: <function DefaultDatasetTestSuite.test_get_param_hash at 0x12e890d30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e87d060>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_param_hash>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e872080>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: db_url
            obj: <function BasePostgreSQLTestClass.db_url at 0x12e7c8c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: connection_creation_params
            obj: <function BasePostgreSQLTestClass.connection_creation_params at 0x12e7c8d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: _check_simple_select
            obj: <function DefaultDatasetTestSuite._check_simple_select at 0x12e890b80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: test_simple_select
            obj: <function DefaultDatasetTestSuite.test_simple_select at 0x12e890c10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e87e6e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_simple_select>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: test_simple_select_from_subquery
            obj: <function DefaultDatasetTestSuite.test_simple_select_from_subquery at 0x12e890ca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e87d090>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_simple_select_from_subquery>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: _check_compatible_source_types
            obj: <function DefaultDatasetTestSuite._check_compatible_source_types at 0x12e890dc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: _check_compatible_connection_types
            obj: <function DefaultDatasetTestSuite._check_compatible_connection_types at 0x12e890e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: _check_supported_join_types
            obj: <function DefaultDatasetTestSuite._check_supported_join_types at 0x12e890ee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: _allow_adding_sources
            obj: <function DefaultDatasetTestSuite._allow_adding_sources at 0x12e890f70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: test_compatibility_info
            obj: <function DefaultDatasetTestSuite.test_compatibility_info at 0x12e891000>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e87e6e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_compatibility_info>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: dataset_table
            obj: <function BaseDatasetTestClass.dataset_table at 0x12e8904c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: dsrc_params
            obj: <function BaseDatasetTestClass.dsrc_params at 0x12e8905e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: saved_dataset
            obj: <function BaseDatasetTestClass.saved_dataset at 0x12e890700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: empty_saved_dataset
            obj: <function BaseDatasetTestClass.empty_saved_dataset at 0x12e890820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: dataset_wrapper
            obj: <function BaseDatasetTestClass.dataset_wrapper at 0x12e890940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: editable_dataset_wrapper
            obj: <function BaseDatasetTestClass.editable_dataset_wrapper at 0x12e890a60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: fetch_data
            obj: <function BaseDatasetTestClass.fetch_data at 0x12e890af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: conn_exec_factory_async_env
            obj: <function ServiceFixtureTextClass.conn_exec_factory_async_env at 0x11f77caf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLDataset>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_dataset.py::TestPostgreSQLDataset' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_simple_select> [collection]
      pytest_itemcollected [hook]
          item: <Function test_simple_select>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_simple_select_from_subquery> [collection]
      pytest_itemcollected [hook]
          item: <Function test_simple_select_from_subquery>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_compatibility_info> [collection]
      pytest_itemcollected [hook]
          item: <Function test_compatibility_info>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_param_hash> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_param_hash>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_dataset.py::TestPostgreSQLDataset' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_dataset.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_remote_query_executor.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_remote_query_executor.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_remote_query_executor.py>
      find_module called for: dl_connector_postgresql_tests.db.core.test_remote_query_executor [assertion]
      matched test file '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_remote_query_executor.py' [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql_tests/db/core/test_remote_query_executor.py [assertion]
      matched marked file 'dl_core_testing.testcases.remote_query_executor' (from 'dl_core_testing.testcases') [assertion]
      find_module called for: dl_core_testing.testcases.remote_query_executor [assertion]
      found cached rewritten pyc for /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core_testing/dl_core_testing/testcases/remote_query_executor.py [assertion]
      early skip of rewriting module: aiohttp.pytest_plugin [assertion]
      early skip of rewriting module: uvloop [assertion]
      early skip of rewriting module: dl_core.connection_executors.remote_query_executor.app_async [assertion]
      early skip of rewriting module: dl_api_commons.aio.middlewares.body_signature [assertion]
      early skip of rewriting module: dl_configs.env_var_definitions [assertion]
      early skip of rewriting module: dl_configs.env_var_reader [assertion]
      early skip of rewriting module: dl_core.connection_executors.remote_query_executor.error_handler_rqe [assertion]
      early skip of rewriting module: dl_core.connection_executors.remote_query_executor.settings [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_remote_query_executor.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_remote_query_executor.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_remote_query_executor.py>
            name: pytest
            obj: <module 'pytest' from '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_remote_query_executor.py>
            name: BaseRemoteQueryExecutorTestClass
            obj: <class 'dl_core_testing.testcases.remote_query_executor.BaseRemoteQueryExecutorTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_remote_query_executor.py>
            name: PostgresAdapter
            obj: <class 'dl_connector_postgresql.core.postgresql_base.adapters_postgres.PostgresAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_remote_query_executor.py>
            name: AsyncPostgresAdapter
            obj: <class 'dl_connector_postgresql.core.postgresql_base.async_adapters_postgres.AsyncPostgresAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_remote_query_executor.py>
            name: SUBSELECT_QUERY_FULL
            obj: 
with base as (
    select generate_series(0, 6) as number
)
select
    number,
    'test' || number::text as str,
    number::bool as num_bool,
    number::text::bytea as num_bytea,
    number::char as num_char,
    -- number::name as num_name,
    number::int8 as num_int8,
    number::int2 as num_int2,
    number::int4 as num_int4,
    number::text as num_text,
    number::oid as num_oid,
    number::text::json as num_json,
    -- number::text::jsonb as num_jsonb, -- tests-pg too old
    number::float4 as num_float4,
    number::float8 as num_float8,
    number::numeric as num_numeric,
    (number || ' second')::interval as num_interval,
    number::varchar(12) as num_varchar,
    ('2020-01-0' || (number + 1))::date as num_date,
    ('00:01:0' || number)::time as num_time,
    ('2020-01-01T00:00:0' || number)::timestamp as num_timestamp,
    ('2020-01-01T00:00:0' || number)::timestamptz as num_timestamptz,
    ARRAY[number, 2, 3] as num_array,
    gen_random_uuid() as some_uuid,
    'nan'::double precision + number as some_nan
from base
limit 10

        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_remote_query_executor.py>
            name: BasePostgreSQLTestClass
            obj: <class 'dl_connector_postgresql_tests.db.core.base.BasePostgreSQLTestClass'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_remote_query_executor.py>
            name: TestPostgreSQLRemoteQueryExecutor
            obj: <class 'dl_connector_postgresql_tests.db.core.test_remote_query_executor.TestPostgreSQLRemoteQueryExecutor'>
        finish pytest_pycollect_makeitem --> <Class TestPostgreSQLRemoteQueryExecutor> [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_remote_query_executor.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestPostgreSQLRemoteQueryExecutor> [collection]
      pytest_collectstart [hook]
          collector: <Class TestPostgreSQLRemoteQueryExecutor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestPostgreSQLRemoteQueryExecutor>
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: SYNC_ADAPTER_CLS
            obj: <class 'dl_connector_postgresql.core.postgresql_base.adapters_postgres.PostgresAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: ASYNC_ADAPTER_CLS
            obj: <class 'dl_connector_postgresql.core.postgresql_base.async_adapters_postgres.AsyncPostgresAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: test_qe_result
            obj: <function TestPostgreSQLRemoteQueryExecutor.test_qe_result at 0x12e8912d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8aba30>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: RQEExecuteRequestMode.STREAM
                argname: query_executor_options
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: RQEExecuteRequestMode.NON_STREAM
                argname: query_executor_options
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_qe_result[json-async-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[json-async-RQEExecuteRequestMode.NON_STREAM]>, <Function test_qe_result[json-sync-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[json-sync-RQEExecuteRequestMode.NON_STREAM]>, <Function test_qe_result[pickle-async-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[pickle-async-RQEExecuteRequestMode.NON_STREAM]>, <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.NON_STREAM]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: __parameters__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: __annotations__
            obj: {}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: __abstractmethods__
            obj: frozenset()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: _abc_impl
            obj: <_abc._abc_data object at 0x12e89cd00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_type
            obj: ConnectionType('postgres')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: core_test_config
            obj: CoreTestEnvironmentConfiguration(host_us_http='127.0.0.1', port_us_http=52311, host_us_pg='127.0.0.1', port_us_pg_5432=52310, us_master_token='AC1ofiek8coB', fernet_key='h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk=', core_connector_ep_names=['postgresql'], redis_host='127.0.0.1', redis_port=52312, redis_password='', redis_db_default=0, redis_db_cache=1, redis_db_mutation=2, redis_db_arq=11, compeng_url='')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: loop
            obj: <function BasePostgreSQLTestClass.loop at 0x12e7c8af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: db_url
            obj: <function BasePostgreSQLTestClass.db_url at 0x12e7c8c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: connection_creation_params
            obj: <function BasePostgreSQLTestClass.connection_creation_params at 0x12e7c8d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: pg_partitioned_table_name
            obj: <function BasePostgreSQLTestClass.pg_partitioned_table_name at 0x12e7c8e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: __orig_bases__
            obj: (dl_core_testing.testcases.connection.BaseConnectionTestClass[dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL],)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: EXT_QUERY_EXECUTER_SECRET_KEY
            obj: very_secret_key
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: EXT_QUERY_EXECUTER_SECRET_KEY_ALT
            obj: very_secret_key_alt
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: forbid_private_addr
            obj: <function BaseRemoteQueryExecutorTestClass.forbid_private_addr at 0x12e892b00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: basic_test_query
            obj: <function BaseRemoteQueryExecutorTestClass.basic_test_query at 0x12e8b8dc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: query_executor_app
            obj: <function BaseRemoteQueryExecutorTestClass.query_executor_app at 0x12e8b8ee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: sync_rqe_netloc_subprocess
            obj: <function BaseRemoteQueryExecutorTestClass.sync_rqe_netloc_subprocess at 0x12e8b9000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: query_executor_options
            obj: <function BaseRemoteQueryExecutorTestClass.query_executor_options at 0x12e8b9120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_target_dto
            obj: <function BaseRemoteQueryExecutorTestClass.conn_target_dto at 0x12e8b92d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: remote_adapter
            obj: <function BaseRemoteQueryExecutorTestClass.remote_adapter at 0x12e8b93f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: use_new_qe_serializer
            obj: <function BaseRemoteQueryExecutorTestClass.use_new_qe_serializer at 0x12e8b9480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: execute_request
            obj: <function BaseRemoteQueryExecutorTestClass.execute_request at 0x12e8b9510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: test_forbid_private_hosts
            obj: <function BaseRemoteQueryExecutorTestClass.test_forbid_private_hosts at 0x12e8b95a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x12e8bd0f0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: RQEExecuteRequestMode.STREAM
                argname: query_executor_options
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: RQEExecuteRequestMode.NON_STREAM
                argname: query_executor_options
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x101aae9e0>
                val: True
                argname: forbid_private_addr
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.NON_STREAM-True]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: sync_connection_executor
            obj: <function BaseConnectionExecutorTestClass.sync_connection_executor at 0x12e7ba8c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: async_connection_executor
            obj: <function BaseConnectionExecutorTestClass.async_connection_executor at 0x12e7baa70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: test_params
            obj: RegulatedTestParams(mark_tests_skipped=None, mark_tests_failed=None, mark_features_skipped=None)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: raw_sql_level
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: sync_us_manager
            obj: <function BaseConnectionTestClass.sync_us_manager at 0x12e7b9990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: async_us_manager
            obj: <function BaseConnectionTestClass.async_us_manager at 0x12e7b9ab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: saved_connection
            obj: <function BaseConnectionTestClass.saved_connection at 0x12e7b9cf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: sync_conn_executor_factory
            obj: <function BaseConnectionTestClass.sync_conn_executor_factory at 0x12e7b9e10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: async_conn_executor_factory
            obj: <function BaseConnectionTestClass.async_conn_executor_factory at 0x12e7b9f30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: sample_table_schema
            obj: <function BaseConnectionTestClass.sample_table_schema at 0x12e7ba050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: sample_table_spec
            obj: <function BaseConnectionTestClass.sample_table_spec at 0x12e7ba170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: sample_table
            obj: <function BaseConnectionTestClass.sample_table at 0x12e7ba290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: connection_settings
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: inst_specific_sr_factory
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: data_caches_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: compeng_enabled
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_us_config
            obj: <function ServiceFixtureTextClass.conn_us_config at 0x11f77c790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_bi_context
            obj: <function ServiceFixtureTextClass.conn_bi_context at 0x11f77c8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: root_certificates
            obj: <function ServiceFixtureTextClass.root_certificates at 0x11f77c9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_exec_factory_async_env
            obj: <function ServiceFixtureTextClass.conn_exec_factory_async_env at 0x11f77caf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: _make_redis
            obj: <function ServiceFixtureTextClass._make_redis at 0x11f77cc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: caches_redis_client_factory
            obj: <function ServiceFixtureTextClass.caches_redis_client_factory at 0x11f77cdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: data_processor_service_factory
            obj: <function ServiceFixtureTextClass.data_processor_service_factory at 0x11f77cee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: service_registry_factory
            obj: <function ServiceFixtureTextClass.service_registry_factory at 0x11f77cca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_sync_service_registry
            obj: <function ServiceFixtureTextClass.conn_sync_service_registry at 0x11f77d000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_async_service_registry
            obj: <function ServiceFixtureTextClass.conn_async_service_registry at 0x11f77d120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_default_service_registry
            obj: <function ServiceFixtureTextClass.conn_default_service_registry at 0x11f77d240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_default_sync_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_sync_us_manager at 0x11f77d360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: conn_default_async_us_manager
            obj: <function ServiceFixtureTextClass.conn_default_async_us_manager at 0x11f77d480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: db_dispenser
            obj: CoreReInitableDbDispenser(_wait_on_init=True, _default_reconnect_timeout=600, _max_reinit_count=4, _db_cache={}, _reinit_hooks={}, _db_reinit_counts=defaultdict(<function ReInitableDbDispenser.<lambda>.<locals>.<lambda> at 0x11f77d510>, {}))
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: db_table_dispenser
            obj: DbCsvTableDispenser(_tables={}, _table_name_prefix=None, _chunk_size=False)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: engine_params
            obj: <function DbServiceFixtureTextClass.engine_params at 0x11f77d750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: engine_config
            obj: <function DbServiceFixtureTextClass.engine_config at 0x11f77d870>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: db_config
            obj: <function DbServiceFixtureTextClass.db_config at 0x11f77d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: _add_db_init_hook
            obj: <function DbServiceFixtureTextClass._add_db_init_hook at 0x11f77dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: db_reinit_hook
            obj: <function DbServiceFixtureTextClass.db_reinit_hook at 0x11f77db40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: db
            obj: <function DbServiceFixtureTextClass.db at 0x11f77dc60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: db_is_ready
            obj: <function DbServiceFixtureTextClass.db_is_ready at 0x11f77dd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: __slots__
            obj: ()
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: _is_protocol
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Class TestPostgreSQLRemoteQueryExecutor>
            name: __class_getitem__
            obj: <classmethod(<function Generic.__class_getitem__ at 0x100d0e200>)>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'dl_connector_postgresql_tests/db/core/test_remote_query_executor.py::TestPostgreSQLRemoteQueryExecutor' lenresult=16 outcome='passed'> [hook]
    genitems <Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.STREAM-True]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.STREAM-True]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.NON_STREAM-True]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.NON_STREAM-True]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.STREAM-True]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.STREAM-True]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.NON_STREAM-True]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.NON_STREAM-True]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.STREAM-True]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.STREAM-True]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.NON_STREAM-True]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.NON_STREAM-True]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.STREAM-True]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.STREAM-True]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.NON_STREAM-True]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.NON_STREAM-True]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_qe_result[json-async-RQEExecuteRequestMode.STREAM]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_qe_result[json-async-RQEExecuteRequestMode.STREAM]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_qe_result[json-async-RQEExecuteRequestMode.NON_STREAM]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_qe_result[json-async-RQEExecuteRequestMode.NON_STREAM]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_qe_result[json-sync-RQEExecuteRequestMode.STREAM]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_qe_result[json-sync-RQEExecuteRequestMode.STREAM]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_qe_result[json-sync-RQEExecuteRequestMode.NON_STREAM]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_qe_result[json-sync-RQEExecuteRequestMode.NON_STREAM]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_qe_result[pickle-async-RQEExecuteRequestMode.STREAM]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_qe_result[pickle-async-RQEExecuteRequestMode.STREAM]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_qe_result[pickle-async-RQEExecuteRequestMode.NON_STREAM]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_qe_result[pickle-async-RQEExecuteRequestMode.NON_STREAM]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.STREAM]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.STREAM]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.NON_STREAM]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.NON_STREAM]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_remote_query_executor.py::TestPostgreSQLRemoteQueryExecutor' lenresult=16 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/test_remote_query_executor.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'dl_connector_postgresql_tests/db/core/__init__.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x101aae9e0>
          items: [<Function test_pass_db_query_to_user[False-None]>, <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>, <Function test_timeout>, <Function test_tables_list>, <Function test_tables_list_schema[test_data-expected_tables0]>, <Function test_tables_list_schema[test_data_partitions-expected_tables1]>, <Function test_default_pass_db_query_to_user>, <Function test_make_connection>, <Function test_connection_test>, <Function test_connection_get_data_source_templates>, <Function test_connection_data_export_flag>, <Function test_get_source_templates_paginated_fail_when_db_name_is_required>, <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>, <Function test_get_source_templates_paginated_fail_with_unsupported_offset>, <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>, <Function test_get_data_source_templates_pg_partitioned>, <Function test_make_connection>, <Function test_connection_test>, <Function test_connection_get_data_source_templates>, <Function test_connection_data_export_flag>, <Function test_get_source_templates_paginated_fail_when_db_name_is_required>, <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>, <Function test_get_source_templates_paginated_fail_with_unsupported_offset>, <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>, <Function test_get_db_version>, <Function test_test>, <Function test_get_table_names>, <Function test_table_not_exists>, <Function test_type_recognition>, <Function test_simple_select>, <Function test_error_on_select_from_nonexistent_source>, <Function test_get_table_schema_info[table]>, <Function test_get_table_schema_info[subselect]>, <Function test_get_table_schema_info_for_nonexistent_table>, <Function test_closing_sql_sessions>, <Function test_table_exists>, <Function test_get_db_version>, <Function test_test>, <Function test_multiple_connection_test>, <Function test_simple_select>, <Function test_select_data>, <Function test_cast_row_to_output>, <Function test_error_on_select_from_nonexistent_source>, <Function test_closing_sql_sessions>, <Function test_table_exists>, <Function test_table_not_exists>, <Function test_get_table_schema_info>, <Function test_get_table_schema_info_for_nonexistent_table>, <Function test_get_db_version>, <Function test_get_table_names>, <Function test_table_not_exists>, <Function test_type_recognition>, <Function test_simple_select>, <Function test_error_on_select_from_nonexistent_source>, <Function test_get_table_schema_info[table]>, <Function test_get_table_schema_info[subselect]>, <Function test_get_table_schema_info_for_nonexistent_table>, <Function test_closing_sql_sessions>, <Function test_test>, <Function test_table_exists>, <Function test_get_db_version>, <Function test_simple_select>, <Function test_select_data>, <Function test_cast_row_to_output>, <Function test_error_on_select_from_nonexistent_source>, <Function test_closing_sql_sessions>, <Function test_test>, <Function test_multiple_connection_test>, <Function test_table_exists>, <Function test_table_not_exists>, <Function test_get_table_schema_info>, <Function test_get_table_schema_info_for_nonexistent_table>, <Function test_data_source_exists>, <Function test_get_raw_schema>, <Function test_export_dsrc_migration_dtos>, <Function test_get_cache_key_part>, <Function test_data_source_exists>, <Function test_get_raw_schema>, <Function test_export_dsrc_migration_dtos>, <Function test_get_cache_key_part>, <Function test_view_from_subselect>, <Function test_simple_select>, <Function test_simple_select_from_subquery>, <Function test_compatibility_info>, <Function test_get_param_hash>, <Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_qe_result[json-async-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[json-async-RQEExecuteRequestMode.NON_STREAM]>, <Function test_qe_result[json-sync-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[json-sync-RQEExecuteRequestMode.NON_STREAM]>, <Function test_qe_result[pickle-async-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[pickle-async-RQEExecuteRequestMode.NON_STREAM]>, <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.NON_STREAM]>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x101aae9e0>
            items: [<Function test_pass_db_query_to_user[False-None]>, <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>, <Function test_timeout>, <Function test_tables_list>, <Function test_tables_list_schema[test_data-expected_tables0]>, <Function test_tables_list_schema[test_data_partitions-expected_tables1]>, <Function test_default_pass_db_query_to_user>, <Function test_make_connection>, <Function test_connection_test>, <Function test_connection_get_data_source_templates>, <Function test_connection_data_export_flag>, <Function test_get_source_templates_paginated_fail_when_db_name_is_required>, <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>, <Function test_get_source_templates_paginated_fail_with_unsupported_offset>, <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>, <Function test_get_data_source_templates_pg_partitioned>, <Function test_make_connection>, <Function test_connection_test>, <Function test_connection_get_data_source_templates>, <Function test_connection_data_export_flag>, <Function test_get_source_templates_paginated_fail_when_db_name_is_required>, <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>, <Function test_get_source_templates_paginated_fail_with_unsupported_offset>, <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>, <Function test_get_db_version>, <Function test_test>, <Function test_get_table_names>, <Function test_table_not_exists>, <Function test_type_recognition>, <Function test_simple_select>, <Function test_error_on_select_from_nonexistent_source>, <Function test_get_table_schema_info[table]>, <Function test_get_table_schema_info[subselect]>, <Function test_get_table_schema_info_for_nonexistent_table>, <Function test_closing_sql_sessions>, <Function test_table_exists>, <Function test_get_db_version>, <Function test_test>, <Function test_multiple_connection_test>, <Function test_simple_select>, <Function test_select_data>, <Function test_cast_row_to_output>, <Function test_error_on_select_from_nonexistent_source>, <Function test_closing_sql_sessions>, <Function test_table_exists>, <Function test_table_not_exists>, <Function test_get_table_schema_info>, <Function test_get_table_schema_info_for_nonexistent_table>, <Function test_get_db_version>, <Function test_get_table_names>, <Function test_table_not_exists>, <Function test_type_recognition>, <Function test_simple_select>, <Function test_error_on_select_from_nonexistent_source>, <Function test_get_table_schema_info[table]>, <Function test_get_table_schema_info[subselect]>, <Function test_get_table_schema_info_for_nonexistent_table>, <Function test_closing_sql_sessions>, <Function test_test>, <Function test_table_exists>, <Function test_get_db_version>, <Function test_simple_select>, <Function test_select_data>, <Function test_cast_row_to_output>, <Function test_error_on_select_from_nonexistent_source>, <Function test_closing_sql_sessions>, <Function test_test>, <Function test_multiple_connection_test>, <Function test_table_exists>, <Function test_table_not_exists>, <Function test_get_table_schema_info>, <Function test_get_table_schema_info_for_nonexistent_table>, <Function test_data_source_exists>, <Function test_get_raw_schema>, <Function test_export_dsrc_migration_dtos>, <Function test_get_cache_key_part>, <Function test_data_source_exists>, <Function test_get_raw_schema>, <Function test_export_dsrc_migration_dtos>, <Function test_get_cache_key_part>, <Function test_view_from_subselect>, <Function test_simple_select>, <Function test_simple_select_from_subquery>, <Function test_compatibility_info>, <Function test_get_param_hash>, <Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[json-async-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[json-sync-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[pickle-async-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.STREAM-True]>, <Function test_forbid_private_hosts[pickle-sync-RQEExecuteRequestMode.NON_STREAM-True]>, <Function test_qe_result[json-async-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[json-async-RQEExecuteRequestMode.NON_STREAM]>, <Function test_qe_result[json-sync-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[json-sync-RQEExecuteRequestMode.NON_STREAM]>, <Function test_qe_result[pickle-async-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[pickle-async-RQEExecuteRequestMode.NON_STREAM]>, <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.STREAM]>, <Function test_qe_result[pickle-sync-RQEExecuteRequestMode.NON_STREAM]>]
            start_path: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql
            startdir: /Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session dl_connector_postgresql exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=101>
      pytest_runtest_protocol [hook]
          item: <Function test_pass_db_query_to_user[False-None]>
          nextitem: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]
            location: ('../dl_core_testing/dl_core_testing/testcases/adapter.py', 65, 'TestAsyncPostgreSQLAdapter.test_pass_db_query_to_user[False-None]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pass_db_query_to_user[False-None]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_bi_context' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'root_certificates' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_async_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bf100>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_us_config' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> USConfig(us_base_url='http://127.0.0.1:52311', us_auth_context=USAuthContextMaster(dl_component='backend'), us_crypto_keys_config=CryptoKeysConfig(actual_key_id='0')) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_exec_factory_async_env' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> False [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_sync_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={}, _async_env=False, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bfb50>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bfcd0>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_default_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={}, _async_env=False, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bfb50>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bfcd0>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_url' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> bi_postgresql://datalens:qwerty@127.0.0.1:52302/test_data [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_params' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> DbEngineConfig(url='bi_postgresql://datalens:qwerty@127.0.0.1:52302/test_data', engine_params=frozendict.frozendict({})) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> CoreDbConfig(engine_config=DbEngineConfig(url='bi_postgresql://datalens:qwerty@127.0.0.1:52302/test_data', engine_params=frozendict.frozendict({})), supports_executemany=True, conn_type=ConnectionType('postgres')) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_pass_db_query_to_user[False-None]>>
          early skip of rewriting module: sqlalchemy.dialects.bi_postgresql [assertion]
          finish pytest_fixture_setup --> Db(_engine_wrapper=BiPGEngineWrapper(_engine=Engine(bi_postgresql://datalens:***@127.0.0.1:52302/test_data)), _config=CoreDbConfig(engine_config=DbEngineConfig(url='bi_postgresql://datalens:qwerty@127.0.0.1:52302/test_data', engine_params=frozendict.frozendict({})), supports_executemany=True, conn_type=ConnectionType('postgres'))) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0e1a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pass_db_query_to_user' scope='function' baseid=''>
              request: <SubRequest 'pass_db_query_to_user' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> False [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='expected_query' scope='function' baseid=''>
              request: <SubRequest 'expected_query' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0e1a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ea0d7e0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.async_conn_executor_factory.<locals>.factory at 0x12e8bac20> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12e8bad40>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=..., sync_wrapper=None)]}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bf100>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None), _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea0c550 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_setup --> PostgresConnTargetDTO(conn_id='fmysabnbzdhc0', pass_db_messages_to_user=True, pass_db_query_to_user=True, host='127.0.0.1', port=52302, username='datalens', password=..., db_name='test_data', enforce_collate=<PGEnforceCollateMode.off: 'off'>, ssl_enable=False, ssl_ca=None) [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pass_db_query_to_user[False-None]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pass_db_query_to_user[False-None]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pass_db_query_to_user[False-None]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pass_db_query_to_user[False-None]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pass_db_query_to_user[False-None]>
            nextitem: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='expected_query' scope='function' baseid=''>
              request: <SubRequest 'expected_query' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pass_db_query_to_user' scope='function' baseid=''>
              request: <SubRequest 'pass_db_query_to_user' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pass_db_query_to_user[False-None]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]
            location: ('../dl_core_testing/dl_core_testing/testcases/adapter.py', 65, 'TestAsyncPostgreSQLAdapter.test_pass_db_query_to_user[False-None]')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : RemovedIn20Warning('Deprecated API features detected! These feature(s) are not compatible with SQLAlchemy 2.0. To prevent incompatible upgrades prior to updating applications, ensure requirements files are pinned to "sqlalchemy<2.0". Set environment variable SQLALCHEMY_WARN_20=1 to show all deprecation warnings.  Set environment variable SQLALCHEMY_SILENCE_UBER_WARNING=1 to silence this message.'), category : 'RemovedIn20Warning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_db_testing/dl_db_testing/database/engine_wrapper.py', lineno : 111, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : SAWarning("Dialect postgresql:psycopg2 will not make use of SQL compilation caching as it does not set the 'supports_statement_cache' attribute to ``True``.  This can have significant performance implications including some performance degradations in comparison to prior SQLAlchemy versions.  Dialect maintainers should seek to set this attribute to True after appropriate development and testing for SQLAlchemy 1.4 caching support.   Alternatively, this attribute may be set to False which will disable this warning."), category : 'SAWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_db_testing/dl_db_testing/database/engine_wrapper.py', lineno : 111, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead"), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_api_commons/dl_api_commons/utils.py', lineno : 28, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead"), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_api_commons/dl_api_commons/utils.py', lineno : 28, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[False-None]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
          nextitem: <Function test_timeout>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]
            location: ('../dl_core_testing/dl_core_testing/testcases/adapter.py', 65, 'TestAsyncPostgreSQLAdapter.test_pass_db_query_to_user[True-select 1 from <hidden>]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pass_db_query_to_user' scope='function' baseid=''>
              request: <SubRequest 'pass_db_query_to_user' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> True [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='expected_query' scope='function' baseid=''>
              request: <SubRequest 'expected_query' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> select 1 from <hidden> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0e1a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ea9dd20> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.async_conn_executor_factory.<locals>.factory at 0x12eb78d30> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb79000>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12e8bad40>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea0c550 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=..., sync_wrapper=None)]}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bf100>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None), _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9d8d0 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_setup --> PostgresConnTargetDTO(conn_id='t0c6opal0r4oe', pass_db_messages_to_user=True, pass_db_query_to_user=True, host='127.0.0.1', port=52302, username='datalens', password=..., db_name='test_data', enforce_collate=<PGEnforceCollateMode.off: 'off'>, ssl_enable=False, ssl_ca=None) [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
            nextitem: <Function test_timeout>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='expected_query' scope='function' baseid=''>
              request: <SubRequest 'expected_query' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pass_db_query_to_user' scope='function' baseid=''>
              request: <SubRequest 'pass_db_query_to_user' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]
            location: ('../dl_core_testing/dl_core_testing/testcases/adapter.py', 65, 'TestAsyncPostgreSQLAdapter.test_pass_db_query_to_user[True-select 1 from <hidden>]')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_pass_db_query_to_user[True-select 1 from <hidden>]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_timeout>
          nextitem: <Function test_tables_list>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout
            location: ('../dl_core_testing/dl_core_testing/testcases/adapter.py', 99, 'TestAsyncPostgreSQLAdapter.test_timeout')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_timeout>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_timeout>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_timeout>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_timeout>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0e1a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_timeout>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_timeout>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12eb94610> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_timeout>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.async_conn_executor_factory.<locals>.factory at 0x12eb79ea0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_timeout>>
          finish pytest_fixture_setup --> AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7a0e0>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12e8bad40>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea0c550 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb79000>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9d8d0 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=..., sync_wrapper=None)]}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bf100>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None), _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12eb94400 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_timeout>>
          finish pytest_fixture_setup --> PostgresConnTargetDTO(conn_id='fmysac2vcmx00', pass_db_messages_to_user=True, pass_db_query_to_user=True, host='127.0.0.1', port=52302, username='datalens', password=..., db_name='test_data', enforce_collate=<PGEnforceCollateMode.off: 'off'>, ssl_enable=False, ssl_ca=None) [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_timeout>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_timeout>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_timeout>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_timeout>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_timeout>
            nextitem: <Function test_tables_list>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_timeout>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout
            location: ('../dl_core_testing/dl_core_testing/testcases/adapter.py', 99, 'TestAsyncPostgreSQLAdapter.test_timeout')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_timeout
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_tables_list>
          nextitem: <Function test_tables_list_schema[test_data-expected_tables0]>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list
            location: ('dl_connector_postgresql_tests/db/core/test_adapter.py', 24, 'TestAsyncPostgreSQLAdapter.test_tables_list')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_tables_list>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_tables_list>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_tables_list>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_tables_list>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0e1a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_tables_list>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12eb96fb0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.async_conn_executor_factory.<locals>.factory at 0x12eb7af80> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list>>
          finish pytest_fixture_setup --> AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7b250>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12e8bad40>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea0c550 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb79000>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9d8d0 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7a0e0>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12eb94400 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='18kewyv5oipcm', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=..., sync_wrapper=None)]}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bf100>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None), _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12eb96b30 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='18kewyv5oipcm', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list>>
          finish pytest_fixture_setup --> PostgresConnTargetDTO(conn_id='18kewyv5oipcm', pass_db_messages_to_user=True, pass_db_query_to_user=True, host='127.0.0.1', port=52302, username='datalens', password=..., db_name='test_data', enforce_collate=<PGEnforceCollateMode.off: 'off'>, ssl_enable=False, ssl_ca=None) [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tables_list>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_tables_list>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_tables_list>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tables_list>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_tables_list>
            nextitem: <Function test_tables_list_schema[test_data-expected_tables0]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tables_list>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list
            location: ('dl_connector_postgresql_tests/db/core/test_adapter.py', 24, 'TestAsyncPostgreSQLAdapter.test_tables_list')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_tables_list_schema[test_data-expected_tables0]>
          nextitem: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]
            location: ('dl_connector_postgresql_tests/db/core/test_adapter.py', 40, 'TestAsyncPostgreSQLAdapter.test_tables_list_schema[test_data-expected_tables0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_tables_list_schema[test_data-expected_tables0]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0e1a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ea9fd90> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.async_conn_executor_factory.<locals>.factory at 0x12e6171c0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7b520>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12e8bad40>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea0c550 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb79000>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9d8d0 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7a0e0>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12eb94400 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='18kewyv5oipcm', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7b250>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12eb96b30 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='18kewyv5oipcm', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='z6icuxz9xqukk', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=..., sync_wrapper=None)]}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bf100>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None), _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9fee0 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='z6icuxz9xqukk', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> PostgresConnTargetDTO(conn_id='z6icuxz9xqukk', pass_db_messages_to_user=True, pass_db_query_to_user=True, host='127.0.0.1', port=52302, username='datalens', password=..., db_name='test_data', enforce_collate=<PGEnforceCollateMode.off: 'off'>, ssl_enable=False, ssl_ca=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='schema' scope='function' baseid=''>
              request: <SubRequest 'schema' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> test_data [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='expected_tables' scope='function' baseid=''>
              request: <SubRequest 'expected_tables' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_setup --> ['sample'] [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tables_list_schema[test_data-expected_tables0]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_tables_list_schema[test_data-expected_tables0]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_tables_list_schema[test_data-expected_tables0]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tables_list_schema[test_data-expected_tables0]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_tables_list_schema[test_data-expected_tables0]>
            nextitem: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='expected_tables' scope='function' baseid=''>
              request: <SubRequest 'expected_tables' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='schema' scope='function' baseid=''>
              request: <SubRequest 'schema' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tables_list_schema[test_data-expected_tables0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]
            location: ('dl_connector_postgresql_tests/db/core/test_adapter.py', 40, 'TestAsyncPostgreSQLAdapter.test_tables_list_schema[test_data-expected_tables0]')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data-expected_tables0]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
          nextitem: <Function test_default_pass_db_query_to_user>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]
            location: ('dl_connector_postgresql_tests/db/core/test_adapter.py', 40, 'TestAsyncPostgreSQLAdapter.test_tables_list_schema[test_data_partitions-expected_tables1]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0e1a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ea9e2c0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.async_conn_executor_factory.<locals>.factory at 0x12eb792d0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb79ea0>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12e8bad40>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea0c550 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb79000>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9d8d0 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7a0e0>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12eb94400 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='18kewyv5oipcm', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7b250>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12eb96b30 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='18kewyv5oipcm', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='z6icuxz9xqukk', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7b520>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9fee0 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='z6icuxz9xqukk', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='5coi04cqdzvwq', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=..., sync_wrapper=None)]}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bf100>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None), _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9dd50 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='5coi04cqdzvwq', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> PostgresConnTargetDTO(conn_id='5coi04cqdzvwq', pass_db_messages_to_user=True, pass_db_query_to_user=True, host='127.0.0.1', port=52302, username='datalens', password=..., db_name='test_data', enforce_collate=<PGEnforceCollateMode.off: 'off'>, ssl_enable=False, ssl_ca=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='schema' scope='function' baseid=''>
              request: <SubRequest 'schema' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> test_data_partitions [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='expected_tables' scope='function' baseid=''>
              request: <SubRequest 'expected_tables' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_setup --> ['sample_partition'] [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
            nextitem: <Function test_default_pass_db_query_to_user>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='expected_tables' scope='function' baseid=''>
              request: <SubRequest 'expected_tables' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='schema' scope='function' baseid=''>
              request: <SubRequest 'schema' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tables_list_schema[test_data_partitions-expected_tables1]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]
            location: ('dl_connector_postgresql_tests/db/core/test_adapter.py', 40, 'TestAsyncPostgreSQLAdapter.test_tables_list_schema[test_data_partitions-expected_tables1]')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_tables_list_schema[test_data_partitions-expected_tables1]
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_default_pass_db_query_to_user>
          nextitem: <Function test_make_connection>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user
            location: ('../dl_core_testing/dl_core_testing/testcases/adapter.py', 85, 'TestAsyncPostgreSQLAdapter.test_default_pass_db_query_to_user')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_default_pass_db_query_to_user>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0e1a0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ea0fb20> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.async_conn_executor_factory.<locals>.factory at 0x12ebb8700> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_setup --> AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12ebb8940>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12e8bad40>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea0c550 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysabnbzdhc0', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb79000>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9d8d0 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='t0c6opal0r4oe', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7a0e0>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12eb94400 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='fmysac2vcmx00', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='18kewyv5oipcm', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7b250>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12eb96b30 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='18kewyv5oipcm', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='z6icuxz9xqukk', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb7b520>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9fee0 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='z6icuxz9xqukk', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='5coi04cqdzvwq', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=AsyncPostgresConnExecutor(_conn_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), _conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), _host_fail_callback=<function DefaultConnExecutorFactory._cook_conn_executor.<locals>._conn_host_fail_callback_func at 0x12eb79ea0>, _req_ctx_info=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _exec_mode=<ExecutionMode.DIRECT: 1>, _sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), _remote_qe_data=None, _ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', _services_registry=..., _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea9dd50 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='5coi04cqdzvwq', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)), sync_wrapper=None)], ConnExecutorRecipe(ce_cls=<class 'dl_connector_postgresql.core.postgresql_base.connection_executors.AsyncPostgresConnExecutor'>, conn_dto=PostgresConnDTO(conn_id='biuo6bo2tf7cw', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None), connect_options=ConnectOptions(rqe_total_timeout=None, rqe_sock_read_timeout=None, fetch_table_indexes=False, pass_db_messages_to_user=True, pass_db_query_to_user=True), exec_mode=<ExecutionMode.DIRECT: 1>, rqe_data=None, conn_hosts_pool=('127.0.0.1', '127.0.0.1', '127.0.0.1'), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n'): [BaseClosableExecutorFactory._CECreationResult(async_ce=..., sync_wrapper=None)]}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12e8bf100>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None), _is_initialized=False, _tpe=<dl_utils.aio.ContextVarExecutor object at 0x12e8bef80>, _async_dba_pool=None, _sync_dba=None, _initialization_lock=<asyncio.locks.Lock object at 0x12ea0d510 [unlocked]>, _dba_attempt_index=0, _conn_dto=PostgresConnDTO(conn_id='biuo6bo2tf7cw', host='127.0.0.1', multihosts=('127.0.0.1',), port=52302, db_name='test_data', username='datalens', enforce_collate=<PGEnforceCollateMode.auto: 'auto'>, ssl_enable=False, ssl_ca=None)) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_setup --> PostgresConnTargetDTO(conn_id='biuo6bo2tf7cw', pass_db_messages_to_user=True, pass_db_query_to_user=True, host='127.0.0.1', port=52302, username='datalens', password=..., db_name='test_data', enforce_collate=<PGEnforceCollateMode.off: 'off'>, ssl_enable=False, ssl_ca=None) [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_default_pass_db_query_to_user>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_default_pass_db_query_to_user>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_default_pass_db_query_to_user>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_default_pass_db_query_to_user>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_default_pass_db_query_to_user>
            nextitem: <Function test_make_connection>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_conn_executor_factory' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'connection_creation_params' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'saved_connection' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='target_conn_dto' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'target_conn_dto' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='async_connection_executor' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'async_connection_executor' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'loop' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'sync_us_manager' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_params' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_url' for <Function test_default_pass_db_query_to_user>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_params' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_url' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_params' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_url' for <Function test_tables_list_schema[test_data-expected_tables0]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_params' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_url' for <Function test_tables_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_params' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_url' for <Function test_timeout>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_params' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_url' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_is_ready' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest '_add_db_init_hook' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_config' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_config' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'engine_params' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
              request: <SubRequest 'db_url' for <Function test_pass_db_query_to_user[False-None]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_default_pass_db_query_to_user>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user
            location: ('../dl_core_testing/dl_core_testing/testcases/adapter.py', 85, 'TestAsyncPostgreSQLAdapter.test_default_pass_db_query_to_user')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : PytestWarning("The test <Function test_default_pass_db_query_to_user> is marked with '@pytest.mark.asyncio' but it is not an async function. Please remove asyncio marker. If the test is not marked explicitly, check for global markers applied via 'pytestmark'."), category : 'PytestWarning', filename : '../dl_core_testing/dl_core_testing/testcases/adapter.py', lineno : 86, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter::test_default_pass_db_query_to_user
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_make_connection>
          nextitem: <Function test_connection_test>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 125, 'TestPostgreSQLConnection.test_make_connection')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_make_connection>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_us_config' for <Function test_make_connection>>
          finish pytest_fixture_setup --> USConfig(us_base_url='http://127.0.0.1:52311', us_auth_context=USAuthContextMaster(dl_component='backend'), us_crypto_keys_config=CryptoKeysConfig(actual_key_id='0')) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_bi_context' for <Function test_make_connection>>
          finish pytest_fixture_setup --> RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_exec_factory_async_env' for <Function test_make_connection>>
          finish pytest_fixture_setup --> False [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'root_certificates' for <Function test_make_connection>>
          finish pytest_fixture_setup --> b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_sync_service_registry' for <Function test_make_connection>>
          finish pytest_fixture_setup --> DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={}, _async_env=False, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12eb978b0>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12eb954b0>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_async_service_registry' for <Function test_make_connection>>
          finish pytest_fixture_setup --> DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12ea9f310>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12ea9f4c0>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
          finish pytest_fixture_setup --> DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={}, _async_env=False, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12eb978b0>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12eb954b0>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_make_connection>>
          finish pytest_fixture_setup --> bi_postgresql://datalens:qwerty@127.0.0.1:52302/test_data [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_make_connection>>
          finish pytest_fixture_setup --> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_make_connection>>
          finish pytest_fixture_setup --> DbEngineConfig(url='bi_postgresql://datalens:qwerty@127.0.0.1:52302/test_data', engine_params=frozendict.frozendict({})) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_make_connection>>
          finish pytest_fixture_setup --> CoreDbConfig(engine_config=DbEngineConfig(url='bi_postgresql://datalens:qwerty@127.0.0.1:52302/test_data', engine_params=frozendict.frozendict({})), supports_executemany=True, conn_type=ConnectionType('postgres')) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_make_connection>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_make_connection>>
          finish pytest_fixture_setup --> Db(_engine_wrapper=BiPGEngineWrapper(_engine=Engine(bi_postgresql://datalens:***@127.0.0.1:52302/test_data)), _config=CoreDbConfig(engine_config=DbEngineConfig(url='bi_postgresql://datalens:qwerty@127.0.0.1:52302/test_data', engine_params=frozendict.frozendict({})), supports_executemany=True, conn_type=ConnectionType('postgres'))) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_make_connection>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_make_connection>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_make_connection>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_make_connection>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_make_connection>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_make_connection>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_make_connection>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ea0d210> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_make_connection>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_make_connection>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_make_connection>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_make_connection>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_make_connection>
            nextitem: <Function test_connection_test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_make_connection>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 125, 'TestPostgreSQLConnection.test_make_connection')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead"), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_api_commons/dl_api_commons/utils.py', lineno : 28, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead"), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_api_commons/dl_api_commons/utils.py', lineno : 28, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_make_connection
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_connection_test>
          nextitem: <Function test_connection_get_data_source_templates>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 129, 'TestPostgreSQLConnection.test_connection_test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_connection_test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_connection_test>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_connection_test>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_connection_test>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_connection_test>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_test>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ebc4e20> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_connection_test>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.sync_conn_executor_factory.<locals>.factory at 0x12e8b9b40> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_connection_test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_connection_test>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_connection_test>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_connection_test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_connection_test>
            nextitem: <Function test_connection_get_data_source_templates>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_connection_test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 129, 'TestPostgreSQLConnection.test_connection_test')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : SAWarning("Dialect postgresql:psycopg2 will not make use of SQL compilation caching as it does not set the 'supports_statement_cache' attribute to ``True``.  This can have significant performance implications including some performance degradations in comparison to prior SQLAlchemy versions.  Dialect maintainers should seek to set this attribute to True after appropriate development and testing for SQLAlchemy 1.4 caching support.   Alternatively, this attribute may be set to False which will disable this warning."), category : 'SAWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_core/dl_core/db_session_utils.py', lineno : 52, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_test
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_connection_get_data_source_templates>
          nextitem: <Function test_connection_data_export_flag>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 146, 'TestPostgreSQLConnection.test_connection_get_data_source_templates')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_connection_get_data_source_templates>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ebc7250> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.sync_conn_executor_factory.<locals>.factory at 0x12ebb8ee0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_connection_get_data_source_templates>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_connection_get_data_source_templates>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_connection_get_data_source_templates>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_connection_get_data_source_templates>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_connection_get_data_source_templates>
            nextitem: <Function test_connection_data_export_flag>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_connection_get_data_source_templates>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 146, 'TestPostgreSQLConnection.test_connection_get_data_source_templates')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : SAWarning("Dialect postgresql:psycopg2 will not make use of SQL compilation caching as it does not set the 'supports_statement_cache' attribute to ``True``.  This can have significant performance implications including some performance degradations in comparison to prior SQLAlchemy versions.  Dialect maintainers should seek to set this attribute to True after appropriate development and testing for SQLAlchemy 1.4 caching support.   Alternatively, this attribute may be set to False which will disable this warning."), category : 'SAWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql/core/postgresql_base/adapters_postgres.py', lineno : 102, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_get_data_source_templates
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_connection_data_export_flag>
          nextitem: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 159, 'TestPostgreSQLConnection.test_connection_data_export_flag')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_connection_data_export_flag>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ebed3f0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_connection_data_export_flag>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_connection_data_export_flag>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_connection_data_export_flag>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_connection_data_export_flag>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_connection_data_export_flag>
            nextitem: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_connection_data_export_flag>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 159, 'TestPostgreSQLConnection.test_connection_data_export_flag')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_connection_data_export_flag
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
          nextitem: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 177, 'TestPostgreSQLConnection.test_get_source_templates_paginated_fail_when_db_name_is_required')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ebeec20> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.sync_conn_executor_factory.<locals>.factory at 0x12ebbaef0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
            nextitem: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_when_db_name_is_required>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 177, 'TestPostgreSQLConnection.test_get_source_templates_paginated_fail_when_db_name_is_required')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_db_name_is_required
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
          nextitem: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 196, 'TestPostgreSQLConnection.test_get_source_templates_paginated_fail_when_search_is_not_supported')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ebefe20> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.sync_conn_executor_factory.<locals>.factory at 0x12ebbb880> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
            nextitem: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 196, 'TestPostgreSQLConnection.test_get_source_templates_paginated_fail_when_search_is_not_supported')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_when_search_is_not_supported
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
          nextitem: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 213, 'TestPostgreSQLConnection.test_get_source_templates_paginated_fail_with_unsupported_offset')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ebef640> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.sync_conn_executor_factory.<locals>.factory at 0x12ec18280> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
            nextitem: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_offset>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 213, 'TestPostgreSQLConnection.test_get_source_templates_paginated_fail_with_unsupported_offset')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_offset
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
          nextitem: <Function test_get_data_source_templates_pg_partitioned>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 228, 'TestPostgreSQLConnection.test_get_source_templates_paginated_fail_with_unsupported_db_names')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ec11c90> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_setup --> <function BaseConnectionTestClass.sync_conn_executor_factory.<locals>.factory at 0x12ec18c10> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
            nextitem: <Function test_get_data_source_templates_pg_partitioned>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 228, 'TestPostgreSQLConnection.test_get_source_templates_paginated_fail_with_unsupported_db_names')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_source_templates_paginated_fail_with_unsupported_db_names
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_data_source_templates_pg_partitioned>
          nextitem: <Function test_make_connection>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned
            location: ('dl_connector_postgresql_tests/db/core/test_connection.py', 46, 'TestPostgreSQLConnection.test_get_data_source_templates_pg_partitioned')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_data_source_templates_pg_partitioned>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pg_partitioned_table_name' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'pg_partitioned_table_name' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_setup --> test_partitioned_table_frxfq7dnwvtlvm5mg3hfn7 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_setup --> <dl_core.us_manager.us_manager_sync.SyncUSManager object at 0x12ea0fa60> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_setup --> [hook]
              db_name: test_data
              host: 127.0.0.1
              port: 52302
              username: datalens
              password: qwerty
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_setup --> <dl_connector_postgresql.core.postgresql.us_connection.ConnectionPostgreSQL object at 0x12ec13580> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_data_source_templates_pg_partitioned>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_data_source_templates_pg_partitioned>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_data_source_templates_pg_partitioned>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_data_source_templates_pg_partitioned>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_data_source_templates_pg_partitioned>
            nextitem: <Function test_make_connection>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='connection_creation_params' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'connection_creation_params' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='saved_connection' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'saved_connection' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='loop' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'loop' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sync_us_manager' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'sync_us_manager' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pg_partitioned_table_name' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'pg_partitioned_table_name' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pg_partitioned_table_name' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'pg_partitioned_table_name' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_get_data_source_templates_pg_partitioned>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_connection_data_export_flag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_connection_get_data_source_templates>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_connection_test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'conn_default_sync_us_manager' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_is_ready' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_make_connection>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_data_source_templates_pg_partitioned>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x101aae9e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned
            location: ('dl_connector_postgresql_tests/db/core/test_connection.py', 46, 'TestPostgreSQLConnection.test_get_data_source_templates_pg_partitioned')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : SAWarning("Dialect postgresql:psycopg2 will not make use of SQL compilation caching as it does not set the 'supports_statement_cache' attribute to ``True``.  This can have significant performance implications including some performance degradations in comparison to prior SQLAlchemy versions.  Dialect maintainers should seek to set this attribute to True after appropriate development and testing for SQLAlchemy 1.4 caching support.   Alternatively, this attribute may be set to False which will disable this warning."), category : 'SAWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/lib/dl_connector_postgresql/dl_connector_postgresql/core/postgresql_base/adapters_postgres.py', lineno : 102, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning('pytest-asyncio detected an unclosed event loop when tearing down the event_loop\nfixture: <_UnixSelectorEventLoop running=False closed=False debug=False>\npytest-asyncio will close the event loop for you, but future versions of the\nlibrary will no longer do so. In order to ensure compatibility with future\nversions, please make sure that:\n    1. Any custom "event_loop" fixture properly closes the loop after yielding it\n    2. Your code does not modify the event loop in async fixtures or tests\n'), category : 'DeprecationWarning', filename : '/Users/juliarbkv/PycharmProjects/datalens-backend-private/mainrepo/metapkg/.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py', lineno : 444, line : None}
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection::test_get_data_source_templates_pg_partitioned
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_make_connection>
          nextitem: <Function test_connection_test>
        pytest_runtest_logstart [hook]
            nodeid: dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection::test_make_connection
            location: ('../dl_core_testing/dl_core_testing/testcases/connection.py', 125, 'TestSslPostgreSQLConnection.test_make_connection')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_make_connection>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'conn_us_config' for <Function test_make_connection>>
          finish pytest_fixture_setup --> USConfig(us_base_url='http://127.0.0.1:52311', us_auth_context=USAuthContextMaster(dl_component='backend'), us_crypto_keys_config=CryptoKeysConfig(actual_key_id='0')) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'conn_bi_context' for <Function test_make_connection>>
          finish pytest_fixture_setup --> RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'conn_exec_factory_async_env' for <Function test_make_connection>>
          finish pytest_fixture_setup --> False [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'root_certificates' for <Function test_make_connection>>
          finish pytest_fixture_setup --> b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n' [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'conn_sync_service_registry' for <Function test_make_connection>>
          finish pytest_fixture_setup --> DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={}, _async_env=False, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12ebc62f0>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12ebc57e0>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'conn_async_service_registry' for <Function test_make_connection>>
          finish pytest_fixture_setup --> DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={}, _async_env=True, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12ea0fc70>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12ea0ebc0>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
          finish pytest_fixture_setup --> DefaultServicesRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_registry=DefaultReportingRegistry(_rci=RequestContextInfo(request_id=None, tenant=None, user_id=None, user_name=None, x_dl_debug_mode=None, endpoint_code=None, _x_dl_context={}, _plain_headers=<CIMultiDict()>), _reporting_records=[]), _mutations_cache_factory=DefaultUSEntryMutationCacheFactory(default_ttl=60), _mutations_redis_client_factory=None, _default_cache_ttl_config=None, _conn_exec_factory=DefaultConnExecutorFactory(_map_recipe_created_ce_pair={}, _async_env=False, _services_registry_ref=FutureRef(_FutureRef__ref=...), _entity_usage_checker=None, rqe_config=RQEConfig(ext_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9876), ext_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9877), int_sync_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9874), int_async_rqe=RQEBaseURL(scheme='http', host='[::1]', port=9875), execute_request_mode=<RQEExecuteRequestMode.STREAM: 'stream'>), tpe=<dl_utils.aio.ContextVarExecutor object at 0x12ebc62f0>, conn_sec_mgr=InsecureConnectionSecurityManager(db_domain_manager=DBDomainManager(), conn_sec_checkers=[InsecureConnectionSafetyChecker()]), ca_data=b'-----BEGIN CERTIFICATE-----\nMIIFGTCCAwGgAwIBAgIQJMM7ZIy2SYxCBgK7WcFwnjANBgkqhkiG9w0BAQ0FADAf\nMR0wGwYDVQQDExRZYW5kZXhJbnRlcm5hbFJvb3RDQTAeFw0xMzAyMTExMzQxNDNa\nFw0zMzAyMTExMzUxNDJaMB8xHTAbBgNVBAMTFFlhbmRleEludGVybmFsUm9vdENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgb4xoQjBQ7oEFk8EHVGy\n1pDEmPWw0Wgw5nX9RM7LL2xQWyUuEq+Lf9Dgh+O725aZ9+SO2oEs47DHHt81/fne\n5N6xOftRrCpy8hGtUR/A3bvjnQgjs+zdXvcO9cTuuzzPTFSts/iZATZsAruiepMx\nSGj9S1fGwvYws/yiXWNoNBz4Tu1Tlp0g+5fp/ADjnxc6DqNk6w01mJRDbx+6rlBO\naIH2tQmJXDVoFdrhmBK9qOfjxWlIYGy83TnrvdXwi5mKTMtpEREMgyNLX75UjpvO\nNkZgBvEXPQq+g91wBGsWIE2sYlguXiBniQgAJOyRuSdTxcJoG8tZkLDPRi5RouWY\ngxXr13edn1TRDGco2hkdtSUBlajBMSvAq+H0hkslzWD/R+BXkn9dh0/DFnxVt4XU\n5JbFyd/sKV/rF4Vygfw9ssh1ZIWdqkfZ2QXOZ2gH4AEeoN/9vEfUPwqPVzL0XEZK\nr4s2WjU9mE5tHrVsQOZ80wnvYHYi2JHbl0hr5ghs4RIyJwx6LEEnj2tzMFec4f7o\ndQeSsZpgRJmpvpAfRTxhIRjZBrKxnMytedAkUPguBQwjVCn7+EaKiJfpu42JG8Mm\n+/dHi+Q9Tc+0tX5pKOIpQMlMxMHw8MfPmUjC3AAd9lsmCtuybYoeN2IRdbzzchJ8\nl1ZuoI3gH7pcIeElfVSqSBkCAwEAAaNRME8wCwYDVR0PBAQDAgGGMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFKu5xf+h7+ZTHTM5IoTRdtQ3Ti1qMBAGCSsGAQQB\ngjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQAVpyJ1qLjqRLC34F1UXkC3vxpO\nnV6WgzpzA+DUNog4Y6RhTnh0Bsir+I+FTl0zFCm7JpT/3NP9VjfEitMkHehmHhQK\nc7cIBZSF62K477OTvLz+9ku2O/bGTtYv9fAvR4BmzFfyPDoAKOjJSghD1p/7El+1\neSjvcUBzLnBUtxO/iYXRNo7B3+1qo4F5Hz7rPRLI0UWW/0UAfVCO2fFtyF6C1iEY\n/q0Ldbf3YIaMkf2WgGhnX9yH/8OiIij2r0LVNHS811apyycjep8y/NkG4q1Z9jEi\nVEX3P6NEL8dWtXQlvlNGMcfDT3lmB+tS32CPEUwce/Ble646rukbERRwFfxXojpf\nC6ium+LtJc7qnK6ygnYF4D6mz4H+3WaxJd1S1hGQxOb/3WVw63tZFnN62F6/nc5g\n6T44Yb7ND6y3nVcygLpbQsws6HsjX65CoSjrrPn0YhKxNBscF7M7tLTW/5LK9uhk\nyjRCkJ0YagpeLxfV1l1ZJZaTPZvY9+ylHnWHhzlq0FzcrooSSsp4i44DB2K7O2ID\n87leymZkKUY6PMDa4GkDJx0dG4UXDhRETMf+NkYgtLJ+UIzMNskwVDcxO4kVL+Hi\nPj78bnC5yCw8P5YylR45LdxLzLO68unoXOyFz1etGXzszw8lJI9LNubYxk77mK8H\nLpuQKbSbIERsmR+QqQ==\n-----END CERTIFICATE-----\n\n', is_bleeding_edge_user=False, conn_cls_whitelist=None, connect_options_factory=None, connect_options_mutator=None, force_non_rqe_mode=True), _caches_redis_client_factory=None, _compute_executor=<dl_core.services_registry.compute_executor.ComputeExecutorTPE object at 0x12ebc57e0>, _cache_engine_factory=DefaultCacheEngineFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), cache_save_background=None), _mutation_cache_engine_factory=None, _data_processor_service_factory=None, _data_processor_factory=DefaultDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False, _source_data_processor_factory=SourceDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[], _is_bleeding_edge_user=False), _compeng_data_processor_factory=CompengDataProcessorFactory(_services_registry_ref=FutureRef(_FutureRef__ref=...), _created_data_processors=[])), _connectors_settings={}, _file_uploader_client_factory=None, _task_processor_factory=None, _rqe_caches_settings=None, _required_services=set(), _inst_specific_sr=None, _exports_history_url_path=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'db_url' for <Function test_make_connection>>
          finish pytest_fixture_setup --> bi_postgresql://datalens:qwerty@localhost:52303/test_data [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'engine_params' for <Function test_make_connection>>
          finish pytest_fixture_setup --> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'engine_config' for <Function test_make_connection>>
          finish pytest_fixture_setup --> DbEngineConfig(url='bi_postgresql://datalens:qwerty@localhost:52303/test_data', engine_params=frozendict.frozendict({})) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'db_config' for <Function test_make_connection>>
          finish pytest_fixture_setup --> CoreDbConfig(engine_config=DbEngineConfig(url='bi_postgresql://datalens:qwerty@localhost:52303/test_data', engine_params=frozendict.frozendict({})), supports_executemany=True, conn_type=ConnectionType('postgres')) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest '_add_db_init_hook' for <Function test_make_connection>>
          finish pytest_fixture_setup --> None [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
              request: <SubRequest 'db' for <Function test_make_connection>>
    pytest_keyboard_interrupt [hook]
        excinfo: <ExceptionInfo KeyboardInterrupt() tblen=66>
    finish pytest_keyboard_interrupt --> [] [hook]
    pytest_sessionfinish [hook]
        session: <Session dl_connector_postgresql exitstatus=<ExitCode.INTERRUPTED: 2> testsfailed=0 testscollected=101>
        exitstatus: 2
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='db_is_ready' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'db_is_ready' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'db' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest '_add_db_init_hook' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='db' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'db' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='_add_db_init_hook' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest '_add_db_init_hook' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'db_config' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='db_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'db_config' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'engine_config' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'engine_config' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='engine_params' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'engine_params' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='engine_config' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'engine_config' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='db_url' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'db_url' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestSslPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'sync_conn_executor_factory' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'sync_conn_executor_factory' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='sync_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'sync_conn_executor_factory' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_get_data_source_templates_pg_partitioned>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_get_source_templates_paginated_fail_with_unsupported_db_names>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_get_source_templates_paginated_fail_with_unsupported_offset>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_get_source_templates_paginated_fail_when_search_is_not_supported>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_get_source_templates_paginated_fail_when_db_name_is_required>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_connection_data_export_flag>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_connection_get_data_source_templates>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_connection_test>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'root_certificates' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_bi_context' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_connection.py::TestPostgreSQLConnection'>
          request: <SubRequest 'conn_us_config' for <Function test_make_connection>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_us_config' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'async_conn_executor_factory' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'async_conn_executor_factory' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'async_conn_executor_factory' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'async_conn_executor_factory' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='async_conn_executor_factory' scope='function' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'async_conn_executor_factory' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'root_certificates' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_sync_us_manager' scope='class' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_sync_us_manager' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_bi_context' for <Function test_default_pass_db_query_to_user>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_us_config' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'root_certificates' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_bi_context' for <Function test_tables_list_schema[test_data_partitions-expected_tables1]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_us_config' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'root_certificates' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_bi_context' for <Function test_tables_list_schema[test_data-expected_tables0]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_us_config' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'root_certificates' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_bi_context' for <Function test_tables_list>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_us_config' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'root_certificates' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_bi_context' for <Function test_timeout>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_us_config' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'root_certificates' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_bi_context' for <Function test_pass_db_query_to_user[True-select 1 from <hidden>]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_default_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_default_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_sync_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_sync_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_exec_factory_async_env' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_exec_factory_async_env' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_us_config' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_us_config' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_async_service_registry' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_async_service_registry' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='root_certificates' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'root_certificates' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='conn_bi_context' scope='session' baseid='dl_connector_postgresql_tests/db/core/test_adapter.py::TestAsyncPostgreSQLAdapter'>
          request: <SubRequest 'conn_bi_context' for <Function test_pass_db_query_to_user[False-None]>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x12e6feb90>
          exitstatus: 2
          config: <_pytest.config.Config object at 0x101aae9e0>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x101aae9e0>
    finish pytest_unconfigure --> [] [hook]
