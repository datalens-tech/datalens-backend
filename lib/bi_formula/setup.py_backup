#!/usr/bin/env python3
from __future__ import annotations

import os

from setuptools import setup, find_packages

__version__ = "7.47.0"


PKG_DIR = os.path.dirname(os.path.abspath(__file__))
BACKEND_ROOT_DIR = os.path.dirname(os.path.dirname(PKG_DIR)).strip("/")
SETUP_KWARGS = dict(
    name="yandex-bi-formula",
    version=__version__,
    author="Grigory Statsenko",
    author_email="gstatsenko@yandex-team.ru",
    packages=find_packages(exclude=["bi_formula_tests*"]),
    zip_safe=False,

    include_package_data=True,
    package_data={
        "bi_formula": [
            "parser/antlr/*.g4",
            "parser/antlr/gen/*.interp",
            "parser/antlr/gen/*.tokens",
        ],
        "*": [
            "py.typed",
        ],
    },

    entry_points={
        "console_scripts": [
            "bi-formula-cli = bi_formula.scripts.formula_cli:main",
        ],
    },
    install_requires=[
        "antlr4-python3-runtime==4.11",
        "attrs",
        "graphviz",
        "jinja2",
        "sqlalchemy>=1.2",
        "ciso8601",
    ] + [
        f"{name} @ file://localhost/{BACKEND_ROOT_DIR}/lib/{pydir}"
        for name, pydir in (
            ("yandex-bi-db-testing", "bi_db_testing"),
            ("yandex-bi-utils", "bi_utils"),
            ("dynamic-enum", "dynamic_enum"),
            ("sqlalchemy-gsheets", "bi_sqlalchemy_gsheets"),  # FIXME: Remove after it is removed from code
            ("yandex-bi-sqlalchemy-bitrix", "bi_sqlalchemy_bitrix"),  # FIXME: Remove after it is removed from code
        )
        if os.path.exists(f"/{BACKEND_ROOT_DIR}/lib/{pydir}")
    ],
    extras_require={
        "develop": [  # for testing and development
            "pylama<7.8",
            "pytest<6",
            "pytest-cov<2.11",
            "pytest-html<2",  # pytest-html>=2 breaks pylama  # TODO: remove
            "python-dateutil<2.9",
            "wheel",
            "ipython", "ipdb", "pyaux", "pyauxm",  # tier1 debug-conveniences
        ] + [
            f"{name} @ file://localhost/{BACKEND_ROOT_DIR}/lib/{pydir}"
            for name, pydir in []
            if os.path.exists(f"/{BACKEND_ROOT_DIR}/lib/{pydir}")
        ],
        "mypy": [  # for testing and development
            "mypy",
            "sqlalchemy-stubs",
        ],
    },
)
SETUP_KWARGS["extras_require"]["all"] = sorted(set(
    pkg for lst in SETUP_KWARGS["extras_require"].values() for pkg in lst
))


if __name__ == "__main__":
    setup(**SETUP_KWARGS)
