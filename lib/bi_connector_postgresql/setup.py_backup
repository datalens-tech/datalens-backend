#!/usr/bin/env python3

from __future__ import annotations

import os

from setuptools import setup, find_packages

PKG_DIR = os.path.dirname(os.path.abspath(__file__))
BACKEND_ROOT_DIR = os.path.dirname(os.path.dirname(PKG_DIR)).strip("/")
SETUP_KWARGS = dict(
    name="yandex-bi-connector-postgresql",
    author="Nikolai Proskurin",
    author_email="mcpn@yandex-team.ru",
    packages=find_packages(exclude=["bi_connector_postgresql_tests*"]),
    zip_safe=False,

    include_package_data=True,
    package_data={
        "*": [
            "py.typed",
        ],
    },
    entry_points={
        "bi_core.connectors": [
            "postgresql=bi_connector_postgresql.core.postgresql.connector:PostgreSQLCoreConnector",
            "greenplum=bi_connector_postgresql.core.greenplum.connector:GreenplumCoreConnector",
        ],
        "bi_db_testing.connectors": [
            "postgresql=bi_connector_postgresql.db_testing.connector:PostgreSQLDbTestingConnector",
        ],
        "bi_formula.connectors": [
            "postgresql=bi_connector_postgresql.formula.connector:PostgreSQLFormulaConnector",
        ],
    },
    install_requires=[
        # External packages
        "attrs",
        "asyncpg",
        "marshmallow-enum",
        "psycopg2-binary<3",
        "python-dateutil",
        "sqlalchemy>=1.4",
    ] + [
        f"{name} @ file://localhost/{BACKEND_ROOT_DIR}/lib/{pydir}"
        for name, pydir in (
            # bi packages go here
            ("yandex-bi-app-tools", "bi_app_tools"),
            ("yandex-bi-db-configs", "bi_configs"),
            ("yandex-bi-db-constants", "bi_constants"),
            ("yandex-bi-db-core", "bi_core"),
            ("yandex-bi-core-testing", "bi_core_testing"),
            ("yandex-bi-db-testing", "bi_db_testing"),
            ("yandex-bi-formula", "bi_formula"),
            ("yandex-bi-sqlalchemy-postgres", "bi_sqlalchemy_postgres"),
            ("yandex-bi-utils", "bi_utils"),
        )
        if os.path.exists(f"/{BACKEND_ROOT_DIR}/lib/{pydir}")
    ],
    extras_require={
        "develop": [  # for testing and development
            "pytz",
        ],
        "mypy": [  # for testing and development
            "mypy",
            "sqlalchemy-stubs",
        ],
    },
)
SETUP_KWARGS["extras_require"]["all"] = sorted(set(
    pkg for lst in SETUP_KWARGS["extras_require"].values() for pkg in lst
))


if __name__ == "__main__":
    setup(**SETUP_KWARGS)
