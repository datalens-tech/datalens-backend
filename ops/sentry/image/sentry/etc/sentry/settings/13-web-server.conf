import os
from sentry.utils.types import Bool


def set_cleanup_job(days, schedule):
    """ If days == 0 or not int - return empty dict, else cron2 """
    try:
        days = int(days)
    except ValueError:
        print('SENTRY_CLEANUP_DAYS must be integer, disabling cron')
        days = 0
    script = '/usr/local/bin/sentry_cleanup.sh'
    cron = '{} {} {}'.format(schedule, script, days)
    return {} if days == 0 else {'cron2': cron}


def set_unistat_job(schedule):
    script = '/usr/local/bin/sentry queues list | grep -P " \d+$" | tr "." "_" > /tmp/sentry_queues_list.new && mv /tmp/sentry_queues_list.new /tmp/sentry_queues_list'
    cron = '{} {}'.format(schedule, script)
    return {'cron': cron}


if os.getenv('SENTRY_USE_SSL', False):
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True


SENTRY_WEB_PORT = '9000'
SENTRY_WEB_OPTIONS = {
    'bind': '[::]:' + SENTRY_WEB_PORT,
    'pcre': False,
    'http-timeout': 10,
}


SENTRY_CLEANUP_DAYS = os.getenv('SENTRY_CLEANUP_DAYS', 0)
SENTRY_CLEANUP_SCHEDULE = os.getenv('SENTRY_CLEANUP_SCHEDULE',
                                    'minute=0,hour=1,unique=1,harakiri=82800')
SENTRY_WEB_OPTIONS.update(set_cleanup_job(SENTRY_CLEANUP_DAYS,
                                          SENTRY_CLEANUP_SCHEDULE))
#  https://uwsgi-docs.readthedocs.io/en/latest/Cron.html#uwsgi-signal-based
SENTRY_UNISTAT_SCHEDULE = os.getenv('SENTRY_UNISTAT_SCHEDULE', '-1 -1 -1 -1 -1')
SENTRY_WEB_OPTIONS.update(set_unistat_job(SENTRY_UNISTAT_SCHEDULE))

