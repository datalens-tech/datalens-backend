#!/usr/bin/env python3

import os
import logging

import sh
import tqdm
import ruamel.yaml


LOGGER = logging.getLogger(__name__)


def shcmd(cmd, **kwargs):
    resp = sh.sh('-c', cmd, **kwargs)
    return resp.stdout.decode('utf-8')


def skm_encrypt_i(filepath, env):
    try:
        res = sh.skm('encrypt-md', '-d', config=filepath, _env=env)
    except Exception as exc:
        stderr = getattr(exc, 'stderr', None)
        if isinstance(stderr, bytes):
            LOGGER.error("skm error; stderr: \n =======\n%s\n =======", stderr.decode('utf-8', errors='replace'))
        raise
    return res.stdout.decode('utf-8')


def skm_encrypt(*args, **kwargs):
    tries = 3
    for retries_remain in range(tries - 1, -1, -1):
        try:
            return skm_encrypt_i(*args, **kwargs)
        except Exception as exc:
            if not retries_remain:
                raise
            LOGGER.error("Retrying %r; %r retries remain", exc, retries_remain)
    raise Exception("Logic error")


def main():
    logging.basicConfig(level=logging.INFO)

    filepaths = [
        os.path.join(dir_name, filename)
        for dir_name, _, filenames in os.walk('.')
        for filename in filenames
        if filename == 'skm.yaml'
    ]

    ryaml = ruamel.yaml.YAML()

    # shell:
    # IAM_TOKEN="$(yc iam create-token --profile=dlb-preprod)" && export IAM_TOKEN && YC_TOKEN="$IAM_TOKEN" && export YC_TOKEN && YAV_TOKEN="$(ya vault get version sec-01d4jkj89g0gac6c3nm2nqq5q3 -o yav_oauth)" && export YAV_TOKEN
    iam_token = shcmd('yc iam create-token --profile yc-prod')
    assert isinstance(iam_token, str)
    yav_token = shcmd('ya vault get version sec-01d4jkj89g0gac6c3nm2nqq5q3 -o yav_oauth')
    assert isinstance(yav_token, str)
    env = dict(IAM_TOKEN=iam_token, YC_TOKEN=iam_token, YAV_TOKEN=yav_token)

    for filepath in tqdm.tqdm(filepaths):
        ig_file = os.path.join(
            os.path.dirname(filepath),
            'ig-config.yaml')
        if not os.path.exists(ig_file):
            LOGGER.error("skm.yaml without ig-config.yaml: %r", filepath)
            continue

        logging.debug("File %s", filepath)
        skm_config_yaml = skm_encrypt(filepath=filepath, env=env)
        skm_config = ryaml.load(skm_config_yaml)['skm']
        assert isinstance(skm_config, str)

        with open(ig_file) as fobj:
            ig_data = ryaml.load(fobj)
        prev_skm = ig_data['instance_template']['metadata']['skm']
        if skm_config == prev_skm:
            continue
        ig_data['instance_template']['metadata']['skm'] = skm_config
        with open(ig_file, 'w') as fobj:
            ryaml.dump(ig_data, fobj)


if __name__ == '__main__':
    main()
