name: "ðŸš€ðŸŸ¢ Release"

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "Version to release, in format 'vX.Y.Z'"
      make_latest:
        type: boolean
        description: "Make latest"
        default: true
      draft:
        type: boolean
        description: "Is draft"
        default: false

jobs:
  push_images:
    name: "Pull candidate images and push to release"
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        image_name:
        - "datalens-control-api"
        - "datalens-data-api"
    env:
      cr_url: "ghcr.io/${{ github.repository_owner }}"
      image_url_rc: "ghcr.io/${{ github.repository_owner }}/${{ matrix.image_name }}:${{ github.event.inputs.version }}-rc.1"

    steps:
    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.cr_url }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull release candidate image
      id: pull_image
      run: |
        echo "Pulling release candidate image"
        docker pull ${image_url_rc}

    - name: Push release tag
      id: push_image
      run: |
        echo "Pushing release image"
        docker tag "${{ env.image_url_rc }}" "${{ env.image_tag }}"
        docker push "${{ env.image_tag }}"
      env:
        image_tag: "${{ env.cr_url }}/${{ matrix.image_name }}:${{ github.event.inputs.version }}"

  release:
    name: "Create release"
    needs: [push_images]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      branch: "release/${{ github.event.inputs.version }}"

    steps:
    - name: Create release
      id: create_release
      working-directory: .github/.scripts
      run: |
        gh release create \
          --repo ${{ github.repository_owner }}/${{ github.event.repository.name }} \
          ${{ github.event.inputs.version }} \
          --target ${{ env.branch }} \
          ${{ github.event.inputs.make_latest == 'true' && '--latest' || '' }} \
          ${{ github.event.inputs.draft == 'true' && '--draft' || '' }} \
          --generate-notes
      env:
        GH_TOKEN: ${{ github.token }}
