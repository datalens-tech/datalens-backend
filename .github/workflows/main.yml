name: main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  pull_request:
#  push:
#    paths:
#      - lib/**
#      - utils/**
#      - ops/ci/**
#      - '.github/workflows/main.yml'
  workflow_dispatch:
    inputs:
      test_targets:
        default: ""
        description: "Comma separated list to run pytest on, e.g.: `lib/bi_constants,lib/bi_utils`. "
      run_mypy_only:
        type: boolean
        default: false
        description: "Check to only run mypy"
      pytest_timeout_minutes:
        type: number
        default: 10
        description: "Timeout for pytest JOB in minutes"

jobs:
  gh_build_image:
    runs-on: [ self-hosted, linux, light ]
    container:
      image: "${{ vars.DL_CI_CR_URI }}/debian_docker:latest"
      options: -v /var/run/docker.sock:/var/run/docker.sock
      credentials:
        username: "${{ secrets.DL_CI_CR_USER }}"
        password: "${{ secrets.DL_CI_CR_TOKEN }}"
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DL_CI_CR_URI }}
          username: ${{ secrets.DL_CI_CR_USER }}
          password: ${{ secrets.DL_CI_CR_TOKEN }}
      - name: 'Cleanup build folder'
        run: |
          rm -rf ./* || true
          rm -rf ./.??* || true
      - name: Checkout code
        uses: actions/checkout@v4
      - run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
      - run: /bin/bash ops/ci/gha_build_bake.sh
        env:
          CR_URI: "${{ vars.DL_CI_CR_URI }}"
          GIT_SHA: "${{ github.sha }}"

  router:
    runs-on: [self-hosted, linux, light]
    needs: gh_build_image
    container:
      # until https://github.com/github/docs/issues/25520 is resolved, using vars
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_with_code:${{ github.sha }}"
      credentials:
        username: "${{ secrets.DL_CI_CR_USER }}"
        password: "${{ secrets.DL_CI_CR_TOKEN }}"
    outputs:
      affected: ${{ steps.get_affected.outputs.affected }}
    steps:
    - name: 'Cleanup build folder'
      run: |
        rm -rf ./* || true
        rm -rf ./.??* || true
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    # https://github.com/actions/runner-images/issues/6775
    - run: git config --global --add safe.directory .
    - run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
    - run: git fetch origin trunk
    - name: Get packages affected by changes in the current commit
      id: get_affected
      run: |
        . /venv/bin/activate
        TARGET_DATA=$(bash /data/mainrepo/ci/gh_list_changes.sh ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})   
        echo "Changed files from git diff: $TARGET_DATA"
        echo "$TARGET_DATA" > /tmp/targets.json
        cat /tmp/targets.json
        detect-affected-packages \
          --repo=/data \
          --changes_file="/tmp/targets.json" \
          --root_pkgs="lib,app,mainrepo/lib,mainrepo/app,mainrepo/terrarium" \
          --fallback_pkg="mainrepo/terrarium/bi_ci" | tee -a  >> "$GITHUB_OUTPUT"
      env:
        TEST_TARGET_OVERRIDE: ${{ github.event.inputs.test_targets }}

  pytest_split:
    runs-on: [ self-hosted, linux, light ]
    needs: router
    if: ${{ github.event.inputs.run_mypy_only != 'true' }}
    container:
      # until https://github.com/github/docs/issues/25520 is resolved, using vars
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_with_code:${{ github.sha }}"
      credentials:
        username: "${{ secrets.DL_CI_CR_USER }}"
        password: "${{ secrets.DL_CI_CR_TOKEN }}"
    outputs:
      split_base: ${{ steps.get_split.outputs.split_base }}
      split_fat: ${{ steps.get_split.outputs.split_fat }}
      split_ext_public: ${{ steps.get_split.outputs.split_ext_public }}
      split_ext_private: ${{ steps.get_split.outputs.split_ext_private }}
    steps:
      - name: Run python script to split jobs
        id: get_split
        run: |
          . /venv/bin/activate && echo '${{ needs.router.outputs.affected }}' >> /tmp/dl_test_targets.json
          export TEST_TARGETS="/tmp/dl_test_targets.json"
          split-pytest-tasks base /data /tmp/dl_test_targets.json >> "$GITHUB_OUTPUT"
          split-pytest-tasks fat /data /tmp/dl_test_targets.json | tee -a >>  "$GITHUB_OUTPUT"
          split-pytest-tasks ext_public /data /tmp/dl_test_targets.json | tee -a >>  "$GITHUB_OUTPUT"
          split-pytest-tasks ext_private /data /tmp/dl_test_targets.json | tee -a >>  "$GITHUB_OUTPUT"
        # no idea how to export multiple outputs into GH env using a single cmd, hence this atrocity ^^

  pytest_base:
    runs-on: [self-hosted, linux, light]
    needs: pytest_split
    if: ${{ needs.pytest_split.outputs.split_base != '[]' }}
    container:
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_with_code:${{ github.sha }}"
      credentials:
        username: "${{ secrets.DL_CI_CR_USER }}"
        password: "${{ secrets.DL_CI_CR_TOKEN }}"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    name: "üêç[pytest]${{ matrix.value }}"
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        value: ${{fromJson(needs.pytest_split.outputs.split_base)}}
    steps:
      - run: mkdir /report
      - run: echo "Running py tests for ${{ matrix.value }}"
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DL_CI_CR_URI }}
          username: ${{ secrets.DL_CI_CR_USER }}
          password: ${{ secrets.DL_CI_CR_TOKEN }}
      - run: echo compose_path="/data/$(echo ${{ matrix.value }} | cut -d ":" -f1)/" >>  "$GITHUB_ENV"
      - run: cd "${{ env.compose_path }}" && echo compose_prj="$(basename "$PWD")_$(shuf -i 1000000-1000000000 -n 1)" >> "$GITHUB_ENV"
      # We need to set custom compose project name to ensure "unique" container names in the host docker env
      - name: run bash script with all logic for starting compose and running tests
        run: |
          bash /data/ops/ci/execute_test_with_docker_compose.sh "${{ matrix.value }}" "${{ job.container.network }}" "${{ env.compose_prj }}" \
            WE_ARE_IN_CI=1
      - name: Stop compose if provided
        # We could not put this into bash script, since job could be cancelled by user request
        if: always()  # yes! always
        run: bash /data/ops/ci/stop_compose.sh "${{ matrix.value }}" "${{ job.container.network }}"  "${{ env.compose_prj }}"
      - uses: actions/upload-artifact@v3
        if: "!cancelled()"
        with:
          name: "pytest_reports_${{ env.compose_prj }}"
          path: /report/
          retention-days: 1

  pytest_fat:
    # copy-paste, but simplest solution for now given options provided by github ci
    runs-on: [self-hosted, linux, fat]
    needs: pytest_split
    if: ${{ needs.pytest_split.outputs.split_fat != '[]' }}
    container:
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_with_code:${{ github.sha }}"
      credentials:
        username: "${{ secrets.DL_CI_CR_USER }}"
        password: "${{ secrets.DL_CI_CR_TOKEN }}"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    name: "üêç[pytest][fat]${{ matrix.value }}"
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        value: ${{fromJson(needs.pytest_split.outputs.split_fat)}}
    steps:
      - run: mkdir /report
      - run: echo "Running py tests for ${{ matrix.value }}"
      - run: echo "Split fat ${{ needs.pytest_split.outputs.split_fat }}"
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DL_CI_CR_URI }}
          username: ${{ secrets.DL_CI_CR_USER }}
          password: ${{ secrets.DL_CI_CR_TOKEN }}
      - run: echo compose_path="/data/$(echo ${{ matrix.value }} | cut -d ":" -f1)/" >>  "$GITHUB_ENV"
      - run: cd "${{ env.compose_path }}" && echo compose_prj="$(basename "$PWD")_$(shuf -i 1000000-1000000000 -n 1)" >> "$GITHUB_ENV"
        # We need to set custom compose project name to ensure "unique" container names in the host docker env
      - run: echo "TARGET_PATH=${{ matrix.value }}" "NET_NAME=${{ job.container.network }}" "COMPOSE_PROJECT_NAME=${{ env.compose_prj }}"
      - name: run bash script with all logic for starting compose and running tests
        run: |
          bash /data/ops/ci/execute_test_with_docker_compose.sh "${{ matrix.value }}" "${{ job.container.network }}" "${{ env.compose_prj }}" \
            WE_ARE_IN_CI=1
      - name: Stop compose if provided
        # We could not put this into bash script, since job could be cancelled by user request
        if: always()  # yes! always
        run: bash /data/ops/ci/stop_compose.sh "${{ matrix.value }}"  "${{ job.container.network }}"  "${{ env.compose_prj }}"
      - uses: actions/upload-artifact@v3
        if: "!cancelled()"
        with:
          name: "pytest_reports_${{ env.compose_prj }}"
          path: /report/
          retention-days: 1

  pytest_ext_public:
    # todo: return ext_public
    runs-on: [ self-hosted, linux, light ]
    needs: pytest_split
    if: ${{ needs.pytest_split.outputs.split_ext_public != '[]' }}
    container:
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_with_code:${{ github.sha }}"
      credentials:
        username: "${{ secrets.DL_CI_CR_USER }}"
        password: "${{ secrets.DL_CI_CR_TOKEN }}"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    name: "üêç[pytest][ext]${{ matrix.value }}"
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        value: ${{fromJson(needs.pytest_split.outputs.split_ext_public)}}
    steps:
      - run: mkdir /report
      - run: echo "Running py tests for ${{ matrix.value }}"
      - run: echo "Split ext ${{ needs.pytest_split.outputs.split_ext_public }}"
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DL_CI_CR_URI }}
          username: ${{ secrets.DL_CI_CR_USER }}
          password: ${{ secrets.DL_CI_CR_TOKEN }}
      - run: echo compose_path="/data/$(echo ${{ matrix.value }} | cut -d ":" -f1)/" >>  "$GITHUB_ENV"
      - run: cd "${{ env.compose_path }}" && echo compose_prj="$(basename "$PWD")_$(shuf -i 1000000-1000000000 -n 1)" >> "$GITHUB_ENV"
      - run: echo "TARGET_PATH=${{ matrix.value }}" "NET_NAME=${{ job.container.network }}" "COMPOSE_PROJECT_NAME=${{ env.compose_prj }}"
      - name: run bash script with all logic for starting compose and running tests
        run: |
          bash /data/ops/ci/execute_test_with_docker_compose.sh "${{ matrix.value }}" "${{ job.container.network }}" "${{ env.compose_prj }}" \
            WE_ARE_IN_CI=1 \
            GOOGLE_API_KEY="${{ secrets.EXT_GOOGLE_API_KEY }}" \
            BITRIX_TOKEN="${{ secrets.EXT_BITRIX_TOKEN }}" \
            BITRIX_PARTNERS_TOKEN="${{ secrets.EXT_BITRIX_PARTNERS_TOKEN }}" \
            BITRIX_DATALENS_TOKEN="${{ secrets.EXT_BITRIX_DATALENS_TOKEN }}" \
            METRIKA_OAUTH="${{ secrets.EXT_METRIKA_OAUTH }}"
      - name: Stop compose if provided
        if: always()  # yes! always
        run: bash /data/ops/ci/stop_compose.sh "${{ matrix.value }}"  "${{ job.container.network }}"  "${{ env.compose_prj }}"
      - uses: actions/upload-artifact@v3
        if: "!cancelled()"
        with:
          name: "pytest_reports_${{ env.compose_prj }}"
          path: /report/
          retention-days: 1

  pytest_ext_private:
    runs-on: [ self-hosted, linux, ext_private ]
    needs: pytest_split
    #if: ${{ needs.pytest_split.outputs.split_ext_private != '[]' }}
    if: "!always()"
    container:
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_with_code:${{ github.sha }}"
      credentials:
        username: "${{ secrets.DL_CI_CR_USER }}"
        password: "${{ secrets.DL_CI_CR_TOKEN }}"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    name: "üêç[pytest][ext]${{ matrix.value }}"
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        value: ${{fromJson(needs.pytest_split.outputs.split_ext_private)}}
    steps:
      - run: mkdir /report
      - run: echo "Running py tests for ${{ matrix.value }}"
      - run: echo "Split ext ${{ needs.pytest_split.outputs.split_ext_private }}"
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DL_CI_CR_URI }}
          username: ${{ secrets.DL_CI_CR_USER }}
          password: ${{ secrets.DL_CI_CR_TOKEN }}
      - run: echo compose_path="/data/$(echo ${{ matrix.value }} | cut -d ":" -f1)/" >>  "$GITHUB_ENV"
      - run: cd "${{ env.compose_path }}" && echo compose_prj="$(basename "$PWD")_$(shuf -i 1000000-1000000000 -n 1)" >> "$GITHUB_ENV"
      - run: echo "TARGET_PATH=${{ matrix.value }}" "NET_NAME=${{ job.container.network }}" "COMPOSE_PROJECT_NAME=${{ env.compose_prj }}"
      - name: run bash script with all logic for starting compose and running tests
        run: |
          bash /data/ops/ci/execute_test_with_docker_compose.sh "${{ matrix.value }}" "${{ job.container.network }}" "${{ env.compose_prj }}" \
            WE_ARE_IN_CI=1
      - name: Stop compose if provided
        if: always()  # yes! always
        run: bash /data/ops/ci/stop_compose.sh "${{ matrix.value }}"  "${{ job.container.network }}"  "${{ env.compose_prj }}"
      - uses: actions/upload-artifact@v3
        if: "!cancelled()"
        with:
          name: "pytest_reports_${{ env.compose_prj }}"
          path: /report/
          retention-days: 1

  publish-result:
    runs-on: [self-hosted, linux, light]
    # needs: [ "pytest", "pytest_fat", "pytest_ext_public", "pytest_ext_private"]
    needs: [ "pytest_base", "pytest_fat", "pytest_ext_public"]
    if: "!cancelled() && ${{ github.event.inputs.run_mypy_only != 'true' }}"
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    container: docker:latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: ./report/
      - run: ls -lah ./report
      - name: Publish Test Results
        uses: datalens-tech/publish-unit-test-result-action@55478522536e0c60b0a4ff0c2bb8ab110d7a0f33
        with:
          files: |
            ./report/**/*.xml
          event_name: ${{ github.event.workflow_run.event }}
          report_individual_runs: "true"

  mypy:
    runs-on: [ self-hosted, linux, light ]
    needs: router
    container:
      # until https://github.com/github/docs/issues/25520 is resolved, using vars
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_mypy:${{ github.sha }}"
      credentials:
        username: "${{ secrets.DL_CI_CR_USER }}"
        password: "${{ secrets.DL_CI_CR_TOKEN }}"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    name: "üê≤ mypy"
    timeout-minutes: ${{ inputs.pytest_timeout_minutes && fromJSON(inputs.pytest_timeout_minutes ) || 10 }}
    steps:
      - run: echo '${{ needs.router.outputs.affected }}' >> /tmp/dl_test_targets.json
      - name: run mypy
        run: |
          . /venv/bin/activate
          execute-mypy-multi /data /tmp/dl_test_targets.json
        env:
          PYTHONUNBUFFERED: "1"

  codestyle_mainrepo_without_ruff:
    runs-on: [ self-hosted, linux, light ]
    needs: gh_build_image
    container:
      # until https://github.com/github/docs/issues/25520 is resolved, using vars
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_code_quality:${{ github.sha }}"
      credentials:
        username: ${{ secrets.DL_CI_CR_USER }}
        password: ${{ secrets.DL_CI_CR_TOKEN }}
    steps:
      - name: 'Cleanup build folder'
        run: |
          rm -rf ./* || true
          rm -rf ./.??* || true
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - run: |
          task cq:check_dir -- ./mainrepo
          task cq:check_dir_strict -- ./mainrepo
        env:
          VENV_PATH: /venv
          SKIP_RUFF: true

  codestyle_all_without_ruff:
    runs-on: [self-hosted, linux, light]
    needs: gh_build_image
    container:
      # until https://github.com/github/docs/issues/25520 is resolved, using vars
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_code_quality:${{ github.sha }}"
      credentials:
        username: ${{ secrets.DL_CI_CR_USER }}
        password: ${{ secrets.DL_CI_CR_TOKEN }}
    steps:
      - name: 'Cleanup build folder'
        run: |
          rm -rf ./* || true
          rm -rf ./.??* || true
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - run: |
          task cq:check_dir -- .
          task cq:check_dir_strict -- .
        env:
          VENV_PATH: /venv
          SKIP_RUFF: true

  codestyle_changed_without_ruff:
    runs-on: [ self-hosted, linux, light ]
    needs: gh_build_image
    container:
      # until https://github.com/github/docs/issues/25520 is resolved, using vars
      image: "${{ vars.DL_CI_CR_URI }}/datalens_ci_code_quality:${{ github.sha }}"
      credentials:
        username: ${{ secrets.DL_CI_CR_USER }}
        password: ${{ secrets.DL_CI_CR_TOKEN }}
    steps:
      - name: 'Cleanup build folder'
        run: |
          rm -rf ./* || true
          rm -rf ./.??* || true
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # https://github.com/actions/runner-images/issues/6775
      - run: git config --global --add safe.directory .
      - run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
      - run: |
          TARGET=$(bash /data/mainrepo/ci/gh_list_changes.sh ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo $TARGET
      - run: |
          TARGET=$(bash /data/mainrepo/ci/gh_list_changes.sh ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo $TARGET
          task cq:check_target -- "$TARGET"
          task cq:check_target_strict  -- "$TARGET" 1>/dev/null 2>/dev/null
        env:
          VENV_PATH: /venv
          SKIP_RUFF: true
          TEST_TARGET_OVERRIDE: ${{ github.event.inputs.test_targets }}
