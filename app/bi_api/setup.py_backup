#!/usr/bin/env python3
from __future__ import annotations

import os

from setuptools import setup, find_packages

__version__ = "0.1900.0"


PKG_DIR = os.path.dirname(os.path.abspath(__file__))
BACKEND_ROOT_DIR = os.path.dirname(os.path.dirname(PKG_DIR)).strip("/")
SETUP_KWARGS = dict(
    name="yandex-bi-api",
    version=__version__,
    author="Dmitry Fedorov",
    author_email="dmifedorov@yandex-team.ru",
    packages=find_packages(exclude=["tests", "tests.*"]),
    zip_safe=False,
    include_package_data=True,
    package_data={
        "bi": [
            "settings/*.conf*",
        ],
    },
    entry_points={},
    install_requires=[
        "attrs",
        "blinker",
        "Flask",
        "flask-marshmallow",
        "flask-restx",
        "Flask-SQLAlchemy",
        "graphviz",
        "marshmallow",
        "marshmallow-enum",
        "marshmallow-oneofschema",
        "pandas",
        "pyopenssl",
        "python-dateutil",
        "raven",
        "requests",
        "SQLAlchemy",
        "sentry-sdk",
        "tabulate",
        "Werkzeug",

        "certifi-yandex",
    ] + [
        f"{name} @ file://localhost/{BACKEND_ROOT_DIR}/lib/{pydir}"
        for name, pydir in (
            ("yandex-bi-core", "bi_core"),
            ("yandex-bi-formula", "bi_formula"),

            ("yandex-bi-api-connector", "bi_api_connector"),
            ("yandex-bi-app-tools", "bi_app_tools"),
            ("yandex-bi-cloud-integration", "bi_cloud_integration"),
            ("yandex-bi-configs", "bi_configs"),
            ("yandex-bi-constants", "bi_constants"),
            ("yandex-bi-utils", "bi_utils"),
            ("yandex-bi-model-tools", "bi_model_tools"),

            ("yandex-bi-sqlalchemy-chyt", "bi_sqlalchemy_chyt"),
            ("yandex-bi-sqlalchemy-clickhouse", "bi_sqlalchemy_clickhouse"),
            ("yandex-bi-sqlalchemy-common", "bi_sqlalchemy_common"),
            ("yandex-bi-sqlalchemy-bitrix", "bi_sqlalchemy_bitrix"),
            ("sqlalchemy-gsheets", "bi_sqlalchemy_gsheets"),
            ("yandex-bi-sqlalchemy-mssql", "bi_sqlalchemy_mssql"),
            ("yandex-bi-sqlalchemy-mysql", "bi_sqlalchemy_mysql"),
            ("yandex-bi-sqlalchemy-postgres", "bi_sqlalchemy_postgres"),
            ("yandex-bi-sqlalchemy-promql", "bi_sqlalchemy_promql"),
            ("yandex-bi-sqlalchemy-solomon", "bi_sqlalchemy_solomon"),
            ("yandex-bi-sqlalchemy-yq", "bi_sqlalchemy_yq"),
            ("statinfra-clickhouse-sqlalchemy", "clickhouse-sqlalchemy"),
            ("sqlalchemy-metrika-api", "sqlalchemy_metrika_api"),

            ("statcommons", "statcommons"),

            # Connector packages
            ("yandex-bi-connector-bigquery", "bi_connector_bigquery"),
            ("yandex-bi-connector-bundle-ch-frozen", "bi_connector_bundle_ch_frozen"),
            ("yandex-bi-connector-bundle-chs3", "bi_connector_bundle_chs3"),
            ("yandex-bi-connector-clickhouse", "bi_connector_clickhouse"),
            ("yandex-bi-connector-metrica", "bi_connector_metrica"),
            ("yandex-bi-connector-mssql", "bi_connector_mssql"),
            ("yandex-bi-connector-mysql", "bi_connector_mysql"),
            ("yandex-bi-connector-oracle", "bi_connector_oracle"),
            ("yandex-bi-connector-postgresql", "bi_connector_postgresql"),
            ("yandex-bi-connector-promql", "bi_connector_promql"),
            ("yandex-bi-connector-snowflake", "bi_connector_snowflake"),
            ("yandex-bi-connector-yql", "bi_connector_yql"),
        )
        if os.path.exists(f"/{BACKEND_ROOT_DIR}/lib/{pydir}")
    ],
    extras_require={
        "debug": [  # “troubleshooting”
            # This stuff goes into the containers too, for convenience.
            "ipdb",
            "ipython",
            "flask-shell-ipython",
        ],
        "develop": [
            # https://github.yandex-team.ru/tools/releaser
            # https://pypi.yandex-team.ru/dashboard/repositories/default/packages/releaser-cli/
            "releaser-cli[all]",
        ],
        "tests": [  # Also relevant for development
            "aiobotocore",
            "docker",
            "pip-tools>=4.5.0",
            "pytest>=5.4.3",
            "pytest-cov>=2.7.1",
            "pytest-flask>=0.15.0",
            "pytest-html>=1.22.0",
            "pytest-asyncio>=0.10.0",
            "pytest-lazy-fixture>=0.6.3",
            "boto3",
            # "pytest-aiohttp",
            "pytest-asyncio<0.11.0",
            "responses",
            "yandex-passport-vault-client",
        ] + [
            f"{name} @ file://localhost/{BACKEND_ROOT_DIR}/app/{pydir}"
            for name, pydir in (
                ("bi-file-uploader-worker", "bi_file_uploader_worker"),
            )
            if os.path.exists(f"/{BACKEND_ROOT_DIR}/app/{pydir}")
        ],
        "serving": [  # Stuff that goes into the containers.
            "uWSGI>=2.0.18",
            "uwsgitop",  # a debug-addition to uwsgi.
            "gunicorn",
        ],
    }
)
SETUP_KWARGS["extras_require"]["all"] = sorted(set(
    pkg for lst in SETUP_KWARGS["extras_require"].values() for pkg in lst
))


if __name__ == "__main__":
    setup(**SETUP_KWARGS)
